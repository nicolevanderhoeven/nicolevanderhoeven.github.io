<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>video on Nicole van der Hoeven</title>
    <link>https://nicolevanderhoeven.github.io/tags/video/</link>
    <description>Recent content in video on Nicole van der Hoeven</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Nicole van der Hoeven</copyright>
    <lastBuildDate>Wed, 02 Feb 2022 10:46:56 +0100</lastBuildDate><atom:link href="https://nicolevanderhoeven.github.io/tags/video/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a D&amp;D DM&#39;s Brain Attic With Obsidian</title>
      <link>https://nicolevanderhoeven.github.io/blog/20220202-creating-a-dnd-dms-brain-attic-with-obsidian/</link>
      <pubDate>Wed, 02 Feb 2022 10:46:56 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20220202-creating-a-dnd-dms-brain-attic-with-obsidian/</guid>
      <description>&lt;p&gt;I started using &lt;a href=&#34;https://obsidian.md&#34;&gt;Obsidian&lt;/a&gt; for professional reasons. I use it daily as my main task management and personal knowledge management system for my main job as a software developer advocate at &lt;a href=&#34;https://k6.io&#34;&gt;k6.io&lt;/a&gt;. However, a surprising use case of mine for Obsidian is playing Dungeons &amp;amp; Dragons, the tabletop roleplaying game.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a video of me walking through my setup for how to use Obsidian to create my own &amp;ldquo;DM&amp;rsquo;s Brain Attic&amp;rdquo;.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/Fblwp-Uop_8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;other-resources&#34;&gt;Other Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nicolevanderhoeven.com/blog/20210930-non-lazy-dms-use-obsidian-for-dnd/&#34;&gt;Non-Lazy DMs use Obsidian for D&amp;amp;D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nicolevanderhoeven.com/blog/20211113-how-i-use-obsidian-to-run-and-play-dnd-online/&#34;&gt;How I use Obsidian to run and play D&amp;amp;D onliny&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nicolevanderhoeven.com/blog/20220109-5-ways-to-use-obsidian-as-a-software-engineer/&#34;&gt;5 ways to use Obsidian as a Software Engineer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nicolevanderhoeven.com/blog/20211117-how-i-use-obsidian-for-work-as-a-software-developer-advocate/&#34;&gt;How I use Obsidian for Work as a Software Developer Advocate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Señor Performo&#39;s Week of Load Testing (k6 Office Hours #39)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20220128-koh39-leandros-week-of-load-testing/</link>
      <pubDate>Fri, 28 Jan 2022 23:27:47 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20220128-koh39-leandros-week-of-load-testing/</guid>
      <description>&lt;p&gt;This week for k6 Office Hours, I talked to one of the newest members on our team, &lt;a href=&#34;https://srperf.com&#34;&gt;Leandro Melendez, aka Señor Performo&lt;/a&gt;, about his experience in joining k6/Grafana Labs. We ended up talking about performance &amp;ldquo;deadly sins&amp;rdquo; and how the practice of performance engineering has changed in the last decade.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/bi-RuT9eZdA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Old Town Walking Tour of Tallinn Estonia (Lucky Dippers)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20220127-old-town-walking-tour-of-tallinn-estonia/</link>
      <pubDate>Thu, 27 Jan 2022 23:25:13 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20220127-old-town-walking-tour-of-tallinn-estonia/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s a walking tour we went on in Tallinn, Estonia, in December 2018.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/hWjw1Y__p-o&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Why I&#39;m Leaving the Netherlands</title>
      <link>https://nicolevanderhoeven.github.io/blog/20220126-why-im-leaving-the-netherlands/</link>
      <pubDate>Wed, 26 Jan 2022 21:15:31 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20220126-why-im-leaving-the-netherlands/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been almost five years since I first moved to the Netherlands, and while I love the country and I&amp;rsquo;m grateful for all the experiences I had here, I&amp;rsquo;ve decided to move away. Here&amp;rsquo;s why.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/wfPLkNA2Ha8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Canonical Observability with Simon Aronsson and Michele Mancioppi (k6 Office Hours #38)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20220121-koh38-canonical-observability/</link>
      <pubDate>Fri, 21 Jan 2022 18:23:47 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20220121-koh38-canonical-observability/</guid>
      <description>&lt;p&gt;Today, my former colleague &lt;a href=&#34;https://simme.dev&#34;&gt;Simon Aronsson&lt;/a&gt; brought his &lt;em&gt;new&lt;/em&gt; colleague, &lt;a href=&#34;https://twitter.com/mmanciop&#34;&gt;Michele Mancioppi&lt;/a&gt;, to k6 Office Hours to talk about observability, and how they do it at &lt;a href=&#34;https://canonical.com&#34;&gt;Canonical&lt;/a&gt;. It turned into a great conversation about trends in observability from the last decade, and how it relates to performance and reliability testing.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/SD5Y4QejEu4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;transcript&#34;&gt;Transcript&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hello everyone, and welcome back to the first k6 Office Hours of the year. Happy 2022, I&amp;rsquo;m Nicole Vander Hoeven.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And I&amp;rsquo;m Simme, we&amp;rsquo;re back from the dead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And I&amp;rsquo;m Michele.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simme is back. Yes, so Simme unfortunately is only temporarily back, and he&amp;rsquo;s brought his new colleague. I mean, I&amp;rsquo;m kind of sad, but I&amp;rsquo;m happy to meet you Michele Manciopi.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hello everyone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Welcome. Simme why don&amp;rsquo;t you first tell everybody, how you betrayed us at k6.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sure, I&amp;rsquo;m so sorry for that, was a couple of months ago now. I think I quit at k6 in October, beginning of October something like that, to join Canonical and Michele, where we are trying to build a really awesome observability stack to know little part built on top of Grafana products.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yeah, it has been a very interesting three months. It&amp;rsquo;s actually a pretty refreshing to be able to use high quality software and compose it in ways that are, you know, they just work through, cool.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So we already have a few people in the peanut gallery, there&amp;rsquo;s Simme and Michele and our newest colleague, I think senior performer, all saying hi to you Simme. so you&amp;rsquo;re very much missed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Congratulations to k6 for bringing Leandra.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Definitely, and by the way, Leandra will be on k6 Office Hours next week, he just accepted the invite. So when I&amp;rsquo;m letting him like relax, and do his bootcamp onboarding things, and his week of load testing this week. . Ooh Danielle is here as well. Michele, why don&amp;rsquo;t you talk about yourself, and what you do at Canonical?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Well, I am a product manager at Canonical, for observer BD team. I was brought in with the goal of making the entirety of the product line of Canonical observable. Canonical is chiefly known for Ubuntu, but we have like a meter other products and they all need to be observable because they all sit at different levels of critical pieces of the infrastructure. Before Canonical, I was the technical product manager at Instana, which has been what baby ham it&amp;rsquo;s a product that does very automated observability. It&amp;rsquo;s mostly proprietary, but it was a lot of fun trying to make observability the way it&amp;rsquo;s supposed to be. That is seamless. Very easy to roll out. Before that I was at SAP where I was the technical lead of the performance team for SAP cloud platform, where my job was mostly to figure out where things were slow and fix it. And then I realized that rather than helping one single developer at the time, would they be more productive in actually providing pretty decent tools to do that at scale so people could do it themselves, which then brought me down the path of figuring out it&amp;rsquo;s actually fun here to make an observability product than it is to using one. And then the CircleCI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So Simme what was it about Canonical that won you over?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I actually think it was to no little part Michele won me over with his argumentation for&amp;ndash;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Okay. I&amp;rsquo;m taking him off the stream sorry. No, no, No.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lsquo;Cause I got you everyone, bye.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No. We&amp;rsquo;re still all friends.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I do really miss the k6 family for sure. But yeah, it was just such a cool and exciting opportunity to be able to make this huge leap in observability with Canonical, for such a vastly used project or suite of tools and products. So that&amp;rsquo;s mainly one of them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I&amp;rsquo;m sorry. Can we stop to remark? That was the coolest cup I&amp;rsquo;ve seen in a long.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is as if this is sponsored, this is a hydrate spark, it&amp;rsquo;s a smart water bottle. And it&amp;rsquo;s marketed like for people like me because it&amp;rsquo;s a water bottle, but it has Bluetooth and LED light. So, you know, obviously I had to buy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yeah, just out of curiosity, what are the key values of the Bluetooth support?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oh, it tells me when I need to drink water. It&amp;rsquo;s very important stuff.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How do you monitor that A, the Bluetooth is working and how do you receive those notifications?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Well, it&amp;rsquo;s funny that you ask, there is an app for it. This is totally not sponsored. Okay. But there is an app for it. I was gonna say Simme that it seems like there was a slight change in your focus as well, because at k6, we&amp;rsquo;re more focused on the performance and reliability testing part of it. But definitely we&amp;rsquo;ve also dabbled in the observability space, especially with the acquisition of Grafana. So it seems like your new role is also more focused towards observability. Was that one of the considerations?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sure it is. And then that was definitely one of the considerations during my, what is it now? 12 or something years in tech, I&amp;rsquo;ve been doing way more observability and monitoring work than I&amp;rsquo;ve been doing performance testing. And so that definitely felt like coming home in a sense to me.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And I wanna ask you both this because you&amp;rsquo;ve both been in observability for awhile. How do you think observability and performance testing go together? Do you see them as separate disciplines entirely, there&amp;rsquo;s clearly some sort of overlap, right? Should companies be doing both, one or the other?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I definitely think there is a lot of overlap. One thing that I know that you and I have been pushing forward when we&amp;rsquo;ve been discussing this previously on the stream is that performance testing is great, but it usually only allows you to do a black box perspective testing, right? You&amp;rsquo;re able to measure the performance of your system, given certain interfaces or end points that you are able to observe the performance off and pairing that with observability tools, like for instance, loci or tempo, or Prometheus&amp;rsquo;s allows you to really drill back into the stack and figure out what is causing those problems. So I definitely think that it makes sense to combine the both to be able to observe the whole system and not just the edges of it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do you agree with that Michele?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yeah, very much, over go and say that actually, it&amp;rsquo;s very hard to draw a demarkation between the performance and of observability, especially since in the last few decades and the increasingly disproportionately larger role that internet and internet systems taking our lives. We have come to see, you know, slow as the new down, which means that not only the software needs to work but it needs to be fast. And if you observability is fundamentally the art of understanding, are there problems? I mean, so how bad was impacted and how badly, and that is both in terms of software, it is broken as software is luck. Many of the techniques that you would use in, for example, a QA system to check the scalability of your software is something that you can use at scale in production to make sure that you&amp;rsquo;re at least carrying that much load, as well as techniques for example, for performance testing, you often do a lot of black box monitoring. The techniques that you use to check if today in SIL on a mobile connection, your web store is reachable is very similar in terms of technologies and capabilities and as technical requirements. So the technology is there to use, to throw a lot of requests security to your software. So it&amp;rsquo;s fundamentally the performance tools are versatile like that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yeah, I totally agree with that. I have always taken the stance that it&amp;rsquo;s definitely better when you have both of them because observability is great. But then in pre-production environments, it can be a little tricky &amp;lsquo;cause you don&amp;rsquo;t have real traffic and that&amp;rsquo;s where performance testing can come in handy and performance testing is great, but you don&amp;rsquo;t always want to run it in production. And also you, it&amp;rsquo;s not always a good idea to be reliant on the results of the performance testing tool. You know, sometimes it makes a lot more sense to be already using the same observability stack that you use in production. And I also want to call out that performance testing is often thought of as load testing, but that&amp;rsquo;s really just one kind of performance that is being measured there. And so what about a related topic to observability as monitoring? I know Michele, you have a lot to say on that topic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oh my, can I rant?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yes. Go ahead. I&amp;rsquo;m familiar with your blog posts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ooh influence. I have a &amp;ndash;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I do research, you know.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I thought you came across it because, you know, super rabid spike. No, the, so I have been around the observability industry for awhile and I have a certain annoyance towards what the industry has done by rebranding perfectly good monitoring and application performance tools in terms of the hot new term up observability that you need to sell to sort of the software. The way I see it&amp;rsquo;s a much more formal, shall we say way. Observability is a property that you want your systems to have, monitoring is the way that we have to make most systems observable. However, something that I hope we will see in our lifetime, our software systems and such a level of quality and standardization in our profession of creating software systems. So that monitoring and observability becomes build team in the softwares we create. If you think about it all the for example, automatic distributed tracing and all the amazing innovations that have occurred over the past 15 years are effectively reckoning the lack of observability as a functional requirement of a piece of software. Monitoring is the art to collecting data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yeah, and I think that there&amp;rsquo;s also a connotation of monitoring being a bit more passive. Would you agree with that?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Not necessarily, no. At the end of it so there is, I really take the view that monitoring is a means to the end of observability. It is true that in the past few years, with new generations of tools, we have made leaps and bounds in both the capability of collecting useful telemetry with very little work in terms of toil to roll it out, without the proper tools are there and I used to work for one where you deploy an agent and it automatically discovers all around it. There is a lot of dark magic going on, but it works. And then it becomes very cheap to actually get to the holy grail of monitoring that is to have as little silos as possible. Telemetry wants to have friends. You want to see end to end systems how they relate to one another. Now, the moment that something that has changed recently in the industry is we have gotten better, not only at collecting telemetry, but analyzing it. When you compare monitoring tools that we started with right there the Nagios of the world. You&amp;rsquo;ll need it to know in advance what you were looking for. Now with broader collection of telemetry, for example, distributed tracing, a very powerful type of telemetry, very little underutilized in terms of the insights can provide you, you end up having a lot of data that is likely going to be useful, and you have much more freedom in how you analyze it, both in terms of discovering issues as they occur, as well as afterwards in terms of post-mortem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I do have, however one, I agree with you completely Michele. I do however, think Nicole has a point in that if you look at the traditional monitoring tools that people used to use, like Nagios for instance, it was always this very weird situation where you put up SNMP traps or collected, you know, logs that were thrown at you in a very passive manner. But I would say that it turned monitoring itself has come to evolve into a state where it very much is an active practice in the same way as people would describe observability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oh. So you are making a very interesting distinction of rather than receiving as a data sync telemetry that was emitted, but something else that you go and get it through RTI, things like deploying an agent that does stuff. That&amp;rsquo;s pretty interesting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yeah. Or for instance, actually triggering a synthetic test that just prompts a common user flow and make sure that that still works. I mean, as compared to just admitting this passive telemetry data that just keeps rolling on, but maybe lacks the context as you put it on more advanced workflows where you&amp;rsquo;d correlate multiple sources of data or the multiple actions to derive your data that you want to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is true that in the past 15, 20 years, there has been an increase of active monitoring. I remember doing it back in the day with smoke tests that were of a crunch up every 15 minutes. I was so young. And now it&amp;rsquo;s that it&amp;rsquo;s kind of a baseline of observability. I mean, you need to want to catch everything, but if there is catastrophic failure, you will know hopefully before someone starts opening tickets or you&amp;rsquo;re upping your drops. Yeah.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yeah. I think Simme it was right when he was saying, what I was talking about was like the more traditional approach that it&amp;rsquo;s just something that&amp;rsquo;s there in the background whereas these days, the way that it should be done is a lot more proactive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And also they focus on actually gathering telemetry to be able to detect failure modes rather than probing for a certain thing. It used to be much more focused on a single point that you would probe for data. And&amp;ndash;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It used to have simpler software too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We sure did.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yeah, that&amp;rsquo;s for sure. But I also wanted to say that there&amp;rsquo;s also been, there&amp;rsquo;s still some push based monitoring, but we&amp;rsquo;re also now seeing more poll based monitoring systems, more event driven ones. And I think this is all the evolution of monitoring and observability, right? Because these things did not exist not too long ago.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To be fair, the one should, it is pretty true. We have much more pool and pool length. This is something that a permit use has pretty much popularized with the concept of scraping, but there are entire domains where we deploy a software that is still very much push based. For example, IOT, for very basic reasons of network visibility, it&amp;rsquo;s very hard to go and reach out into someone else&amp;rsquo;s rooftop and go get the data. So there is still the mechanics of push buffer and pulled it for example, gave us in the primitive ecosystem, push gateway mechanism.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grafana agent that actually sits in between you and a cloud service or something else, and allows you to not punch holes in your firewall, but rather reach out and deliver data to something.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yeah, it&amp;rsquo;s kind of like you mentioned that our applications in general are just getting more and more complex, it reminds me the push the trend from monolith to microservices and then now some people are also going back. It&amp;rsquo;s never really gone, right. And it&amp;rsquo;s really difficult to say, no, this is the new way, nobody else is doing or should do the other way. It&amp;rsquo;s not really like that. A lot of things in tech are cyclical.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When I actually spoke about our systems are getting more complex. I was thinking exactly of micro services because we made a trade as an industry for very, very simple, very small components. And then pushing all the complexity that you cannot make disappear under the carpet of service meshes, many containers, things that need to be versioned independently remain compatible, which is actually one of the main drivers why in the observability industry, we moved from the very traditional, I don&amp;rsquo;t like the word pillars, but the very traditional telemetry types of logs and metrics with the occasional sprinkling of profiling to rather extensive use of distributed tracing because all of a sudden the problem was less often in the single simpler components and much more often in between.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;But this is kind of a funny conversation to me &amp;lsquo;cause I don&amp;rsquo;t know if you remember, but 10 years ago we used to talk about microservices as well, but then we called it service-oriented architecture and it wasn&amp;rsquo;t the new cool thing. And then we decided that that was kind of cumbersome and powerful to work with. And we started to merge together our software, again, introduced monoliths.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;But in a service record architecture, we tended to have a very expensive, very large piece of machinery called the enterprise service bus that actually was providing to some extent that kind of visibility that today we need to have through tracing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And let&amp;rsquo;s also not discount the effect of the proliferation of cloud providers, because when you have your own data center and your audiences, maybe your internal company or something, maybe it is a good thing to go from one huge complex monolith to three simpler services. But when it&amp;rsquo;s not three, it&amp;rsquo;s like hundreds, maybe then you start needing like another layer to orchestrate and manage and all of the traffic between each of those components. It&amp;rsquo;s definitely not that clear cut to say which one is better.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I definitely think you&amp;rsquo;re bang on in that case, Nicole, &amp;lsquo;cause we&amp;rsquo;ve moved from maybe having a couple of software devs for a company that did some kind of HTML that website with some access database backend in the worst cases, right? We now have these huge teams of hundreds of developers that are all working on a compost system together. And having that as a monolith would in practice require us to either do these huge orchestrations of release trains that no one is able to do in a proficient fashion. Or we would have to have downtime all the time &amp;lsquo;cause we would need to redeploy everything every time we made a change. So in that sense, it really makes sense to split it up as we grow our teams and we grow our development efforts as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I have a rather, so coming from a very enterprise background I have a rather newest feel to be on the subject. And my take is that usually technological problems are not technological problems, there are people problems. One of the main motivators that was towards going to the extreme distribution of microservices. &amp;lsquo;Cause I tried to fight back against the Conway&amp;rsquo;s law. The fact that roughly the architecture of your system mirrored the architecture of your organization. So we said, look, we have all these teams, these pizza teams, it&amp;rsquo;s very hard to make them cooperate to create a well-behaved monolith. So let&amp;rsquo;s give each of them their independent infrastructure and talk over standardize protocols like most of the HTTP and some sort of RPC built on top of it. And that would provide for them a way to be productive independent of each other.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exactly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As an industry, we dramatically underestimated the cost and complexity that comes from the need of coordination and compatibility and understanding among these teams, because now you no longer have one code base that you can run tests against. You have to have multiple ones that may interact surprisingly at Atlanta. These for example, has led to introduction of contract based testing, where teams contribute to each other interface tests. And there&amp;rsquo;s also the saying, which is something that is a harsh reality that every observable behavior of an application with a large enough user base, will become a dependency for somebody somewhere.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I think this is the whole premise of Conway&amp;rsquo;s law, right? The idea that our architect, the software architecture or the infrastructure that we put into place in a lot of ways starts to evolve depending on how our team is structured. And I think it&amp;rsquo;s both a technological and a human problem as well. When you talk about coordination between teams or between services, it&amp;rsquo;s really the same thing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yeah. We have made actually strides in how easy it is to make software inter operate with each other. If you go back, we started, we were talking about SOA. SOA came with a curse called SOAP. It was incredibly complicated, mindbogglingly hard to make run at scale. Today, we have a bunch of, so we are using HTP for other things. Sometimes I would think too many, we have good stuff like GRPC, like arrow, a lot of different protocols that can be very efficiently used to either make a synchronous message passing happen or synchronous invocations. We have a lot of tools that in the past year and half, I think we&amp;rsquo;ve got the big two trigger happy in deploying a lot of new tools in production. And I&amp;rsquo;m saying this with a background of someone that fundamentally had to support every single piece of technology that made input or output, for example, on Java. It would surprise you how many different HTTP clients for Java are I think in production, I lost count. There were 50, it&amp;rsquo;s insane. And I&amp;rsquo;m, for example, you raised your mark right with a very, very beautiful LED and Bluetooth. And it&amp;rsquo;s super cool. I feel&amp;ndash;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I was trying to share something that Simme was sharing there, but I can&amp;rsquo;t actually see it for some reason. Oh, there it is.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;rsquo;s okay.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What&amp;rsquo;s this Simme?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I love to say, I like to bring out this picture whenever we talk about why observability is needed. &amp;lsquo;Cause while it&amp;rsquo;s a lot larger than most of us operate with, and it&amp;rsquo;s still very striking that they think this is supposed to be Netflix&amp;rsquo;s is a microservice architecture at some point, whether it is or not, I don&amp;rsquo;t really know, but it&amp;rsquo;s supposed to be and trying to&amp;ndash;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Can I be trashy? Can I be able to trashy?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thank you.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Architecture has an element of deliberation that they do not believe there&amp;rsquo;s an actual out of the system has, this is an emergent system is a lot of architectures that then meshed into something.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Definitely.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;rsquo;s remarkable that it works so well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yeah. And one of the cool things there, I think is the fact that without observability where this big ball of yarn, it would be completely unfeasible to reason about anything this system is doing at scale. You wouldn&amp;rsquo;t be able to reason about the particular part, maybe that you are working on one of these small dots that we can&amp;rsquo;t even see because of all the lines. But to reason about what it does is as a whole would be completely unreasonable. But with tools like, for instance, distributed tracing, we&amp;rsquo;re suddenly able to follow end to end an action of a user or an agent within this system. That was all I wanted to think of that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I love distributed systems, distributed tracing in distributed systems, because it actually gives you the means of answering the most important question or you&amp;rsquo;re faced with an issue, who is affected and how badly? When you go on an enterprise setting and our people are often databases service, your application completely blowing up, could be a drop in the bucket of their system. They will not probably have the central entry you have to have a very different take on priorities unless you have agreed upon a slice on the silos and the failure that you are fundamentally up streaming through your users may not be their concern, but the moment you have the shooting tracing, that goes from the deepest database to the device in the face of your user, yet you have a very clear perception of how bad is something that is the one most important piece of information that you need in front of your face when the pager goes off again at 3:00 AM, you need to decide whether it&amp;rsquo;s time to go on to Batman, or if it can wait until the third coffee tomorrow morning.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I think that&amp;rsquo;s the real success of the &amp;ldquo;Squid Game&amp;rdquo; right? Because that image that you had up Simme, and just imagine that times 114 million users that are potentially using many of those systems, it&amp;rsquo;s amazing that it works at all at that scale, especially.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Something that always gives me those thoughtful moments of, oh my God, what are we doing as an industry? Is that a potentially simple issues have disproportionate impact on popular services to the life of many, many people. It goes from lack of entertainment. You&amp;rsquo;re there you want to see the latest, &amp;ldquo;Witcher&amp;rdquo; episode, cool stuff. You&amp;rsquo;re disappointed if the thing is on top, multiply that by a medium people that cannot get there, there are fix, Hey, you have a significant amount of life around that has gotten worse, but it goes also to something that is maybe much more limited, but much more tragic. For example, when I was working at SAP, one of our customers was, I cannot say the country, but it was the first aid response service of one of the countries. We were scared plus that something so important that either the platform, because downtime would have consistent consequences to real people, something that we have seen recently with the move to the cloud and the disproportionate role that for example, U.S system one has on everybody&amp;rsquo;s life today. We have seen how the risk is getting more and more concentrated into fewer and fewer, very large, very complex, very reliable, but critical pieces of infrastructure, in ways that I do not believe as a society we have had yet. And that is where it really humbles me as an engineer to think, well, this has to work, right?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yeah. We went through that in, I think in the last k6 Office Hours, I had somebody from oil funk, who is an emergency services provider in Austria, and it was cool, but also a little scary to find out that they are using k6 for, in part to also handle the traffic from the 112 emergency hotline. So it&amp;rsquo;s cool to see something that you&amp;rsquo;re working on, be used in such a critical industry, right. But at the same time, it&amp;rsquo;s also a little scary because it could actually be lives that are lost if you know, we don&amp;rsquo;t do our jobs well enough, it&amp;rsquo;s a little humbling to think of that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I guess the closest resemblance we&amp;rsquo;ve had to these critical infrastructures that everyone relies on would it be like the transatlantic Telegraph cable? I mean, that has like in, I think it&amp;rsquo;s currently 19 cables or something like that, that make up the transatlantic telephone cable. But I really any catastrophic failure there would really isolate us in terms of cross continental communication.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;But that is less likely to result in loss of life. Then, for example, your neighbor want service, not being able to follow you.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For sure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I&amp;rsquo;m sorry for having completely spoiled the mood. I think that as an industry, we need to go in deserve the role of engineers. If we built bridges the way we push software to production, in some cases, I don&amp;rsquo;t think anybody would cross a river without crossing themselves first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What&amp;rsquo;s interesting is in that spaghetti soup of microservices that you showed Simme, now we&amp;rsquo;re seeing that our observability stack is part of those. They are also contributing back to the system that we have to monitor. I don&amp;rsquo;t know if either of you saw the post-mortem by roadblocks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It was classic. I had ops to them. It&amp;rsquo;s a, we have all been there.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yes yes. Do you have to talk about it Michele?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I do, but I don&amp;rsquo;t think I would be able to be nearly as good as a Simme for this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I just came to be honest. So I don&amp;rsquo;t have any detail commentary on that either.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It was the classic fallacy of oh jolly, oh golly. The same infrastructure that is powering my observability system was probably the system that went down.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All right. All right. Yeah, that really is something that you&amp;rsquo;ll see a lot. I mean, for instance, say that you have a deployment of the classic Grafana suite somewhere, and you have that running in the same data cluster maybe, or at least the same cloud provider as you have your critical workloads and to make it even worse, you could go down to having it in the same geographic region, or even on the same cluster nodes or the same hardware that you&amp;rsquo;re using for the rest of your critical infrastructure. When something goes south there, in terms of your critical infrastructure, it is likely that that was all will also, as I think, where to kick would roadblock, spill over to your monitoring system. And if that happens, how are you gonna be able to tell that you&amp;rsquo;ve been hit?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is the classic blast radius question. Everything has failure modes, actually, several of them, and the more abstractions we deploy, the more failure modes we introduce, for example, Simme and I are building an observability system based on Kubernetes natives. Our guidance is if you deployed, deployed to a different cluster on different hardware, because you should never put the monitoring system on the same infrastructure, close to the infrastructure stuff we monitor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;rsquo;s not only that. We also usually recommend that if you deploy our monitoring system, deploy another monitoring system that makes sure that your monitoring system is up and set them up in a, what did they call it? That dead mans trigger?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The dead man switch is the idea that, for example, do you know in the movies when the hero goes in front of him and says, if you kill me, you will be exposed in two days time. That&amp;rsquo;s the classic deadness which is something that happens unless someone periodically goes there and tells him not to. In this case, in the case of monitoring is unless your system, your monitoring system is telling you that it&amp;rsquo;s fine, assume tragedy. It never goes to the level of a specific use cases, but first of all, you need, let me take a step back. The best monitoring system is the one that tells you whether it&amp;rsquo;s something to look at, right? You actually do not want to have dashboards, however, colorful and beautiful in front of your face all the time, unless it is for Ferguson purposes, you actually want to be able to focus on something else and jump into the action when stuff is hitting the fan. In order to do that, you must have the guarantee that is the easy model of notification. You will receive it because silence, you want to know that it means that it&amp;rsquo;s good. You don&amp;rsquo;t want to have to doubt if there is something going on that my sister should tell me but doesn&amp;rsquo;t, which is why you set up fundamentally a health check thing that says I&amp;rsquo;m thinking here and all it&amp;rsquo;s fine. That is the diagnose switch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I found it so interesting to read through the post-mortem and props to them too, by the way, for releasing something so detailed, they were not afraid to, you know, say what they&amp;rsquo;d done wrong and what they were doing to address it. I thought it was really well-written, but I want to read one part of it, because I thought it was so good. They said, &amp;ldquo;There was a circular dependency between our telemetry systems and console, which meant that when console was unhealthy, we lacked the telemetry data that would have made it easier for us to figure out what was wrong. We&amp;rsquo;ve removed the circular independency, our telemetry systems no longer depend on the systems they&amp;rsquo;re configured to monitor.&amp;rdquo; I thought that was a great takeaway from that whole incident. And because they&amp;rsquo;ve shared it in the post-mortem, they&amp;rsquo;re not the only ones who can learn from it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Very generous of them to expose themselves that way and actually left the rest of the industry learn from their mistakes. And so hard work as you said, Michele, our love to the team at the roadblocks who probably need needed a bit of time out after that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;But there is also another component of a human component here. They did the right thing. They reestablished trust. They are telling us, we learned from our mistakes so that you can as well. In the scope of monitoring systems, trust is the ultimate currency because a monitoring system is literally a measurement system for the health of other systems. If you cannot trust your measurement system, what is the point of it?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And you usually only get one go with that as well. If you burn that trust, it&amp;rsquo;s gonna be very, very hard to build up again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So this is something that touches me very personal because I used to work on a solution that was exquisitely powerful, but therefore also very complicated and complex. And the moment you have automation, someone somewhere sometimes is going to be broken by it. And reestablishing that trust was never easy and sometimes impossible depending on the scale of failure that you&amp;rsquo;re well-intended means of automatically monitoring something I should have brought to the customer. Something that we seldom say as an industry, when we try to sell a product to somebody else, is that everything has a cost. If you want to take away complexity from you to roll out very simple systems and set up that thing, reports stuff over there, and you want it to automatically, there&amp;rsquo;s a higher risk that the automation will cause an issue. Of course, that in many cases is a justified risk. You can roll out the monitoring gradually and the easier it is to roll out a monitoring system at scale, the more you reach the holy grail of monitoring, that is the network effect. The moment that you can start observing how issues in systems propagate, correlate, or are not correlated there is something very important.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So let&amp;rsquo;s talk a bit more about the characteristics of a good observability stack. We&amp;rsquo;ve already mentioned a few we&amp;rsquo;ve mentioned that, it should be independent as much as possible from the systems that they&amp;rsquo;re trying to monitor. We&amp;rsquo;ve also said that maybe we should also take into account the human side of things rather than just the technological. Maybe you should tailor the complexity of your observability stack to the size and experience and structure of your teams. What are some other things that you both could name in your ideal observability stack?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One thing that I really like to highlight here is the ease of use or the economics of the system that you are using. I used to do a analogy to how EpiPens work for people with allergies. If you&amp;rsquo;re eating a peanut and you&amp;rsquo;re allergic to peanuts, you don&amp;rsquo;t want to have to assemble the cure for that, right. Or something that alleviates or takes you out of immediate danger. You need it to be simple, just as take it out, push it in your leg, and it&amp;rsquo;s done. You don&amp;rsquo;t have to think about it. The same goes for monitoring or observability systems as well I would say. If you have to, when you&amp;rsquo;re awakened by a notification in the middle of the night, and maybe you&amp;rsquo;re even hung over or worse, and you are supposed to fix something that is critical, and you have to start thinking about what to do, then your observability system has in my eyes, at least failed you, you need to be able to get a notification that says this is wrong, here&amp;rsquo;s the data that proves that, click here to get a closer look and just be presented with all the information you need to be able to make a decent decision on how to proceed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One thing recently on that note that I&amp;rsquo;ve come across is how potentially easy it is for a new Blake me to set up a whole observability stack or at least monitoring, but he could definitely expand upon it is EBPF, because we&amp;rsquo;ve been talking about distribution of systems and also of observability related services, but there&amp;rsquo;s also a trend of going lower and lower level, right? And EBPF monitoring is monitoring at the kernel level, recently with some people from the k6 team, Artem Charlie, Kevin, Danielle, Lopez, shout out to those guys. We did this hackathon project actually for EBPF monitoring. And the whole reason that I got into it was because the promise was you install this binary, you drop it into your cluster on your local machine. And then it just kind of exposes magically all of these things that I normally would have had to set up like node exporters for, you know, it was we&amp;rsquo;re living in a golden age of monitoring and observability I think. The things that are possible, like I can&amp;rsquo;t even keep up anymore, be talking about ergonomics. I mean, what is more ergonomic than not having to do much of anything.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You are talking about the day one, the fact that it is so easy to set up apart from monitoring system is exactly what you need to be able to monitor at scale. It removes the thought. EBPF is a fantastic technology. We are fundamentally given a virtual machine to run inside the kernel to execute logic, that allows us to do in a centralized place. Things that in the past were almost impossible. For example, the first thing I ever did with a team of vinyl in Stanhope with EBPF was actually to detect how a process that, that was impossible in user land. But with EBPF, it was actually pretty simple. We literally spent more time making sure that the techniques would work across all the operating systems that we need to support and to figure out how to find out that. EBPF the, I see two big potentials for that, for things that are not possible already today with sufficient tips. The first one is to give us a distributed tracing tool that largely independent from their own time. Now there are technology limitations there. It&amp;rsquo;s hard to find out how to trace context. I&amp;rsquo;m sure that someone somewhere out there is figuring it out as we speak, probably, that we reduce to some extent the toil that is necessary to support the federal fire hose of new technologies, libraries, and stuff like that is put in production every day. But the second one that excites me even more because the shoot the tracing is largely already possible is actually to have cheap enough in terms of overhead and consistent enough across run times production profiling. People look at distributed tracing as a way of figuring out what is slow. And it works remarkably well as long as the bottleneck is in between processes, the moment you want to drill down, why this requests into the insight, this process was taking too long. You see what you&amp;rsquo;re tracing is not so suited anymore. You end up looking at the leaf instead of the forest, because there is so many more requests going on through the system, that unless you have a lot of spans that are very, very detailed and fundamentally to trace threat level profiling, you are not going to which costs a huge amount of overhead. You are not going to have the information needed to find out, okay, good stock in the Dow library again. However, the moment that you have things, basically you have to find out where the CPU, memory or location, memory usage and wait time hotspots are in your application. You actually have the first places to work at to improve the overall system. It&amp;rsquo;s not gonna tell you why that request was going badly, but the moment you saw the hotspot, you are virtually guaranteed that many requests are going to get better. And then you can measure them again in terms of input output, observability tracing. Now people out there are going to say, Michele, what the hell are we talking about? Today we have a lot of amazing technologies to the production profile and they are true because for example, they are right because for example, if you look at the Java virtual machine with, for example, the Java flight recorder, you have excellent facilities with super low overhead to figure out what is your Java or cuddling or cradle program doing true. But they&amp;rsquo;re very specific to the particular run time and to a particular programming language. And when you start comparing what wait time, for example, looks like in Golang as respected over to machine with code routines, instead of, I dunno, loom threads, project loom, and all the rest of the stuff, you end up actually having telemetry that seems to say the same things, but in reality has a different semantic. And that is a challenge in our systems that have more and more grown polyglot. When we had the, our happy little monolith fault, it was one language. Now this year the systems are implementation of many different languages that behaves differently, and yet they are operated in some cases by roughly the same people, for example, necessarily teams, right? Having fluency in terms of performance across several languages is a significant challenge. Now, if we actually get through EBPF production profiling, for example, the folks behind parka and also the folks we have big pixie, there&amp;rsquo;s an amazing job there. If we manage to have something that will give us close enough, precise enough production, profiling information across whatever we may wanna throw into a container that is going to be a generational change in terms of making complex systems run better at scale.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;That&amp;rsquo;s something that we&amp;rsquo;re interested in at k6 as well. I mean, I&amp;rsquo;m a performance Sesser so the first thing I think of as the network side of it, there are a lot of network metrics that could be gathered at that level. And the reality now is that without EBPF, you&amp;rsquo;re in this position where each new service has needs some other exporter that you need to install. And like there&amp;rsquo;s so many plugins to plugins and many different combinations of things, when really they might all be using HTTP. Like, why don&amp;rsquo;t we have something that just detects, maybe not, it won&amp;rsquo;t be everything right. It&amp;rsquo;s never EBPF has never going to completely be able to, or, well, I shouldn&amp;rsquo;t say never because you know, that could change very quickly, but I don&amp;rsquo;t see it as being the end all be all solution. But if it can provide some of the more common metrics, that&amp;rsquo;s already a step in the right direction. Talk about usability and ergonomics right?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And also provide a safe assessable baseline across a lot of different technologies working together.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yeah. For sure. What other things do you think would you have in your ideal observability stack?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You asked me?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Either of you?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go ahead Michele, I don&amp;rsquo;t have a lot of ideas on that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Well, actually, if you go on the, okay, can I make us most shield for a link? If you go on google, WWW.ubuntu.com/whatisobservability/whatisobservability. There you see a kind of overview of the things that I find most meaningful, monitoring different types of systems. Second, I&amp;rsquo;m gonna give here that your own.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They can share my screen record.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I assume you want this one?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Awesome.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yes. So this page is fundamentally a work of love of Simme and I, about the way we see observe a PVT. And the diagram that you see on screen is a, of course, simplified and very generic can your manage me if I lie, but it is a thirst overview of the kind of telemetry that you use at different levels in your infrastructure in order to monitor things. This is important for filamentary two reasons. One, is to provide guidance for people that may be new to observability in terms of which things to focus first, when you look at the telemetry types that are used on the right hand side, you will see that metrics and logs are of course universal. That&amp;rsquo;s what we started with. They are very good. Every software that deserves to run somewhere is capable of emitting clogs. Most of them can emit metrics and more and more, thanks to primitives that is really proud. There are the metrics sometimes serious thing to the forefront of enterprise systems. It didn&amp;rsquo;t used to be that. Then you start seeing that profiling gets, for example, the moment you move above the virtualization hardware, and you start talking about processes and applications, profiling them makes perfect sense.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sorry Michele for cutting you off. But I think you might need to need to explain the icons.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;That is correct.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;That&amp;rsquo;s really. We don&amp;rsquo;t have that context.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ah, they don&amp;rsquo;t explain themselves. Maybe then you use amino the icons.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So the chart that you see on the left hand side is metrics, mentors, time series fundamental. That&amp;rsquo;s what we use to monitor things. There&amp;rsquo;s a lot. Then the table with the reds and greens and yellows followed by text that locks, the old, that bar chart is actually supposed to be flamed charts and that&amp;rsquo;s profiling showing hotspots. The strange thing with all those horizontal bars that is distributed tracing, that is the best way I can come up with to visualize spans. Spans is the basic data structure in distributed tracing. It describes an action taken by system to process a request. For example, you would have a span for the receiver of an HTTP request. The span is opened is created when your HTTP server is receiving the request, it&amp;rsquo;s going to be closed, but it simply is doing amazing things to get to the image in a screen&amp;ndash;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Most of this you&amp;rsquo;ve probably seen in your browser, was what I was about to say, like something similar when you browse on webpage, you&amp;rsquo;d get this span alike view of how the different correlate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;rsquo;s similar, but there is a key difference. One of the key concepts of distributed tracing as coming from dapper, which is fundamentally the progenitor of all modern distributed systems is the parent-child relation between spans, which is the closest you can get to cow&amp;rsquo;s reality. We are, for example, when your application is receiving an HTTP request and is issuing your query to Mongo to retrieve some data, you will have a parent&amp;rsquo;s span for the receiver of the HP request. And the child&amp;rsquo;s span that says, I spoke to Mongo, took me this longer. And this query, I got so many data back that is the parent-child relation. And it fundamentally, you would not have spoken to Mongo if not for the incoming request. Now things get Merck here when we talk about a synchronous messaging, because the beauty and simplicity of the trees of spans that you have in synchronous systems, kind of get lost with a messaging the moment that you have batch consumers. You&amp;rsquo;ll have many requests that result in a whole bunch of messaging being queued up in your messaging queue. And one application consuming messages originated in different traces all at once, fundamentally creating a merge, but I digress. I&amp;rsquo;m sorry. So we were talking about&amp;hellip; I just get so excited about this future tree.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No, it&amp;rsquo;s great. I know that you said that you have a hard stop and I&amp;rsquo;d like to get you off a little bit early for your meeting Michele, but why don&amp;rsquo;t you talk about what Canonical has to do with observability at all?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Well, can I call does a lot of things, including a very beloved operating system together with an amazing community of volunteers, Ubuntu, we are responsible for a huge amount of software. We have offerings for Kubernetes, for OpenStack, for SAF, for a lot of systems that people use to run their applications and data centers. And it is the mission of Simme and I to make sure that those systems come with excellent monitoring capabilities, that you can monitor them with open source software, whether or not you want to use the monitoring system that Canonical provides you. At the end of the day, what we&amp;rsquo;re doing is in variable source fashion. We want to make sure that all the appliances that you can get from Canonical, the SAF, the OpenStack, the Kubernetes is, there are the cube flows and all the machine learning. They are, you can monitor them with best-in-class open source monitoring tools like videos, like getting logs out of SIS log, the security traces with open telemetry, where it makes sense. And that is the part of the work of Simme and I, that is about stepping up the game in terms of making software provided by Canonical observable in a way that you can use, for example, with your existing monitoring system, we really believe every single word we say, when we say the metric, once France, it&amp;rsquo;s all about having radio systems be monitored together. Now, if you do not happen to have a radio monitoring system, wherever monitoring the rest, we can give you one, but if you have a monitoring system and you&amp;rsquo;re comfortable with it, you by all rights should be able to monitor whatever piece of software you get from Canonical with it. And this is what to do.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;That&amp;rsquo;s awesome. I wish we had more time to talk about this, but maybe we can have you both in some future episode, I feel like there&amp;rsquo;s so many things that I wanted to dig deeper into, but thank you both for coming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thank you so much.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I am so happy. Simme I&amp;rsquo;m so happy to have you back on again. I&amp;rsquo;ve always enjoyed doing these with you, so it&amp;rsquo;s a little bit weird that you&amp;rsquo;re now on as a guest, but I&amp;rsquo;m happy that you&amp;rsquo;re also bringing things that you&amp;rsquo;ve learned at Canonical back to us. And Michele welcome. I&amp;rsquo;d love to have you&amp;ndash;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thank you.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Back again for sure with or without Simme.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anytime. But Simme is finer yeah.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All right. Thank you.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sure. Sure. Thank you everybody for watching and I guess we&amp;rsquo;ll see you next week. Bye everyone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bye, have a wonderful day.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>First Look at Estonia | Getting to Tallinn (Lucky Dippers)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20220120-first-look-at-estonia/</link>
      <pubDate>Thu, 20 Jan 2022 20:36:59 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20220120-first-look-at-estonia/</guid>
      <description>&lt;p&gt;In December 2018, my husband and I met up with some friends and went from Valkenburg and Maastricht in the Netherlands to Riga, Latvia; and then to Tallinn, Estonia. Three countries in one day!&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/xMh_yLOAIKI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>An Overview of Software Testing</title>
      <link>https://nicolevanderhoeven.github.io/blog/20220119-an-overview-of-software-testing/</link>
      <pubDate>Wed, 19 Jan 2022 17:10:11 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20220119-an-overview-of-software-testing/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/huiptd8Y2I0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;transcript&#34;&gt;Transcript&lt;/h2&gt;
&lt;p&gt;NICOLE: What is the difference between good software and bad software? Is it features or user interface or marketing? In my totally biased opinion, what actually makes a difference is how well the software was tested. But software testing encompasses a lot of different areas and it doesn&amp;rsquo;t even always have to be someone with a word tester in their job title that does the testing. So whether you&amp;rsquo;re looking to get started in the industry, or just trying to cross skill, here&amp;rsquo;s an overview of the main types of software testing.&lt;/p&gt;
&lt;p&gt;Is it just me, or does your desk get that clutter too after a week of work?&lt;/p&gt;
&lt;p&gt;Anyway, software testing is the process of validating whether an application works as intended, but there&amp;rsquo;s a lot of vagueness in that statement. One of the broadest ways to categorize testing types though, is whether it&amp;rsquo;s functional or operational.&lt;/p&gt;
&lt;p&gt;Functional testing is more about application features. Is there a form to capture user email addresses? Is there a button next to it that submits those addresses? Once the button is clicked, where do the user details go? Do they go to the database? Are they stored correctly? Those are the sort of ways in which functional testers think. Operational testing traditionally called non-functional testing, is a way of verifying software quality and aspects that extend beyond the features of the application.&lt;/p&gt;
&lt;p&gt;Operational testing sometimes involves concerns that are more subjective or qualitative. So it can be a little bit more difficult to test, because those things only arise in certain conditions. I&amp;rsquo;m saying operational testing here, instead of non-functional testing, because I was talking to Paul Bruce who made an excellent video just on this topic. He talks about why the term nonfunctional requirement is really a bit of a misnomer.&lt;/p&gt;
&lt;p&gt;PAUL: It relegates all these other things, security, performance, installation, deployment, accessibility. It relegates them to a nice to have, so it should be functional versus operational.&lt;/p&gt;
&lt;p&gt;NICOLE: So I&amp;rsquo;m using his term operational testing instead.&lt;/p&gt;
&lt;p&gt;Here are the different forms of operational or non-functional testing.&lt;/p&gt;
&lt;p&gt;First there&amp;rsquo;s accessibility testing. It is involved with verifying that end users can consume or navigate content. Usually through assistive devices like screen readers. While most forms of testing begin with a statistically normal user in mind, accessibility testing seeks out outliers in terms of location, linguistic background and disability.&lt;/p&gt;
&lt;p&gt;Usability testing is designing with user experience in mind, specifically concerning the placement of on-screen elements and the intuitiveness of the process flow of an application.&lt;/p&gt;
&lt;p&gt;Localization testing is a way of making sure that applications are usable in the local context, in the sense of being colloquially appropriate for users in different countries and from different cultures.&lt;/p&gt;
&lt;p&gt;Security testing verifies that a system has no flaws that could be exploited, to gain access to confidential information or features that would not otherwise be accessed by expected means.&lt;/p&gt;
&lt;p&gt;So that was me talking from my home in the Netherlands, but this week I am in Portugal. The remote working life, am I right?&lt;/p&gt;
&lt;p&gt;But anyway, performance testing is my favorite topic and my favorite type of testing because that&amp;rsquo;s the one that I&amp;rsquo;ve had the most experience with. Performance testing is more qualitative. So it&amp;rsquo;s more about how well the application works. And there are two main types of performance testing and that&amp;rsquo;s front-end performance, and back-end performance testing.&lt;/p&gt;
&lt;p&gt;Front-end performance testing seeks to verify the user experience at the interface level. So that&amp;rsquo;s everything that the end user sees on their local machine.&lt;/p&gt;
&lt;p&gt;There are different approaches to front-end performance testing, and the first of them is performance profiling. Performance profiling involves running your application through a series of automated checks. And there are a lot of sites for this, where you just put in your URL, if it&amp;rsquo;s a web app, and you get a score in the end. That tells you how performance your application is, the most popular example for this and also the easiest to get started with, is DevTools because that&amp;rsquo;s already in Chrome and Firefox based browsers. But you can also go to sites like Webpagetest, or GTMetrix, YSlow, which is a plugin, or you can use Google Lighthouse, which is now included with Chrome Dev Tools.&lt;/p&gt;
&lt;p&gt;The next approach to front-end performance testing is called RUM or Real User Monitoring. So the difference is that with performance profiling, that&amp;rsquo;s often done manually, and as a one-off thing, like maybe at the beginning of a test or during, but Real User Monitoring is not usually done within testing environments. As the name suggests, these tools measure the experience of real users. So they have to be run in production. Examples of tools in this space are; New Relic&amp;rsquo;s RUM, Elastic has a RUM as well, there&amp;rsquo;s Catchpoint, SpeedCurve Uptrends and many more.&lt;/p&gt;
&lt;p&gt;And the third approach to measuring front-end performance is by using some sort of browser-based automation tool. So typically this has been something like Selenium, but that&amp;rsquo;s falling out of favor in terms of more modern solutions like Playwright, Puppeteer, Cypress and so on.&lt;/p&gt;
&lt;p&gt;So front-end performance is about everything that the user sees on their end, but back-end performance testing is about everything that they don&amp;rsquo;t see. It&amp;rsquo;s about the network. It&amp;rsquo;s about latency, the application servers, the way the infrastructure is set up and all of those things that are a little bit more difficult to look into, but can also have severe bottlenecks. Back-end performance testing seeks to verify aspects of an application such as scalability, elasticity, availability, reliability and responsiveness.&lt;/p&gt;
&lt;p&gt;Scalability is the application&amp;rsquo;s ability to respond to changes in demand. This could mean scaling up, which means increasing the resources available to a server, but it could also mean scaling out, meaning increasing the number of servers that are available to handle the application load.&lt;/p&gt;
&lt;p&gt;Elasticity is a related topic to scalability, except where scalability is all about scaling up or out. Elasticity also emphasize a scaling down or in, and that&amp;rsquo;s because having these services or servers available on the Cloud that are dynamically adjusting can also be quite expensive. So elasticity makes sure that the infrastructure that&amp;rsquo;s available or the resources available are always appropriate for the size of the demand. So when demand increases, elasticity also checks whether the application decreases it servers or resources in response to that.&lt;/p&gt;
&lt;p&gt;Availability is how long the application stays up, despite changing circumstances in production. So this is typically measured by uptime. Availability can also be tested using disaster recovery procedures, and you&amp;rsquo;re not just testing the application itself, but also the processes around it. So are there enough people that are on call so that they would be able to come in and troubleshoot when there&amp;rsquo;s a production incident? All of those things are included in application availability.&lt;/p&gt;
&lt;p&gt;Reliability checks to see how your application behaves in response to unexpected errors. Reliability basically takes it as a given that your application is going to fail somehow, sometime, maybe you don&amp;rsquo;t know exactly when that will be or how it will fail, but it&amp;rsquo;s going to happen. So a big part of reliability and site reliability engineering is trying to expose your application to those failures beforehand so that you can build confidence about how it will behave when those things actually happen in production.&lt;/p&gt;
&lt;p&gt;And the last aspect to back-end performance testing is responsiveness. And this is usually equated with load testing. Load testing is more of a technique for testing though. And really load tests can be used to test not just responsiveness, but also reliability or availability or scalability, basically any of the &amp;ldquo;ilities&amp;rdquo; in this part of back-end performance testing.&lt;/p&gt;
&lt;p&gt;Protocol-based load testing verifies the backend performance of an application, not by simulating real users accessing the application, but by simulating the underlying requests that go back and forth between the client or the user and the application servers. One of the benefits of protocol-based load testing is that it takes up fewer resources on the side of the load generator, and therefore is less expensive to run. Some popular protocol-based load testing tools are k6, JMeter, Gatling LoadRunner, NeoLoad, and Silk Performer.&lt;/p&gt;
&lt;p&gt;Browser-based load testing verifies the application by simulating real users accessing it. So it also has the benefit of including these front-end performance metrics. Browser-based testing can also be called browser-driven or UI-based testing. Some popular tools for browser-based load testing are Playwright, Puppeteer, Flood Element and as of a few weeks ago, k6.&lt;/p&gt;
&lt;p&gt;Then there&amp;rsquo;s hybrid load testing, which takes the best of protocol and browser-based load testing tools by combining them in one test. Now this can present some challenges, especially if you&amp;rsquo;re using different tools for the browser-based script, than you&amp;rsquo;re using for the protocol-based script. The ideal is to use your protocol based load testing tool, to simulate majority of the load to cut down on costs for the execution and scaling out of your load test. And then you run a handful of users using your browser based load testing tool. So you still get some metrics for front-end performance while that load is being applied by the protocol based tool.&lt;/p&gt;
&lt;p&gt;Testing software can be really daunting because there are many aspects of an application that you can test. But that&amp;rsquo;s because there&amp;rsquo;s also many aspects of an application that can fail. And that&amp;rsquo;s why all roads lead to testing and why the success of an app hinges on how well it&amp;rsquo;s been tested.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to zero in, on load testing in particular, check out this video that I made on what load testing is. Thanks for watching. And like they say, here in Portugal, Obrigada!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Set Goals in Obsidian for 2022</title>
      <link>https://nicolevanderhoeven.github.io/blog/20220112-how-to-set-goals-in-obsidian-for-2022/</link>
      <pubDate>Wed, 12 Jan 2022 16:58:39 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20220112-how-to-set-goals-in-obsidian-for-2022/</guid>
      <description>&lt;p&gt;How do you set goals in Obsidian?&lt;/p&gt;
&lt;p&gt;New Year&amp;rsquo;s Resolutions are infamously left undone. So what should you do instead? OKRs.&lt;/p&gt;
&lt;p&gt;Setting OKRs (Objective Key Results) instead of resolutions increases your chances of succeeding. Tracking your progress throughout the year also make sure you&amp;rsquo;re getting things done. In this video, I talk about what OKRs are and how I&amp;rsquo;ve set them up in Obsidian for the year ahead.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/T2Aeaq4sk7M&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Top 10 Last Minute Tech Gifts (2021)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211220-top-10-last-minute-tech-gifts/</link>
      <pubDate>Mon, 20 Dec 2021 17:20:19 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211220-top-10-last-minute-tech-gifts/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/nkj3qYvb--Q&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;In this super last-minute video, I talked about 10 awesome bits of tech I&amp;rsquo;ve loved throughout this year, and why I think each of them would make great gifts for the techie in your life (or maybe even yourself).&lt;/p&gt;
&lt;p&gt;Below are all the items I mentioned. I include affiliate links where possible, so I will get a miniscule commission if you buy something through my link. However, I wouldn&amp;rsquo;t be recommending these if I didn&amp;rsquo;t genuinely use and love them all!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Røde PodMic: &lt;a href=&#34;https://amzn.to/3dKhflp&#34;&gt;https://amzn.to/3dKhflp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Røde PSA1 boom arm: &lt;a href=&#34;https://amzn.to/3sdVSkK&#34;&gt;https://amzn.to/3sdVSkK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rødecaster Pro: &lt;a href=&#34;https://amzn.to/3rYZnv9&#34;&gt;https://amzn.to/3rYZnv9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elgato Wave 3 USB condenser microphone and digital mixer: &lt;a href=&#34;https://amzn.to/3GDo5oV&#34;&gt;https://amzn.to/3GDo5oV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Keychron K6 mechanical keyboard: &lt;a href=&#34;https://amzn.to/3s6cScz&#34;&gt;https://amzn.to/3s6cScz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Keychron K3 mechanical keyboard: &lt;a href=&#34;https://amzn.to/3DL35Ln&#34;&gt;https://amzn.to/3DL35Ln&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Omnicharge 20c: &lt;a href=&#34;https://amzn.to/31RP3KU&#34;&gt;https://amzn.to/31RP3KU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elgato Keylight Air: &lt;a href=&#34;https://amzn.to/3ynpjSp&#34;&gt;https://amzn.to/3ynpjSp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Aputure Amaran MC bundle: &lt;a href=&#34;https://amzn.to/3oOf2vh&#34;&gt;https://amzn.to/3oOf2vh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You Need a Budget app (YNAB): &lt;a href=&#34;https://app.youneedabudget.com/gifts&#34;&gt;https://app.youneedabudget.com/gifts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;0Kindle Oasis: &lt;a href=&#34;https://amzn.to/3IODEMr&#34;&gt;https://amzn.to/3IODEMr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Yubikey: &lt;a href=&#34;https://amzn.to/3ETRvyH&#34;&gt;https://amzn.to/3ETRvyH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Trezor Model T: &lt;a href=&#34;https://shop.trezor.io/product/trezor-model-t&#34;&gt;https://shop.trezor.io/product/trezor-model-t&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kindle Oasis: &lt;a href=&#34;https://amzn.to/3GIXas7&#34;&gt;https://amzn.to/3GIXas7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Leatherman Skeletool RX: &lt;a href=&#34;https://amzn.to/3m0drks&#34;&gt;https://amzn.to/3m0drks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bose NC 700 headphones: &lt;a href=&#34;https://amzn.to/3q3xD5W&#34;&gt;https://amzn.to/3q3xD5W&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How Eurofunk uses k6 for load testing emergency services (k6 Office Hours #37)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211217-koh37-daniel-knittl-frank/</link>
      <pubDate>Fri, 17 Dec 2021 17:17:07 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211217-koh37-daniel-knittl-frank/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/PHJQuYDdNps&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;In this k6 Office Hours, k6 CEO Robin Gustafsson joined me to talk to Daniel Knittl-Frank, a software engineer at Eurofunk, about how k6 is used in the emergency services industry. Daniel has an interesting use case for k6: he uses it to load test calls in Austria received from the 112 emergency services hotline!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Load Tester Reacts to Pokemon Go Scales for 166m Users</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211209-load-tester-reacts-to-pokemon-go-scales-for-166m-users/</link>
      <pubDate>Thu, 09 Dec 2021 16:13:59 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211209-load-tester-reacts-to-pokemon-go-scales-for-166m-users/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/MtsEFebioWI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;transcript&#34;&gt;Transcript&lt;/h2&gt;
&lt;p&gt;NICOLE: Last year, Pokemon GO, a mobile app developed by Niantic Labs, made $1.23 billion in revenue with 166 million players from all over the world. This level of success is unprecedented, especially for an app that was encouraging people to go outside at a time when many governments were encouraging them to stay inside. In tech, though, success comes at a cost. Here&amp;rsquo;s what Niantic has to do under the hood to keep this massively popular game running.&lt;/p&gt;
&lt;p&gt;Hey everyone, I&amp;rsquo;m Nicole van der Hoeven. I&amp;rsquo;ve been helping companies
through their load testing for over 10 years, and I like to talk about tech travel and taking notes. I&amp;rsquo;m also a Pokemon GO player. I&amp;rsquo;ve been playing it since
the day it was released in July 2016.&lt;/p&gt;
&lt;p&gt;In this video, I&amp;rsquo;m going to be reacting to a conversation between Priyanka Vergadia from Google and James Prompanya from Niantic Labs. Thank you to Joe Colantonio&amp;rsquo;s TestGuild News Show last month, for bringing it to my attention.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get started.&lt;/p&gt;
&lt;p&gt;PRIYANKA: Yep.
NICOLE: Okay. Everybody knows that you should be doing a curve ball to catch Pokemon the fastest way.&lt;/p&gt;
&lt;p&gt;PRIYANKA: I am catching some Pokemons. Did you know that it was
built on Google Cloud? Well, let&amp;rsquo;s talk&amp;ndash;&lt;/p&gt;
&lt;p&gt;NICOLE: GCP, okay.&lt;/p&gt;
&lt;p&gt;PRIYANKA: At Niantic Labs to take a behind the scenes look at Pokemon Go&amp;rsquo;s architecture, and how it scales for large number of players. Hi James, welcome to the show.&lt;/p&gt;
&lt;p&gt;JAMES: Pokemon Go is not your typical mobile game.&lt;/p&gt;
&lt;p&gt;NICOLE: I love that he&amp;rsquo;s got Pokemon paraphernalia everywhere.&lt;/p&gt;
&lt;p&gt;JAMES: Catching these little creatures around you called Pokemon that are
appearing in a real world. Encourage you to go outside, explore and discover things using augmented reality. A big part of that, which wasn&amp;rsquo;t in&amp;ndash;&lt;/p&gt;
&lt;p&gt;NICOLE: See this is one of the things that make me really impressed with their implementation. They have majority of their users using mobile networks. That&amp;rsquo;s a really hard thing to account for, especially when you&amp;rsquo;re talking about a global audience that is playing in different parts of the world. So it&amp;rsquo;s really important that everything is front-loaded, and that they&amp;rsquo;re minimizing the amount of traffic, the amount of resources that each player has to download on their mobile network.&lt;/p&gt;
&lt;p&gt;JAMES: Wasn&amp;rsquo;t included in the game when it first came out, was this big community aspect of it. We really liked this part of the game. So we made it a major part by hosting regular live events, such as Community Days, Raid Hours,Team GO Rocket Takeovers, all culminates in this big summer event that we call GO Fest.&lt;/p&gt;
&lt;p&gt;PRIYANKA: So it&amp;rsquo;s&amp;ndash;&lt;/p&gt;
&lt;p&gt;NICOLE: So this is a really brave move as well because they have events that are timed. So they happen at the same time for people in that time zone. And earlier on in Pokemon Go&amp;rsquo;s history, I did experience some slowness and some congestion in the mobile networks. But I mean, that&amp;rsquo;s a really difficult thing for them to plan for. I&amp;rsquo;m interested to see how they solve that.&lt;/p&gt;
&lt;p&gt;PRIYANKA: How does Pokemon Go back and actually scale to handle these peaks in traffic?&lt;/p&gt;
&lt;p&gt;JAMES: So we use Google Cloud. (chuckles) We have lots of services that need scaling such as the Google Kubernetes Engine and Spanner. Our front-end service is hosted on GKE, and it&amp;rsquo;s pretty easy to scale the nodes there. Google Cloud provides us with all the tools we need to manage the Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;NICOLE: So it&amp;rsquo;s really cool to hear him talking about their stacks. So they&amp;rsquo;re using GCP, Google Cloud Platform. They&amp;rsquo;re on Kubernetes, so they&amp;rsquo;re using GKE, the Google Kubernetes Engine. And they use Google Cloud Spanner, which is a very highly available relational database.&lt;/p&gt;
&lt;p&gt;JAMES: To give an idea of scale, we have about 5,000 spanner nodes handling the traffic and thousands of Kubernetes nodes running just for the Pokemon&amp;ndash;&lt;/p&gt;
&lt;p&gt;NICOLE: That is so interesting. 5,000 Spanner nodes. That&amp;rsquo;s just for the data. That makes sense because Niantic&amp;rsquo;s main reason for creating this game, or the way that they&amp;rsquo;re making money, I guess, is by getting the data from users about walking paths and &amp;hellip;Basically, geo location or spatial data. So it&amp;rsquo;s super important for them to be able to store the data that they&amp;rsquo;re getting from their application usage.&lt;/p&gt;
&lt;p&gt;JAMES: We also have the various microservices that host other parts of the&amp;ndash;&lt;/p&gt;
&lt;p&gt;NICOLE: So another thing that they&amp;rsquo;re doing to keep it scalable is
by using microservices. See the traditional way is to use a monolith, so one large application with many sub-components. The problem with that though, is you can&amp;rsquo;t independently scale those components, you&amp;rsquo;d have to scale the entire application. And when that application is already really big and complex, that&amp;rsquo;s really inefficient because you&amp;rsquo;re scaling everything, even services that you
may not need to scale. So it&amp;rsquo;s really smart that they&amp;rsquo;ve chosen for a microservices based architecture, so that each of those components can be scaled separately of each other.&lt;/p&gt;
&lt;p&gt;JAMES: And if you compare ourselves to maybe World of Warcraft, you&amp;rsquo;ll see that other massively multiplayer online games, they split players into multiple realms, but for us, all of our players, they reside on a single realm. It was important for us that players can always interact with each other and share the same game, the experience, no matter where or when they&amp;rsquo;re playing.&lt;/p&gt;
&lt;p&gt;PRIYANKA: Yeah&amp;ndash;&lt;/p&gt;
&lt;p&gt;NICOLE: Okay. So I happen to have also played WoW, World of Warcraft. My main &amp;lsquo;toon was a disciplined priest. So when you sign up to WoW, you have to choose a realm, that&amp;rsquo;s basically a server or group of servers so that they don&amp;rsquo;t have to shoulder the entire load from all users. So that was WoW&amp;rsquo;s way to reduce the load. And he&amp;rsquo;s making the point that Pokemon Go can&amp;rsquo;t really do that to a certain extent. It&amp;rsquo;s not entirely correct to say that they don&amp;rsquo;t have
that sort of splintering, because they do still splinter based on the time zone. You&amp;rsquo;re only seeing people in that location in your time zone.&lt;/p&gt;
&lt;p&gt;Even events, they sometimes say 10:00 AM in your local time. So you&amp;rsquo;re not necessarily playing at the same time that people in Australia are playing. So there is some splintering, but it is less than what there would be for a game like WoW.&lt;/p&gt;
&lt;p&gt;JAMES: When we&amp;rsquo;re looking at different providers, we saw that Spanner
has consistent indexing that allows us to do more complex database schemas with these primary and secondary keys. Data Store was also non-relational with atomic and durable transactions. So we needed a relational database with full consistency, and made the choice to go to Spanner, which gave us these global ACID transactions.&lt;/p&gt;
&lt;p&gt;NICOLE: So he&amp;rsquo;s talking about consistency, global consistency, being a big deal and a big factor for why they chose to go and use Google Cloud Spanner instead of Google Data Store. And the reason is that normally, when you have a bunch of different instances of database, it doesn&amp;rsquo;t matter so much that those requests are processed in exactly the order that they came in. Because usually those
requests are being made by different people, and they&amp;rsquo;re trying to change different accounts. But with Pokemon Go, there&amp;rsquo;s the added complexity of wanting to keep the integrity of the chronological order. So if I go and attack a gym before you do, my, the process, the request that I created by attacking the gym, should be processed before yours is because it matters who gets to the gym first. So that&amp;rsquo;s an interesting twist.&lt;/p&gt;
&lt;p&gt;PRIYANKA: Now let&amp;rsquo;s say I&amp;rsquo;m a player and I&amp;rsquo;m playing the game right now. I open my app to catch a Pokemon. What is happening behind the scenes? How does the request flow work?&lt;/p&gt;
&lt;p&gt;JAMES: When the user catches a Pokemon, we receive that request through the Google Cloud Load Balancer. All of the static media is also stored on Google Cloud storage buckets. And it&amp;rsquo;s downloaded to the phone when you first start the app. We also have caching enabled at the load balancers. So it&amp;rsquo;s&amp;ndash;&lt;/p&gt;
&lt;p&gt;NICOLE: Already, they&amp;rsquo;ve mentioned they have a load balancer, so that that&amp;rsquo;s like a traffic controller that&amp;rsquo;s sitting above the servers and saying, &amp;ldquo;Okay, this request goes to this server.&amp;rdquo; And then maybe when that server is processing too many requests, that load balancer should be able to say, &amp;ldquo;All right, now let&amp;rsquo;s
divert some of the traffic to another server that maybe isn&amp;rsquo;t as heavily utilized.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;He also mentioned that they employ caching. This is what I was saying earlier that because you want to minimize the amount of traffic and the bytes that are flowing on the network, you want to employ caching for maybe things that
aren&amp;rsquo;t going to change so more static assets. Maybe you might want to change the Pokemon that&amp;rsquo;s in a gym, but the location of that gym is something that should and can be cached. He&amp;rsquo;s right now talking about caching on the server side, on
the application side, and not on the mobile phone. But I wonder if they&amp;rsquo;re going to talk about that later as well.&lt;/p&gt;
&lt;p&gt;JAMES: It&amp;rsquo;s all cached and served through Google Cloud CDN. So when the Poke&amp;ndash;&lt;/p&gt;
&lt;p&gt;NICOLE: So he also mentions using a CDN, so a Content Delivery Network, which is really good because that means that if I&amp;rsquo;m in the Netherlands and I make a request to their servers, my request isn&amp;rsquo;t then going to be sent to a server in the US, because it&amp;rsquo;s going to be sent to one of the servers in my country or nearby. That means that the latency between my request being sent, and that request getting to the server, and retrieving that resource and back, is going to be a lot lower. So it&amp;rsquo;s &amp;hellip; This is a way to improve performance.&lt;/p&gt;
&lt;p&gt;JAMES: The player catches the Pokemon, the GCLB sends the request to our GKE cluster. And we have a front-end service that sits behind Nginx reverse proxy. The request goes from the user&amp;rsquo;s phone through the reverse proxy, to one of these player, front-end services. We also have this thing called a Spatial Query Backend. It&amp;rsquo;s a cache by location.&lt;/p&gt;
&lt;p&gt;So that is where we store the information that determines where a Pokemon is shown on the map, what gyms and Poke stops are around you, what time zone you&amp;rsquo;re in, or any other feature that is location-based.&lt;/p&gt;
&lt;p&gt;PRIYANKA: Now, what happens when I hunt a Pokemon down and catch it?&lt;/p&gt;
&lt;p&gt;JAMES: When you catch a Pokemon, it sends the request to the front end, to the Spanner database, where your player entity is stored and it store it there. For catching Pokemon, that actually doesn&amp;rsquo;t go to the Spatial Query Backend. If you were, instead, if you were battling in a gym or adding lures to the Poke stop, that information is stored on the Spatial Query Backend, and&amp;ndash;&lt;/p&gt;
&lt;p&gt;NICOLE: Okay. So it sounds like the Spatial Query Backend is only storing data about the world, the Pokemon Go world that everybody can see. So people don&amp;rsquo;t need to know whether another person has caught a particular Pokemon. They just need to know whether there&amp;rsquo;s a lure on a Poke stop, or whether the gym is Team Mystic and things like that that everybody else can see. So there&amp;rsquo;s this segmentation of some data that is specific to the user, and other data that all users need to see.&lt;/p&gt;
&lt;p&gt;JAMES: We also use Pub/Sub to send the message to a Pub/Sub topic, which is then used for analytics pipeline.&lt;/p&gt;
&lt;p&gt;NICOLE: He talks about a Pub/Sub model, which means that their architecture is event driven. So the traditional way that this is handled is by polling. So normally when an service is waiting for something to happen, it goes, and it sends a message and it checks. Basically like, &amp;ldquo;Hey, are we there yet? Are we there yet? Are we there yet?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;And then when it finally gets a response that &amp;ldquo;Yes, we are,&amp;rdquo; then it can do something with that data. Instead what they&amp;rsquo;re doing as a Pub/Sub. So instead it waits for events. There is no constant polling, again, reducing the amount of traffic that&amp;rsquo;s going back and forth. And it just specifies criteria for what it is actually waiting for. And when that happens, after the services that require that event are subscribed, then that event is published to all of them. And then they can then do whatever they want with that event.&lt;/p&gt;
&lt;p&gt;PRIYANKA: So, how do you ensure that when two people who are in the same geographic regions, see the same Pokemon data, and keep that relatively in sync, especially during the events?&lt;/p&gt;
&lt;p&gt;JAMES: So it&amp;rsquo;s actually pretty interesting. Everything in our servers are deterministic. So even if players are on different machines, they&amp;rsquo;re sensitive to
different front-end services, if they&amp;rsquo;re in the same physical location, all the inputs would be the same and the same Pokemon would get returned to both users. There&amp;rsquo;s a lot of caching involved and as well as precise timing, especially when the settings are changed and they need to be in sync across all the servers.&lt;/p&gt;
&lt;p&gt;So it&amp;rsquo;s very tricky, but it was very important for us that all the players feel like they&amp;rsquo;re part of this one shared world.&lt;/p&gt;
&lt;p&gt;NICOLE: I&amp;rsquo;m not entirely sure what he means when he says that it&amp;rsquo;s deterministic.I&amp;rsquo;m going to guess, and I have no relationship with Google or with Niantic, but I&amp;rsquo;m thinking that what he means is that when you&amp;rsquo;re catching a Pokemon, there is no request that&amp;rsquo;s being sent to the servers to say, &amp;ldquo;Hey, did I catch this?&amp;rdquo; Instead, there&amp;rsquo;s probably some sort of algorithm. This Psyduck is caught 80% of the time and appears 2% of the time. So 2% of the Pokemons that you&amp;rsquo;re gonna see appear in this area, are going to be Psyducks. And that&amp;rsquo;s also reducing the load going back and forth, right? Because it&amp;rsquo;s just the equation or the algorithm that determines whether you catch a Pokemon or not.&lt;/p&gt;
&lt;p&gt;JAMES: This game data is of interest to our data science team. They use this for marketing purposes, for verifications. For example, we might want to say that this player, or players caught x millions amount of Pokemon during our Saturday Community Day events. So, it&amp;rsquo;s important that we have that information in an easily accessible manner.&lt;/p&gt;
&lt;p&gt;NICOLE: So there&amp;rsquo;s a lot of data here that they track. So I&amp;rsquo;ve got my distance walked, Pokemon caught, I&amp;rsquo;m at 18,878. Poke stops visited, total XP, start date. And then there are these medals as well. So, they look at things like, how far have you walked in total? So all of these things are data points that they store for every single user. No wonder they have such a focus on databases, right?&lt;/p&gt;
&lt;p&gt;PRIYANKA: As the events grow, like you mentioned, in some of these events, the traffic grows to millions of users per second. You also said&amp;ndash;&lt;/p&gt;
&lt;p&gt;NICOLE: Per second!&lt;/p&gt;
&lt;p&gt;PRIYANKA: &amp;hellip;of data is generated. How does the system scale when it comes to data pipeline?&lt;/p&gt;
&lt;p&gt;JAMES: Yeah. So when there&amp;rsquo;s increase of transactions, there is increase of load
throughout the system with a lot of our data pipelines for things like BigQuery, one of that&amp;ndash;&lt;/p&gt;
&lt;p&gt;NICOLE: I&amp;rsquo;m not actually sure she was saying millions of users per second, but that&amp;rsquo;s a little bit ambiguous. Maybe she meant millions of requests per second. And the way that they&amp;rsquo;re trying to do that is they&amp;rsquo;re reducing the size of those requests. If she means there are millions of concurrent users at any given time, that doesn&amp;rsquo;t necessarily mean that those users are all doing something at the exact same time. So I would have wanted to see exactly how many requests, to hear
how many requests per second they&amp;rsquo;re needing to deal with, or how many bytes per second are being sent over the wire. That would&amp;rsquo;ve been cool.&lt;/p&gt;
&lt;p&gt;JAMES: &amp;hellip;Just works. Google Cloud will handle the increase in traffic without any intervention.&lt;/p&gt;
&lt;p&gt;PRIYANKA: With that much traffic, obviously health of the system is critical as well. How do you monitor the health of the system during these massive events?&lt;/p&gt;
&lt;p&gt;JAMES: So we use multiple monitoring systems, including Prometheus, Grafana, and Google Cloud monitoring. On a personal level, I actually prefer it to Google Cloud monitoring because it&amp;rsquo;s very simple to use&amp;ndash;&lt;/p&gt;
&lt;p&gt;NICOLE: Whoo whoo! And they&amp;rsquo;re using Prometheus and Grafana &amp;hellip; Oh, this is entirely unexpected, but I&amp;rsquo;m actually wearing a Grafana shirt. So it&amp;rsquo;s really cool that they&amp;rsquo;re using Prometheus and it really, it makes sense, because they&amp;rsquo;re on a Kubernetes cluster and Prometheus and Kubernetes just go really well together. By the way, I work for Grafana, for context.&lt;/p&gt;
&lt;p&gt;PRIYANKA: What are some of the expansions and improvements you&amp;rsquo;re looking to do in the future?&lt;/p&gt;
&lt;p&gt;JAMES: On the Google Cloud side of things, we are looking into things such as Agones and Google Game servers, and using that to see how we can make our game even better.&lt;/p&gt;
&lt;p&gt;PRIYANKA: We wish you and the Niantic team best of luck for these enhancements. And this has obviously been super insightful for us, James. Thanks for joining me today and sharing your architecture with us.&lt;/p&gt;
&lt;p&gt;JAMES: Yeah, thanks for having me. This was fun.&lt;/p&gt;
&lt;p&gt;NICOLE: That was really good. So there were a few things that were mentioned there for how they&amp;rsquo;re scaling Pokemon Go, that I wrote down here.&lt;/p&gt;
&lt;p&gt;One, they use an event driven architecture and also a microservices based architecture, both of which are way more performant than the traditional methods.And the microservices based architecture will also let them scale up independently as demand increases as well. And they&amp;rsquo;re also using Cloud Spanner instead of Google Data Store, prioritizing global consistency, as well as high availability.&lt;/p&gt;
&lt;p&gt;They front-load a lot of the static assets that are used by the application. And they&amp;rsquo;re being downloaded when the app is initially downloaded or installed onto users&amp;rsquo; mobile phones. That way they don&amp;rsquo;t have to keep serving the same data if it&amp;rsquo;s going to be used consistently. And when something changes, like a different lot of Pokemon, they release these patches that let you download a lot of those images so that when you catch those Pokemons, then you already have all that information on your phone. And on a related note, they&amp;rsquo;re employing a lot of caching. They talked about caching on the mobile app side, and on their server side.&lt;/p&gt;
&lt;p&gt;Events are also staggered. So splintered realms sort of, because they&amp;rsquo;re happening
on different time zones, depending on where you live. And not completely simultaneously, regardless of the time in the part of the world where you&amp;rsquo;re from.&lt;/p&gt;
&lt;p&gt;They&amp;rsquo;re also using things like Prometheus, Grafana and Google Cloud Monitoring. They didn&amp;rsquo;t mention how they&amp;rsquo;re actually using multi-tenant versions of Prometheus like, maybe, I don&amp;rsquo;t know if they&amp;rsquo;re using Cortex or something like that, but that&amp;rsquo;s something that they should look into.&lt;/p&gt;
&lt;p&gt;And they also mentioned potentially increasing the number of Google Game Servers.&lt;/p&gt;
&lt;p&gt;I really appreciated that behind the scenes look. I wish more companies would do this, especially for apps that I personally love and use. One thing that I&amp;rsquo;m really curious about though, is the testing side of it. Because testing an application of this scale and complexity, is another thing entirely from observability. And I would have wanted to know how they&amp;rsquo;re doing their performance and load testing. And whether they&amp;rsquo;re doing things like chaos engineering maybe, or reliability testing to improve the availability and reliability of their application.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re still watching this, then chances are high that you like Pokemon and load testing as much as I do, which is a bit of an odd combination. And in that case, check out this video, on how I run chaos experiments using k6, Prometheus and Grafana. Thank you for joining me as I watched this awesome video.&lt;/p&gt;
&lt;p&gt;And as they say in the Netherlands, (Dutch) Until next time! Bye!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new with k6 Cloud, with front-end lead Simon Legander (k6 Office Hours #36)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211203-koh36-whats-new-with-k6-cloud/</link>
      <pubDate>Fri, 03 Dec 2021 17:09:45 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211203-koh36-whats-new-with-k6-cloud/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/oyl9HNMC-ug&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;In this week&amp;rsquo;s k6 Office Hours, I was joined by my colleagues &lt;a href=&#34;https://twitter.com/markjmeier&#34;&gt;Mark Meier&lt;/a&gt; and Simon Legander, front-end lead at k6, to talk about the new features that have come to k6 Cloud this year so far. Simon also gives us a sneak peek of all the cool features coming on the horizon&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Basics of Flag Theory for Software Engineers</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211201-the-basics-of-flag-theory-for-software-engineers/</link>
      <pubDate>Wed, 01 Dec 2021 17:12:58 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211201-the-basics-of-flag-theory-for-software-engineers/</guid>
      <description>&lt;p&gt;One of the most common questions I get from friends and family is &amp;ldquo;Why do you have three passports and how on earth did you get them?!&amp;rdquo; In this video, I talk about what flag theory is, why I think it&amp;rsquo;s useful, and how I apply it to my life in areas such as finance, investment, real estate, and, yes, nationalities.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/NBUVWlhmVDM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>How I Use Obsidian for Work as a Software Developer Advocate</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211117-how-i-use-obsidian-for-work-as-a-software-developer-advocate/</link>
      <pubDate>Wed, 17 Nov 2021 16:48:22 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211117-how-i-use-obsidian-for-work-as-a-software-developer-advocate/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/D7e1ud_Dk24&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;I&amp;rsquo;ve previously written about &lt;a href=&#34;https://nicolevanderhoeven.com/blog/20210518-how-i-use-obsidian-at-work/&#34;&gt;how I use Obsidian at work&lt;/a&gt;, but this video shows exactly how I do it, and all the plugins I use to make Obsidian as useful at work as it is for play.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I use Obsidian to run and play D&amp;D online</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211113-how-i-use-obsidian-to-run-and-play-dnd-online/</link>
      <pubDate>Sat, 13 Nov 2021 00:38:11 +0000</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211113-how-i-use-obsidian-to-run-and-play-dnd-online/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve previously talked about how &lt;a href=&#34;https://nicolevanderhoeven.com/blog/20210930-non-lazy-dms-use-obsidian-for-dnd/&#34;&gt;non-lazy DMs use Obsidian for D&amp;amp;D&lt;/a&gt;, and a few weeks ago, I participated in a &lt;a href=&#34;https://nicolevanderhoeven.com/blog/20211009-ttrpg-obsidian-showcase&#34;&gt;TTRPG Obsidian Showcase&lt;/a&gt; with a few other Obsidian DMs and players. Here&amp;rsquo;s my part of that presentation:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/3pt6_srUZ7U&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;resources-mentioned&#34;&gt;Resources mentioned&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This talk was part of the TTRPG Obsidian Showcase (video): &lt;a href=&#34;https://www.youtube.com/watch?v=Ovqu_1aW3Sw&#34;&gt;https://www.youtube.com/watch?v=Ovqu_1aW3Sw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Non-lazy DMs use Obsidian for D&amp;amp;D (blog post): &lt;a href=&#34;https://nicolevanderhoeven.com/blog/20210930-non-lazy-dms-use-obsidian-for-dnd/&#34;&gt;https://nicolevanderhoeven.com/blog/20210930-non-lazy-dms-use-obsidian-for-dnd/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How I Use Obsidian for D&amp;amp;D - Player&amp;rsquo;s Edition (blog post): &lt;a href=&#34;https://nicolevanderhoeven.com/blog/20210809-dnd-obsidian-player/&#34;&gt;https://nicolevanderhoeven.com/blog/20210809-dnd-obsidian-player/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dice Roller: &lt;a href=&#34;https://github.com/valentine195/obsidian-dice-roller&#34;&gt;https://github.com/valentine195/obsidian-dice-roller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Initiative Tracker: &lt;a href=&#34;https://github.com/valentine195/obsidian-initiative-tracker&#34;&gt;https://github.com/valentine195/obsidian-initiative-tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fantasy Calendar: &lt;a href=&#34;https://github.com/valentine195/obsidian-fantasy-calendar&#34;&gt;https://github.com/valentine195/obsidian-fantasy-calendar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gallery: &lt;a href=&#34;https://github.com/Darakah/obsidian-gallery&#34;&gt;https://github.com/Darakah/obsidian-gallery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dataview: &lt;a href=&#34;https://github.com/blacksmithgu/obsidian-dataview&#34;&gt;https://github.com/blacksmithgu/obsidian-dataview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Leaflet: &lt;a href=&#34;https://github.com/valentine195/obsidian-leaflet-plugin&#34;&gt;https://github.com/valentine195/obsidian-leaflet-plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Admonition: &lt;a href=&#34;https://github.com/valentine195/obsidian-admonition&#34;&gt;https://github.com/valentine195/obsidian-admonition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Advanced Tables: &lt;a href=&#34;https://github.com/tgrosinger/advanced-tables-obsidian&#34;&gt;https://github.com/tgrosinger/advanced-tables-obsidian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5e statblocks: &lt;a href=&#34;https://github.com/valentine195/obsidian-5e-statblocks&#34;&gt;https://github.com/valentine195/obsidian-5e-statblocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How I use Obsidian for work as a software developer advocate (video): &lt;a href=&#34;https://youtube.com/watch?v=D7e1ud_Dk24&#34;&gt;https://youtube.com/watch?v=D7e1ud_Dk24&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Browser testing and API load testing in the same script with k6 (k6 Office Hours #35)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211112-koh35-browser-testing-and-api-load-testing-with-k6/</link>
      <pubDate>Fri, 12 Nov 2021 00:28:02 +0000</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211112-koh35-browser-testing-and-api-load-testing-with-k6/</guid>
      <description>&lt;p&gt;Earlier this week, at &lt;a href=&#34;https://grafana.com/go/observabilitycon/2021/k6-load-testing/&#34;&gt;ObservabilityCON 2021&lt;/a&gt;, we announced something new: k6 now supports browser-based testing with xk6-browser. Here&amp;rsquo;s a few of us from the k6 team talking about the announcement!&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/Y4qDAaJgxV0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;resources-mentioned&#34;&gt;Resources mentioned&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://grafana.com/go/observabilitycon/2021/k6-load-testing/&#34;&gt;Catch the announcement here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://k6.io/blog/extending-k6-with-xk6/&#34;&gt;Learn more about the xk6 extension system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grafana/xk6-browser&#34;&gt;Try the xk6-browser extension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>k6 load testing on Kubernetes using the k6 Operator, with Hans Knecht (k6 Office Hours #34)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211105-koh34-k6-load-testing-on-kubernetes-using-k6-operator/</link>
      <pubDate>Fri, 05 Nov 2021 00:23:15 +0000</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211105-koh34-k6-load-testing-on-kubernetes-using-k6-operator/</guid>
      <description>&lt;p&gt;I was really excited to have Hans Knecht on this week&amp;rsquo;s Office Hours. Hans works at Mission Lane, and is one of the biggest contributors to a k6 extension called k6 operator. k6 Operator lets you create a k6 custom resource object in Kubernetes.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/IJ0uQgn7gI8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;resources-mentioned&#34;&gt;Resources mentioned&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grafana/k6-operator&#34;&gt;k6 operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://k6.io/blog/running-distributed-tests-on-k8s/&#34;&gt;Running distributed k6 tests on Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=KPyI8rM3LvE&#34;&gt;Previous k6 Office Hours on the Operator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Work week in the life of a Developer Advocate </title>
      <link>https://nicolevanderhoeven.github.io/blog/20211103-work-week-in-the-life-of-a-developer-advocate/</link>
      <pubDate>Wed, 03 Nov 2021 00:31:46 +0000</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211103-work-week-in-the-life-of-a-developer-advocate/</guid>
      <description>&lt;p&gt;Before I became a Developer Advocate, I didn&amp;rsquo;t really know what developer advocates did - so here&amp;rsquo;s my attempt at explaining what it is I do for a living!&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/71q0JmEli0k&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;weekly-breakdown&#34;&gt;Weekly breakdown&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s a list of my activities during this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Friday
&lt;ul&gt;
&lt;li&gt;Filmed new ending for video #1&lt;/li&gt;
&lt;li&gt;Figured out integration options&lt;/li&gt;
&lt;li&gt;Did k6 Office Hours&lt;/li&gt;
&lt;li&gt;Prepared for Clubhouse talk&lt;/li&gt;
&lt;li&gt;Participated in customer demo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Saturday
&lt;ul&gt;
&lt;li&gt;Did post-production for k6 Office Hours&lt;/li&gt;
&lt;li&gt;Talked at a Clubhouse meetup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sunday
&lt;ul&gt;
&lt;li&gt;Wrote (team profile) blog post #1&lt;/li&gt;
&lt;li&gt;Wrote talking points for Racket&lt;/li&gt;
&lt;li&gt;Started writing blog post #2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Monday
&lt;ul&gt;
&lt;li&gt;Edited video #1&lt;/li&gt;
&lt;li&gt;Created thumbnail, description&lt;/li&gt;
&lt;li&gt;Scheduled video #1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tuesday
&lt;ul&gt;
&lt;li&gt;Created slides for presentation&lt;/li&gt;
&lt;li&gt;Played with Prometheus and Grafana for webinar&lt;/li&gt;
&lt;li&gt;Had a virtual coffee with colleagues&lt;/li&gt;
&lt;li&gt;Finished writing blog post #2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wednesday
&lt;ul&gt;
&lt;li&gt;Went to four meetings&lt;/li&gt;
&lt;li&gt;Caught up on emails, Slack, and social media (last night)&lt;/li&gt;
&lt;li&gt;Wrote blog post #3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Thursday
&lt;ul&gt;
&lt;li&gt;Scripted and filmed videos #2 and #3&lt;/li&gt;
&lt;li&gt;Started editing video #2&lt;/li&gt;
&lt;li&gt;Talked to a potential guest on livestream&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Common performance testing problems and fears (k6 Office Hours #33)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211029-koh33-common-performance-testing-fears-and-issues/</link>
      <pubDate>Fri, 29 Oct 2021 00:20:27 +0000</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211029-koh33-common-performance-testing-fears-and-issues/</guid>
      <description>&lt;p&gt;For this week&amp;rsquo;s k6 Office Hours, we attempted to steer into Halloween by talking about some of the most common performance testing issues we&amp;rsquo;ve faced in our careers as performance testing consultants. For this one, I had Tom Miseur join me to commiserate and swap stories.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/jVa3noSOyg8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Site Reliability Engineering and performance testing with Stephen Townshend (k6 Office Hours #32)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211022-koh32-sre-and-performance-testing/</link>
      <pubDate>Tue, 19 Oct 2021 00:09:50 +0000</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211022-koh32-sre-and-performance-testing/</guid>
      <description>&lt;p&gt;In this week&amp;rsquo;s Office Hours, I wanted to talk about the intersection of Site Reliability Engineering and performance testing, so I decided to invite two people with different backgrounds from me to discuss it. Stephen Townshend is a performance engineer who recently changed jobs to become an SRE, and Daniel González Lopes is an SRE who had not had experience in performance testing before he joined k6. It turned out to be a great talk!&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/2U6nP8ajx1Q&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;resources-mentioned&#34;&gt;Resources mentioned&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://open.spotify.com/show/7wOCHzZBCzOi071QuDPodI&#34;&gt;Stephen&amp;rsquo;s Performance Time podcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.katacoda.com/&#34;&gt;Katacoda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/&#34;&gt;Pluralsight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://12factor.net/&#34;&gt;The Twelve-Factor App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fs.blog/2021/05/slack/&#34;&gt;The blog post that Stephen mentioned, about slack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How to install and use the k6 Cloud Grafana data source plugin</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211019-how-to-install-and-use-k6-cloud-grafana-datasource-plugin/</link>
      <pubDate>Tue, 19 Oct 2021 00:02:05 +0000</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211019-how-to-install-and-use-k6-cloud-grafana-datasource-plugin/</guid>
      <description>&lt;p&gt;In this video, I talk about the k6 Cloud Grafana data source plugin, which lets you use k6 Cloud as a data source for your Grafana visualizations.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/Q2oihIg9Zjg&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://k6.io/docs/cloud/integrations/grafana-plugin/&#34;&gt;Installing and using the k6 Cloud Grafana data source plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://grafana.com/plugins/grafana-k6cloud-datasource/?tab=installation&#34;&gt;Installing the plugin for Grafana Cloud&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://k6.io/docs/cloud/integrations/token&#34;&gt;Get your k6 Cloud API token on this page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml&#34;&gt;Grafana Helm Charts repository&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Load testing with k6 for beginners, with İnanç Gümüş and Viktor Mihajlović (k6 Office Hours #31)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211015-koh31-load-testing-with-k6-for-beginners/</link>
      <pubDate>Fri, 15 Oct 2021 01:52:48 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211015-koh31-load-testing-with-k6-for-beginners/</guid>
      <description>&lt;p&gt;Did you know that every new person to k6 does a Week of Testing? It&amp;rsquo;s a k6 tradition for new hires to spend their first week seeing firsthand what the experience of a new user of k6 is like. How quickly do they find the documentation? What issues do they get stuck on? Then, at the end of the week, the new employees do a presentation for the rest of the team to show their first impressions and findings.&lt;/p&gt;
&lt;p&gt;In today&amp;rsquo;s Office Hours, &lt;a href=&#34;https://twitter.com/inancgumus&#34;&gt;İnanç Gümüş&lt;/a&gt;, one of the newest k6 team members, shares his presentation and his experience as a k6 beginner. Another colleague, Viktor Mihajlović, a Technical Customer Success Engineer, also shares some of the most commonly asked questions he&amp;rsquo;s heard on the job.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/MeN3H1Ml8OU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>How to make load testing scripts realistic</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211014-realistic-load-testing/</link>
      <pubDate>Wed, 13 Oct 2021 15:17:45 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211014-realistic-load-testing/</guid>
      <description>&lt;p&gt;A good load testing script exercises the functions and components as specified in the requirements gathering phase while simulating real users as closely as possible. Here are a few ways to make scripts more realistic.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/Xz6drbGuUdI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Timestamps so you can skip around!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Xz6drbGuUdI&#34;&gt;0:00&lt;/a&gt; Intro&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Xz6drbGuUdI&amp;amp;t=82s&#34;&gt;1:22&lt;/a&gt; Static resources&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Xz6drbGuUdI&amp;amp;t=151s&#34;&gt;2:31&lt;/a&gt; Cache and cookies&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Xz6drbGuUdI&amp;amp;t=182s&#34;&gt;3:02&lt;/a&gt; Dynamic think time&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Xz6drbGuUdI&amp;amp;t=307s&#34;&gt;5:07&lt;/a&gt; Concurrent requests&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Xz6drbGuUdI&amp;amp;t=345s&#34;&gt;5:45&lt;/a&gt; Load profile&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Xz6drbGuUdI&amp;amp;t=379s&#34;&gt;6:19&lt;/a&gt; Test data&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Xz6drbGuUdI&amp;amp;t=421s&#34;&gt;7:01&lt;/a&gt; Different user paths&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Xz6drbGuUdI&amp;amp;t=475s&#34;&gt;7:55&lt;/a&gt; Other forms of testing&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Basics of load testing with k6 and Grafana in 20 minutes</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211012-basics-of-load-testing-with-k6-and-grafana/</link>
      <pubDate>Tue, 12 Oct 2021 01:04:02 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211012-basics-of-load-testing-with-k6-and-grafana/</guid>
      <description>&lt;p&gt;This was a video I pre-recorded in preparation for &lt;a href=&#34;https://nicolevanderhoeven.com/blog/20211005-testing-with-k6-and-grafana-better-together/&#34;&gt;the first Grafana EMEA virtual meetup&lt;/a&gt;.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/gvounvDSDGg&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;In mid-June (just three months ago), k6 joined the Grafana Labs family. Many people didn&amp;rsquo;t quite understand what the connection was between k6 and Grafana, but I thought it made a lot of sense.&lt;/p&gt;
&lt;p&gt;Google&amp;rsquo;s Site Reliability Engineering book talks about 4 golden signals that we should measure in a system: latency, traffic, errors, and saturation. Load testing provides 3 of those (latency, traffic, and errors), but it doesn&amp;rsquo;t show saturation, and it doesn&amp;rsquo;t give us visibility into the system.&lt;/p&gt;
&lt;p&gt;Grafana brings observability. k6 brings data. They work really well together, which is why we&amp;rsquo;ve been using each other&amp;rsquo;s products for a few years now, before there was ever any talk of an acquisition.&lt;/p&gt;
&lt;p&gt;In this video, I talk about why k6 and Grafana are better together and also demonstrate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how to run a simple script in k6 OSS&lt;/li&gt;
&lt;li&gt;how to make sense of the results of a load test&lt;/li&gt;
&lt;li&gt;test execution options: running locally, sending results to k6 Cloud, and running a test from k6 Cloud&amp;ndash; all triggered using the CLI&lt;/li&gt;
&lt;li&gt;two different integration options to bring k6 and Grafana together: the k6 Cloud Grafana data source plugin and Prometheus Remote Write&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>TTRPG Obsidian Showcase</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211009-ttrpg-obsidian-showcase/</link>
      <pubDate>Sat, 09 Oct 2021 00:43:25 +0000</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211009-ttrpg-obsidian-showcase/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s a presentation I participated in about a bunch of nerds who like both &lt;a href=&#34;https://obsidian.md&#34;&gt;Obsidian&lt;/a&gt; and D&amp;amp;D. My part begins around &lt;a href=&#34;https://www.youtube.com/watch?v=Ovqu_1aW3Sw&amp;amp;t=2720&#34;&gt;0:45:20&lt;/a&gt;, but I thought the other speakers&#39; parts were really fascinating as well!&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/Ovqu_1aW3Sw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>SLOs in performance testing, with Leandro Melendez aka Señor Performo (k6 Office Hours #30)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211008-koh30-slos-in-performance-with-leandro-melendez/</link>
      <pubDate>Fri, 08 Oct 2021 22:05:22 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211008-koh30-slos-in-performance-with-leandro-melendez/</guid>
      <description>&lt;p&gt;In this Office Hours, I invited my colleague Tom Miseur and friend Leandro Melendez, aka Señor Performo, to talk all about different criteria in performance testing, including non-functional requirements, SLAs, SLOs, SLIs, thresholds, and checks. Criteria at different levels is how we determine whether testing, including performance testing, has been successful, so it&amp;rsquo;s important to understand what they are and incorporate them into testing scripts and processes.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/GyueCZi5qBI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Testing in Public: How to plan a load test (practical example) - Wyrmwood Gaming</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211006-testing-in-public-planning-a-load-test/</link>
      <pubDate>Wed, 06 Oct 2021 11:21:41 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211006-testing-in-public-planning-a-load-test/</guid>
      <description>&lt;p&gt;When you&amp;rsquo;re learning a new skill, there&amp;rsquo;s only so much that studying can do. The problem is that there&amp;rsquo;s still a big gulf between studying something and doing it yourself. The solution is having a mentor to bridge the gap&amp;ndash; someone who will let you shadow them while they&amp;rsquo;re executing tests.&lt;/p&gt;
&lt;p&gt;I made this video thinking about the me from over a decade ago who would have wanted to get the chance to look over a more experienced tester&amp;rsquo;s shoulder. In this video, I talk about how considerations for planning load testing, using a hypothetical use case for a real company: &lt;a href=&#34;https://wyrmwoodgaming.com&#34;&gt;Wyrmwood Gaming&lt;/a&gt;.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/EFqBWqo3IzY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Testing With k6 &#43; Grafana: Better Together (Grafana virtual meetup EMEA)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211005-testing-with-k6-and-grafana-better-together/</link>
      <pubDate>Tue, 05 Oct 2021 21:49:13 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211005-testing-with-k6-and-grafana-better-together/</guid>
      <description>&lt;p&gt;In this first EMEA session of the Grafana Labs virtual meetups, I talked about how to use k6 and Grafana together to get the full performance picture for a software application. Observability, using tools like Prometheus and Grafana, lets us see what&amp;rsquo;s going on inside the application, and load testing, using k6, helps us get those insights earlier on in software cycles, such as during pre-production.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/MUd5xuuxt0A&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>How to use k6 Cloud - a k6 load testing tutorial with Bill Rainaud (k6 Office Hours #29)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20211001-koh29-bill/</link>
      <pubDate>Fri, 01 Oct 2021 13:58:03 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20211001-koh29-bill/</guid>
      <description>&lt;p&gt;Bill Rainaud is an inside account executive at k6, which means he talks to users and potential users of k6 every day. In this Office Hours, he explains how to get started with load testing using k6 Cloud, which is a SaaS platform for running and scaling up load tests on the cloud. We also answered a few frequently asked questions about k6&amp;rsquo;s capabilities and how to do correlation in k6.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/eCv1XshEpDI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>How to load test a GraphQL API built with Hasura using k6 (k6 Office Hours #28)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210917-koh28-load-testing-graphql-with-hasura-and-k6/</link>
      <pubDate>Fri, 17 Sep 2021 13:58:42 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210917-koh28-load-testing-graphql-with-hasura-and-k6/</guid>
      <description>&lt;p&gt;My co-host &lt;a href=&#34;https://simme.dev&#34;&gt;Simme&lt;/a&gt; and I had invited Adron Hall from &lt;a href=&#34;https://hasura.io&#34;&gt;Hasura&lt;/a&gt; to come talk to us about how to load test a GraphQL API, but he was unable to come due to unforeseen circumstances. Luckily, Tom Miseur, who is part of the Professional Services branch of k6, was able to step in on very little notice!&lt;/p&gt;
&lt;p&gt;Tom has done a load testing engagement using k6 that involved Hasura, so he was able to tell us what it is and how it can be tested with k6. It turned out really well, thankfully!&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/sAPHPvmfdPQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Intro to Load Testing With k6 and Grafana (webinar)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210916-intro-to-load-testing-with-k6-and-grafana/</link>
      <pubDate>Thu, 16 Sep 2021 22:11:16 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210916-intro-to-load-testing-with-k6-and-grafana/</guid>
      <description>&lt;p&gt;Tonight I did a webinar with Grafana Labs&amp;ndash; the first k6-related webinar since the acquisition. I was more than a little nervous to give it, because I knew I was introducing k6 to a lot of new users, but also to Grafana for the first time. I think it went pretty well! I was still quite relieved when it was over, however. :)&lt;/p&gt;
&lt;p&gt;In the webinar, I talk about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;why it&amp;rsquo;s still a good idea to do load testing in pre-production&lt;/li&gt;
&lt;li&gt;what k6 is&lt;/li&gt;
&lt;li&gt;why k6 and Grafana together make sense&lt;/li&gt;
&lt;li&gt;and how to integrate k6 and Grafana&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;rsquo;s quite a bit of demo in it, and I also had the k6 CEO, Robin Gustafsson, join me for Q&amp;amp;A as a nice treat.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/tFsIgbqXbxM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Check out the full webinar &lt;a href=&#34;https://grafana.com/go/webinar/intro-to-load-testing-with-grafana-and-k6/&#34;&gt;here&lt;/a&gt;&amp;ndash; it&amp;rsquo;s already up on the Grafana site. You can also go through my slides &lt;a href=&#34;https://docs.google.com/presentation/d/1WOA50nqIv1NoiHBxGIH_JM02rZqSjX81gHTlwPJ5i1U/edit?usp=sharing&#34;&gt;here&lt;/a&gt;, if you&amp;rsquo;d like.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Schrödinger&#39;s Pokémon: k6 and Grafana edition</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210908-schrodingers-pokemon-k6-and-grafana/</link>
      <pubDate>Wed, 15 Sep 2021 18:22:31 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210908-schrodingers-pokemon-k6-and-grafana/</guid>
      <description>&lt;p&gt;Earlier this year, I gave a presentation at New Relic&amp;rsquo;s FutureStack conference about &lt;a href=&#34;https://nicolevanderhoeven.com/blog/20210730-schrodingers-pokemon/&#34;&gt;chaos engineering with k6 and New Relic&lt;/a&gt;. A few months ago, k6 got acquired by &lt;a href=&#34;https://grafana.com&#34;&gt;Grafana Labs&lt;/a&gt;, and so I wanted to redo it, but with the Grafana stack this time.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the result, and I think I like this iteration even better:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/2QHs_HEX7r0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;I presented this talk at &lt;a href=&#34;https://www.youtube.com/watch?v=jSgH3I8_ldk&#34;&gt;TestCon Europe 2021&lt;/a&gt; today, although the audio sync issues were not great, so I recommend you watch the video above instead.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/11HakdG0w2RsOunVnD6qPkTfTPpBxtXFECK_ynSOBraE/edit&#34;&gt;Slides are here.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How Gitlab uses k6 for load testing, with Grant Young (k6 Office Hours #27)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210910-koh27-how-gitlab-uses-k6-for-load-testing/</link>
      <pubDate>Fri, 10 Sep 2021 18:13:26 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210910-koh27-how-gitlab-uses-k6-for-load-testing/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/in/grantyoung86/&#34;&gt;Grant Young&lt;/a&gt;, Software Engineer in Test at GitLab, joined &lt;a href=&#34;https://grafana.com/k6&#34;&gt;k6 OSS&lt;/a&gt; maintainer &lt;a href=&#34;https://twitter.com/MStoykov&#34;&gt;Mihail Stoykov&lt;/a&gt; and me to talk about how GitLab uses k6. Apparently, they began using k6 internally some time ago, and because they like to eat their own dogfood and use GitLab to test GitLab, they also incorporated k6 into GitLab so that their users could reap the benefits, too.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/YTGkq0m1bYk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.gitlab.com/ee/user/project/merge_requests/load_performance_testing.html&#34;&gt;Here&amp;rsquo;s the GitLab documentation&lt;/a&gt; about how to do load testing in GitLab, and &lt;a href=&#34;https://k6.io/blog/integrating-load-testing-with-gitlab/&#34;&gt;here&amp;rsquo;s a k6 blog post&lt;/a&gt; on how to set it up!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to do continuous performance testing, with Lee Barnes (k6 Office Hours #26)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210827-koh26-continuous-performance-testing-with-k6/</link>
      <pubDate>Fri, 27 Aug 2021 09:34:13 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210827-koh26-continuous-performance-testing-with-k6/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://twitter.com/USI_LeeBarnes&#34;&gt;Lee Barnes&lt;/a&gt; and I got connected because we are both speaking at &lt;a href=&#34;https://testcon.lt/&#34;&gt;TestCon Europe 2021&lt;/a&gt; this year, and I thought it would be nice to have a chat with him before the conference to get a sneak peek at what he&amp;rsquo;s presenting about: continuous performance testing. Lee is the CEO of &lt;a href=&#34;https://utopiasolutions.com/&#34;&gt;Utopia Solutions&lt;/a&gt;, and he&amp;rsquo;s been in the testing industry for decades, so I really appreciated his insights on where the industry is going.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/5pd0G-jBOTo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Catch Lee&amp;rsquo;s talk &lt;a href=&#34;https://testcon.lt/Lee-Barnes/&#34;&gt;here&lt;/a&gt; and mine &lt;a href=&#34;https://testcon.lt/Nicole-van-der-Hoeven/&#34;&gt;here&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to debug k6 load testing scripts with Tom Miseur (k6 Office Hours #25)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210820-koh25-k6_load_testing_scripts/</link>
      <pubDate>Fri, 20 Aug 2021 14:38:11 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210820-koh25-k6_load_testing_scripts/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/in/tommiseur/&#34;&gt;Tom Miseur&lt;/a&gt; joined k6 at about the same time I did late last year, and we immediately hit it off because we both come from a performance testing consulting background AND we both had worked for different competing testing tool vendors before moving to k6. I was excited to have him on k6 Office Hours to talk about a topic we both had a lot to say about: how to debug load testing scripts, and specifically k6 scripts. We got a chance to do a bit of a show-and-tell of tools that we use that we use, and they are all independent of k6.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wireshark.org&#34;&gt;Wireshark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.charlesproxy.com&#34;&gt;Charles Proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mitmproxy.org&#34;&gt;mitmproxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.telerik.com/fiddler&#34;&gt;Fiddler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://proxyman.io&#34;&gt;Proxyman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also got to demo &lt;a href=&#34;https://github.com/benc-uk/k6-reporter&#34;&gt;a cool HTML reporting dashboard&lt;/a&gt; that Ben Coleman, a k6 user, created. While it&amp;rsquo;s not baked into the tool itself, it&amp;rsquo;s fairly straightforward to add it, requiring only two snippets of code that can be pasted onto any script.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/Zln_TWOuoho&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Kubedim: Microservices testing using k6 for reliability, with Kelvin Zhang (k6 Office Hours #24)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210813-kubedim-microservices-testing/</link>
      <pubDate>Fri, 13 Aug 2021 15:50:46 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210813-kubedim-microservices-testing/</guid>
      <description>&lt;p&gt;Today, my colleague &lt;a href=&#34;https://www.gonzalezlopes.com/&#34;&gt;Daniel González Lopes&lt;/a&gt; joined me as a co-host on k6 Office Hours, and we interviewed &lt;a href=&#34;https://twitter.com/kelvzhan&#34;&gt;Kelvin Zhang&lt;/a&gt; about his thesis at Imperial College London, using k6 to test microservices-based architectures. He created something called Kubedim, an application that intelligently applies non-uniform brownout theory to intentionally dim application requests for the purpose of improving overall availability.&lt;/p&gt;
&lt;p&gt;This was a dense Office Hours to digest, but Kelvin really impressed us with his experiments and findings! It&amp;rsquo;s definitely an awesome use case for k6 and just a great one to watch for any site reliability engineer.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/O1Evg9_EEmU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Grotten Sint Pietersberg Maastricht (LuckyDippers)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210812-ld109-grotten-sint-pietersberg/</link>
      <pubDate>Thu, 12 Aug 2021 12:21:09 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210812-ld109-grotten-sint-pietersberg/</guid>
      <description>&lt;p&gt;Another travel vlog from safer times: in September 2018, my husband and I took a friend out to Grotten Sint Pietersberg, a fortress and cave system in Maastricht, the Netherlands. They had been used in the times before that area was not yet part of the city of Maastricht; they were in a small village called Sint Pietersberg that had gotten caught between several invading foreign armies and the people of Maastricht. We enjoyed the day out!&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/l7BHMbr-ltM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Monitoring your k6 load test: how to install Grafana and Prometheus on a Kubernetes cluster</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210811-how-to-install-grafana-prometheus-in-kubernetes/</link>
      <pubDate>Wed, 11 Aug 2021 18:55:49 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210811-how-to-install-grafana-prometheus-in-kubernetes/</guid>
      <description>&lt;p&gt;Running a load test is half of the equation, and not having the right observability tools to see how your application responds to the load can sometimes flat-out invalidate a test.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how to install open-source tools Grafana and Prometheus on a Kubernetes cluster in DigitalOcean and how a performance user could use them for increased visibility during a load test.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/GL2v81xYuAQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>How we work at k6 - building software &amp; working remotely with CTO Pawel Suwala (k6 Office Hours #23)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210806-koh23-pawel/</link>
      <pubDate>Fri, 06 Aug 2021 18:09:05 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210806-koh23-pawel/</guid>
      <description>&lt;p&gt;For this episode of k6 Office Hours, I got the k6 Chief Technical Officer, Pawel Suwala, to give a bit of a behind-the-scenes of how we work at k6 and what we&amp;rsquo;re working on next. We talked about the methodology we use for building k6, the different teams we have, and exciting new features that are coming soon!&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/95PP2zwMlc0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Balkan Bites free food tour with Bulgarian food | Sofia, Bulgaria (Lucky Dippers)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210806-ld108-balkan-bites/</link>
      <pubDate>Fri, 06 Aug 2021 13:01:44 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210806-ld108-balkan-bites/</guid>
      <description>&lt;p&gt;In September 2018, while my husband and I were in Sofia, Bulgaria, we decided to try some delicious Bulgarian cuisine by going on the Balkan Bites free food tour, which let us try Bulgarian relish, yoghurt, doughnuts, cheese, and desserts. Afterwards we went back to one of the restaurants we had gone to on the food tour to have a full meal, which ended up being very delicious. Along the way, I talked about how ilearned the Cyrillic alphabet, and why I thinks it&amp;rsquo;s worth learning even for a short trip like this one.&lt;/p&gt;
&lt;p&gt;We really enjoyed the &lt;a href=&#34;https://balkanbitesfoodtours.com/&#34;&gt;Balkan Bites food tour&lt;/a&gt;, so if you want to join as well, check them out.&lt;/p&gt;
&lt;p&gt;And here&amp;rsquo;s the website for the restaurant we ate at, &amp;ldquo;&lt;a href=&#34;https://www.kashtite.com/en/&#34;&gt;Hadjidraganov&amp;rsquo;s House&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/vFYAuu16Pg0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Schrödinger&#39;s Pokémon: Observability for chaotic load testing (New Relic FutureStack)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210730-schrodingers-pokemon/</link>
      <pubDate>Sun, 01 Aug 2021 18:54:27 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210730-schrodingers-pokemon/</guid>
      <description>&lt;p&gt;This is a presentation I gave at &lt;a href=&#34;https://newrelic.com/futurestack/speakers/nicole-van-der-hoeven&#34;&gt;New Relic FutureStack 2021&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Deploying an application to production is often like putting a pokémon in a box and hoping it manages to stay alive despite real-world chaos and potential outages. What can we, as testers, do to prepare applications for these situations before they go live? In this talk, I discuss chaos engineering concepts and demonstrates how to apply them by incorporating load tests with chaos experiments and setting up observability tools to watch it all happen. Because without observability, how can we tell whether Schrödinger&amp;rsquo;s pokémon is alive or dead?&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/356yC-DOSmo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Free walking tour in Sofia, Bulgaria (LuckyDippers)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210730-ld-sofia/</link>
      <pubDate>Fri, 30 Jul 2021 16:00:48 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210730-ld-sofia/</guid>
      <description>&lt;p&gt;We haven&amp;rsquo;t travelled since January 2020 for obvious reasons, but fortunately (?) I have a whole lot of footage taken from trips pre-pandemic that I haven&amp;rsquo;t yet turned into travel vlogs. In case you weren&amp;rsquo;t aware, I learned a lot of what I know now about creating videos from making travel vlogs for friends and family as my husband and I travelled around the world for months at a time.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a trip we took in September 2018. We had just finished off a trip to Greece with some friends from Australia, and on the way home, I decided to book a three-day stopover in Sofia, Bulgaria&amp;ndash; a city I really knew next to nothing about. Here&amp;rsquo;s that first day!&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/36u9HeLwZ78&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>A tester&#39;s overview of Grafana Labs open-source projects</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210719-grafana-labs-overview/</link>
      <pubDate>Mon, 19 Jul 2021 18:23:33 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210719-grafana-labs-overview/</guid>
      <description>&lt;p&gt;Since the acquisition of k6 by Grafana Labs, the entire k6 team has been absorbed into the new, larger team that we&amp;rsquo;re suddenly a part of. Grafana Labs maintains a lot of projects, so I was very quickly overwhelmed with things to learn about all of them. Here&amp;rsquo;s my attempt to make sense of the Grafana Labs landscape, and perhaps it can help some of you as well:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/_DB-lNZW7LQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Shopping at Bicester Village and welcome my niece to her new home | London, England (Lucky Dippers)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210716-bicester-village/</link>
      <pubDate>Fri, 16 Jul 2021 18:38:17 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210716-bicester-village/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s a fun little vlog that I&amp;rsquo;ve been meaning to make of the last trip my husband Rob and I took before the pandemic. In January 2020, we went to see my cousin and her daughter (my &amp;ldquo;niece&amp;rdquo;, whom I grew up with) in London. My niece, Steffi, had just arrived in London for some studies abroad (she normally lives in the Philippines), so Rob and I popped over to meet up with her and help her settle in.&lt;/p&gt;
&lt;p&gt;Poor thing&amp;ndash; not a month after Steffi got to London, news of the pandemic began to spread. Rob and I had intended to visit her again, but of course that didn&amp;rsquo;t happen.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/fQf7niizW_Y&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>How to run distributed load tests with k6 Operator (k6 Office Hours #21)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210716-koh-k6-operator/</link>
      <pubDate>Fri, 16 Jul 2021 18:17:13 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210716-koh-k6-operator/</guid>
      <description>&lt;p&gt;In this week&amp;rsquo;s Office Hours, &lt;a href=&#34;https://simme.dev&#34;&gt;Simme&lt;/a&gt; and I talked about the &lt;a href=&#34;https://github.com/grafana/k6-operator&#34;&gt;k6 Operator&lt;/a&gt;, which is a open-source project that Simme created for distributed load testing with k6.&lt;/p&gt;
&lt;p&gt;k6 Cloud already offers a no-hassle distributed load testing experience, but for those who prefer to use their own infrastructure, k6 Operator allows the setup of a k6 test as a custom resource object that can be deployed along with a Kubernetes cluster.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/KPyI8rM3LvE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>How to add performance testing to CI/CD pipelines using k6 and GitHub Actions</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210712-github-actions/</link>
      <pubDate>Mon, 12 Jul 2021 22:26:20 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210712-github-actions/</guid>
      <description>&lt;p&gt;Continuous testing means verifying and improving software quality at all stages, including development. It can sound like something only large companies do, but it&amp;rsquo;s an approach I use even for this personal blog that you&amp;rsquo;re reading this on.&lt;/p&gt;
&lt;p&gt;Every new blog post or change I make to this site automatically triggers the execution of a small test. This test, when run over time, lets me see whether changes I&amp;rsquo;ve made have been detrimental to site performance. Here&amp;rsquo;s a video on my setup:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/GzR2Z25-Yqo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Load testing and Azure DevOps with José Luis Latorre Millas (k6 Office Hours #20)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210709-koh-jose/</link>
      <pubDate>Fri, 09 Jul 2021 21:08:36 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210709-koh-jose/</guid>
      <description>&lt;p&gt;José Luis Latorre Millas, Developer Community Lead and Software Architect at Swiss Life AG, joined &lt;a href=&#34;https://simme.dev&#34;&gt;Simme&lt;/a&gt; and me on k6 Office Hours to talk about how he personally uses k6 with Azure DevOps to add load testing to his team&amp;rsquo;s CI/CD pipeline.&lt;/p&gt;
&lt;p&gt;I got to know José from the k6 Community Slack workspace when he mentioned that he would be presenting on k6 in a few meetups. I went to &lt;a href=&#34;https://www.youtube.com/watch?v=HITJg03AQFo&amp;amp;t=112s&#34;&gt;his livestream with CrossDvlUp&lt;/a&gt; (Spanish) and enjoyed his approach, so I knew I wanted to have him on. It&amp;rsquo;s always great to have real users of k6 (both of the OSS and the commercial Cloud option) talk about how they personally use k6 and even what they found lacking in the tool.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/vC2pKgVFxt8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;José&amp;rsquo;s multi-scenario template repo: &lt;a href=&#34;https://github.com/SwissLife-OSS/K6-MultiScenario-template&#34;&gt;https://github.com/SwissLife-OSS/K6-MultiScenario-template&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Register to watch José&amp;rsquo;s talk at Azure Summit 2021, later this year: &lt;a href=&#34;https://azuresummit.live/speaker/jose-luis-latorre-millas/&#34;&gt;https://azuresummit.live/speaker/jose-luis-latorre-millas/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Acquisition talk with CEOs Raj Dutt (Grafana) and Robin Gustafsson (k6) (k6 Office Hours #19)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210702-koh-raj-robin/</link>
      <pubDate>Fri, 02 Jul 2021 21:04:13 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210702-koh-raj-robin/</guid>
      <description>&lt;p&gt;This week on k6 Office Hours, &lt;a href=&#34;https://simme.dev&#34;&gt;Simme&lt;/a&gt; and I were joined by two CEOs: k6 CEO &lt;a href=&#34;https://www.linkedin.com/in/robinegustafsson/&#34;&gt;Robin Gustafsson&lt;/a&gt; and Grafana Labs CEO &lt;a href=&#34;https://twitter.com/nopzor&#34;&gt;Raj Dutt&lt;/a&gt;. It was a little nerve-wracking to have two CEOs on the stream, but it did give us the opportunity to ask both of them pointed questions on Grafana Labs&amp;rsquo;s acquisition of k6, including any plans they have for how both companies could integrate better in the future.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/sfWIB-myito&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>What you need to know about Grafana Labs&#39;s acquisition of k6</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210630-gl-acquisition/</link>
      <pubDate>Wed, 30 Jun 2021 18:29:24 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210630-gl-acquisition/</guid>
      <description>&lt;p&gt;Recently, during Grafanaconline 2021, &lt;a href=&#34;https://grafana.com/about/press/2021-06-17-grafana-labs-brings-modern-open-source-load-testing-to-observability-with-acquisition-of-k6/&#34;&gt;Grafana Labs CEO Raj Dutt announced&lt;/a&gt; the acquisition of k6&amp;ndash; the company I work for. What does this mean? Here&amp;rsquo;s a video I made to explain it all:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/t1agJsLwrGE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://simme.dev&#34;&gt;Simme&lt;/a&gt; and I have also discussed the acquisition twice on k6 Office Hours:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=RrDo2wMeV80&#34;&gt;once with our CEO, Robin Gustafsson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and another time with &lt;a href=&#34;https://www.youtube.com/watch?v=sfWIB-myito&#34;&gt;both Robin and Raj, Grafana Labs CEO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TL;DW: We unanimously agree it&amp;rsquo;s a positive thing. I myself am cautiously optimistic about the future of both k6 and Grafana Labs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to use k6 to benchmark hosting providers with Kevin Ohashi (k6 Office Hours #18)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210625-koh-kevin/</link>
      <pubDate>Fri, 25 Jun 2021 20:57:42 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210625-koh-kevin/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://twitter.com/kevinohashi&#34;&gt;Kevin Ohashi&lt;/a&gt; joined me and &lt;a href=&#34;https://twitter.com/FloorDrees/&#34;&gt;Floor Drees&lt;/a&gt; on k6 Office Hours to talk about how he used k6 to &lt;a href=&#34;https://wphostingbenchmarks.com/&#34;&gt;benchmark the performance of WordPress hosting providers&lt;/a&gt;. He talks about the difficulties he ran into while trying to keep tests repeatable and consistent, and I also make some suggestions for how he could improve his load testing script for future comparisons.&lt;/p&gt;
&lt;p&gt;Of particular note for me in his results was how clearly the performance of the hosting providers varied depending on the location Kevin had selected for his load generators. One in particular showed a significant delay when a site was fetched from Sydney, indicating the possibility of a lack of a CDN server in that region. It made a great argument for load testing in the cloud, from different geographical regions.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/NSOOYiBsPII&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;WordPress Hosting Performance Benchmarks: &lt;a href=&#34;https://wphostingbenchmarks.com/&#34;&gt;https://wphostingbenchmarks.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Benchmarks methodology: &lt;a href=&#34;https://wphostingbenchmarks.com/methodology/&#34;&gt;https://wphostingbenchmarks.com/methodology/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>k6 is part of Grafana Labs! AMA with CEO Robin Gustafsson (k6 Office Hours #17)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210618-koh-with-robin-grafana/</link>
      <pubDate>Fri, 18 Jun 2021 22:26:49 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210618-koh-with-robin-grafana/</guid>
      <description>&lt;p&gt;On this week&amp;rsquo;s Office Hours, &lt;a href=&#34;https://simme.dev&#34;&gt;Simme&lt;/a&gt; and I were joined by &lt;a href=&#34;https://www.linkedin.com/in/robinegustafsson/&#34;&gt;Robin Gustafsson&lt;/a&gt;, the CEO of k6, to make a big announcement: k6 has been acquired by Grafana Labs.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/RrDo2wMeV80&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;The folks at Grafana Labs have been fans of k6 for a while, and we&amp;rsquo;ve been fans (and users) of their work since almost the beginning of k6. While a surprise to many, Grafana and k6 together is a combination that makes sense.&lt;/p&gt;
&lt;p&gt;Read &lt;a href=&#34;https://grafana.com/about/press/2021-06-17-grafana-labs-brings-modern-open-source-load-testing-to-observability-with-acquisition-of-k6/&#34;&gt;Grafana&amp;rsquo;s press release here&lt;/a&gt; to hear more about this milestone.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Accessibility and open source support program with Floor Drees (k6 Office Hours #16)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210611-koh-with-floor/</link>
      <pubDate>Fri, 11 Jun 2021 22:38:52 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210611-koh-with-floor/</guid>
      <description>&lt;p&gt;On this week&amp;rsquo;s Office Hours, &lt;a href=&#34;https://simme.dev&#34;&gt;Simme&lt;/a&gt; and I were joined by &lt;a href=&#34;https://twitter.com/FloorDrees/&#34;&gt;Floor Drees&lt;/a&gt;, the newest member to join the k6 team. Every new person at k6 goes through a week of testing, and Floor decided to spend her week of testing doing an accessibility review on the k6 Cloud web app and documentation. We talk about how accessibiltiy is an often-overlooked form of operational testing, and Floor shares specific tools that testers can use to make applications more accessible.&lt;/p&gt;
&lt;p&gt;We also discuss the k6 open source support program, which makes k6 free for open-source maintainers and regular contributors.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/3jvM9JB1YZY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;resources-mentioned&#34;&gt;Resources mentioned&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://k6.io/oss-program/&#34;&gt;k6 Open Source Support Program&lt;/a&gt;
&lt;a href=&#34;https://www.boia.org&#34;&gt;Boia.org&lt;/a&gt;, a good tool for accessibility reviews
&lt;a href=&#34;https://alexjs.com&#34;&gt;AlexJS&lt;/a&gt;, for identifying inconsiderate language
&lt;a href=&#34;https://www.youtube.com/watch?v=7ASFUzRDeMg&#34;&gt;Paul Bruce&amp;rsquo;s rant&lt;/a&gt; on operational requirements instead of &amp;ldquo;non-functional&amp;rdquo; requirements
Marie Drake on &lt;a href=&#34;https://www.youtube.com/watch?v=ve7Rg0MUZ0g&#34;&gt;accessibility using Cypress&lt;/a&gt;
&lt;a href=&#34;https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh&#34;&gt;Chrome extension&lt;/a&gt; to get dark mode everywhere
Contributing Today - &lt;a href=&#34;https://www.contributing.today/april-7-oss-funding-sponsorship/oss-funding-and-sponsorship-panel-discussion/&#34;&gt;open source funding and sponsorship&lt;/a&gt;
Contributing Today - &lt;a href=&#34;https://www.contributing.today/past-sessions/open-source-licensing/&#34;&gt;on open source licensing&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Convergence of Code and Speech</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210609-convergence-of-code-and-speech/</link>
      <pubDate>Wed, 09 Jun 2021 22:23:19 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210609-convergence-of-code-and-speech/</guid>
      <description>&lt;p&gt;As part of the &lt;a href=&#34;https://www.womentech.net/en-us/women-tech-conference&#34;&gt;Women Tech Global 2021&lt;/a&gt; conference, I presented a short talk called &amp;ldquo;&lt;a href=&#34;https://www.womentech.net/speaker/Nicole/van%20der%20Hoeven/50129&#34;&gt;Convergence of Code and Speech&lt;/a&gt;&amp;rdquo;, under the theme of &amp;ldquo;Future of Work&amp;rdquo;. In hindsight, the title was a little pretentious, but what are you going to do?&lt;/p&gt;
&lt;p&gt;I haven&amp;rsquo;t gotten the recording of the live version yet, but I always like to do a recorded test run by myself, and here&amp;rsquo;s what that was like:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/sbZ3A8GrDk0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Programming code and human speech are often seen as being positioned at different ends of the spectrum. At one end, code is terse, strictly logical, and limited. On the other end, speech is unbounded and often verbose. However, the gap between the two is narrowing.&lt;/p&gt;
&lt;p&gt;Code is moving towards speech. Good code these days is code that exceeds simply being functional; good code is concise, but expressive; good code is easily comprehensible; good code refers to human concepts rather than technical components.&lt;/p&gt;
&lt;p&gt;Shrinking global borders and the internet are making collaborating on code easier than ever before, but contributors may come from different cultures and languages. Remote work has significantly increased the likelihood of a multilingual devleopment team, so code style guides have emerged that are similar to writing style guides. Artificial intelligence is learning to interpret intention, and many apps now employ fuzzy search algorithms. Our expectations for code have increased such that we now expect code to understand us even when we&amp;rsquo;re being imprecise or inaccurate. Modern programming languages like React and Python use hierarchical abstraction to hide complexity, moving towards code that prioritizes being understood over being thorough.&lt;/p&gt;
&lt;p&gt;On the other side of the spectrum, speech is also moving towards coding. Multilingual teams also encourage simplicity in written communication, removing colloquialisms and cultural references so that a more global audience can understand us. Tools like Grammarly correct for simplicity and conciseness. Verbal speech, too, is becoming increasingly programmatic with the rise of &amp;ldquo;smart&amp;rdquo; speakers and personal assistants that enforce a syntax for voice commands. Advances in artificial intelligence and machine learning have enabled us to interact with machines in natural language, and machines to interact with us back. OpenAI&amp;rsquo;s GPT-3 can produce convincingly human text about a variety of topics with little prompting. Writing tools like Notion, Roam Research, and Obsidian are growing ecosystems that mix human language with programming keywords to enable backlinks or access other features.&lt;/p&gt;
&lt;p&gt;What are the implications of this convergence of code and speech? Writers will need to learn to code, and coders will need to learn to write. The two will become synonymous, and equally essential especially for knowledge workers. Tools that enable both coding and writing will become more valuable, so it&amp;rsquo;s worth investing the time to learn them. Both code and speech have inherent linguistic or cultural biases, so using inclusive language will become even more important.&lt;/p&gt;
&lt;p&gt;What are coding and speech converging into? Their intersection is simply expressing thought. She who is able to express thought, both programmatically and naturally, will be best poised to take advantage of this convergence.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making k6 extensions using xk6, with Iván Szkiba and Mihail Stoykov (k6 Office Hours)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210604-koh-ivan/</link>
      <pubDate>Sat, 05 Jun 2021 22:28:29 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210604-koh-ivan/</guid>
      <description>&lt;p&gt;This week on k6 Office Hours, &lt;a href=&#34;https://simme.dev&#34;&gt;Simme&lt;/a&gt; and I were joined by &lt;a href=&#34;https://twitter.com/szkiba&#34;&gt;Iván Szkiba&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/MStoykov&#34;&gt;Mihail Stoykov&lt;/a&gt; to talk all about extensions. Iván, who is a System Architect at NNG LLC, is the most active k6 extension creator outside of the k6 team. Mihail is a software engineer at k6, and one third of the k6 OSS team.&lt;/p&gt;
&lt;p&gt;We talked about the many extensions Iván has created for k6 so that he can incorporate k6 into his team&amp;rsquo;s daily testing activities, his considerations for creating extensions, and how he got started. Mihail also shares some inside information on why certain decisions were made about the way k6 is structured, and common mistakes he sees people make in their custom extensions.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/I-NtzkxdzyA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>What Is Load Testing? - A real-world explanation</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210601-what-is-load-testing/</link>
      <pubDate>Tue, 01 Jun 2021 20:23:17 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210601-what-is-load-testing/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve made about 60 videos on load testing and application performance to date, but I realized that I&amp;rsquo;ve never made one defining load testing, which seemed like a glaring mistake. So, here&amp;rsquo;s my attempt!&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/cCFwqlcHkX8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Rough transcript below - though I went off script a few times:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Load testing is a key part of making sure that an application performs well and reliably. But what IS load testing, anyway? In this video, I break it down for you in simple terms. And if you&amp;rsquo;re a family member or friend of mine trying to understand what it is I do for a living, thank you! This is for you too.&lt;/p&gt;
&lt;h3 id=&#34;software-testing&#34;&gt;Software testing&lt;/h3&gt;
&lt;p&gt;It takes a whole team to build software, but some roles are more visible than others. For example, pretend you want to build a bridge. Who do you need to build it?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An architect to design the specifications of the bridge&lt;/li&gt;
&lt;li&gt;A liaison or representative to the gemeente or local council to clarify what the specifications ARE&lt;/li&gt;
&lt;li&gt;Builders who will physically build the bridge, who might need to hire subcontractors for various materials and services&lt;/li&gt;
&lt;li&gt;Someone to double-check that what you&amp;rsquo;re building is up to code (testers)&lt;/li&gt;
&lt;li&gt;Someone to manage it all, and maybe a few more levels of team leads&lt;/li&gt;
&lt;li&gt;Traffic enforcers to detour traffic away from the bridge while it&amp;rsquo;s being built&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So who is responsible for &amp;ldquo;building&amp;rdquo; the bridge? The answer is, everybody. Everybody has a part to play. Every part is important.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s the same thing with software. When we think about building software, we often think about developers, but that&amp;rsquo;s not the full picture. Just like building a bridge, it&amp;rsquo;s a team effort. But I want to zoom in on one role in particular, because it&amp;rsquo;s the role I&amp;rsquo;ve had most often: load tester.&lt;/p&gt;
&lt;p&gt;But first, let&amp;rsquo;s go on a field trip.&lt;/p&gt;
&lt;h3 id=&#34;load-testing-on-the-field&#34;&gt;Load testing on the field&lt;/h3&gt;
&lt;p&gt;Does this bridge look familar? This is the Sint Servaasbrug, and they SAY that it&amp;rsquo;s the bridge on the €10 note. It might be true, too, because it&amp;rsquo;s here in my current hometown of Maastricht, the Netherlands, where the European Union was founded in the Treaty of Maastricht. The name Maastricht means the crossing of the Maas, which is the name of this river here.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s pretend the bridge hasn&amp;rsquo;t been built yet, and that we&amp;rsquo;re helping build it. Let&amp;rsquo;s put on our load tester hats. As a load tester, it&amp;rsquo;s our job to make sure that the bridge can support the weight it is intended to support.&lt;/p&gt;
&lt;p&gt;How do we know how much weight it&amp;rsquo;s intended to support? Well, the council or the rest of the team helping us build the bridge might have some ideas on that, or some building standards that we can use. That&amp;rsquo;s a good place to start, and we should definitely discuss that with them, but as a load tester, it&amp;rsquo;s also our job to question those requirements. Let&amp;rsquo;s do some research.&lt;/p&gt;
&lt;p&gt;This is the street leading up to the bridge. Remember, the bridge isn&amp;rsquo;t built yet, but maybe we can get an idea of the kind of traffic that the area gets.&lt;/p&gt;
&lt;p&gt;Some things to watch out for or questions to answer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How many people are walking?&lt;/li&gt;
&lt;li&gt;How many are on bikes?&lt;/li&gt;
&lt;li&gt;How many are on bakfiets bikes?&lt;/li&gt;
&lt;li&gt;Are vehicles allowed on this street, and if so, how many of them drive through?&lt;/li&gt;
&lt;li&gt;Do people tend to pass by in groups, or on their own?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another thing we can do is check other bridges. This is the Hoogbrug, another bridge across the Maas river. It&amp;rsquo;s not going to be an exact match for the kind of traffic we might expect on OUR bridge, but it might give us some ideas. So we can scout this out the way we did the street near our bridge.&lt;/p&gt;
&lt;p&gt;One difference we can see right away is that this bridge has stairs on both ends. Our bridge isn&amp;rsquo;t going to have that. The stairs do have the lip to make pushing a bike up it easier, but it&amp;rsquo;s not as easy as riding through, and any heavier vehicles are out. And people are probably less likely to go up stairs than they are to walk up an incline. So we already know that this bridge will probably experience less traffic than our bridge, but it&amp;rsquo;s still good to take notes on.&lt;/p&gt;
&lt;p&gt;Okay, let&amp;rsquo;s head back home, write down our findings, and think about what we&amp;rsquo;ve learned.&lt;/p&gt;
&lt;h3 id=&#34;tying-it-back-to-software-testing&#34;&gt;Tying it back to software testing&lt;/h3&gt;
&lt;p&gt;What we learned was useful, but there are still a few things we don&amp;rsquo;t know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is 10 AM right now. But is that really the highest point of traffic during the day? To be really sure, we should really try to go back at different times. Maybe there&amp;rsquo;s an increased amount of traffic during lunch as people go to restaurants or back to their homes to eat. Maybe a horde of kids would go across our bridge after school to go home.&lt;/li&gt;
&lt;li&gt;And we should think beyond that, too. Are weekends busier because more people are out? Or are weekdays busier because people are going to and from work?&lt;/li&gt;
&lt;li&gt;Then there are some things that are seasonal. Maastricht happens to be in the part of the Netherlands that celebrates Carnaval, so sometimes that area looks like &lt;em&gt;this&lt;/em&gt;. Carnaval involves a slow parade of people, bikes, and trucks through the bridge to the central town square, called the Vrijthof. That&amp;rsquo;s absolutely something we&amp;rsquo;ll have to plan for when testing our bridge.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;rsquo;ve been talking about the bridge this whole time, but as load testers, we go through the same process for software, too. What we&amp;rsquo;ve just done on our field trip is called a workload model. A workload model is describes the load profile for a given test scenario, and it involves determining &lt;em&gt;what&lt;/em&gt; (the key transactions), &lt;em&gt;how much&lt;/em&gt; (the load distribution among the transactions) and &lt;em&gt;when&lt;/em&gt; (timing of the load) to test.&lt;/p&gt;
&lt;p&gt;For a web application, for example, like a web site, we might try to look through analytics and monitoring tools to try to determine things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How many users access our site?&lt;/li&gt;
&lt;li&gt;Which pages do they visit? Some pages are like pedestrians - they don&amp;rsquo;t have much comparative weight and aren&amp;rsquo;t complex to process. But other pages are like big old trucks, that involve many components of our application and are comparatively very intensive.&lt;/li&gt;
&lt;li&gt;When do they visit the site? Is our site the sort of site people go to to work, or to avoid work? at weekends, or during the week?&lt;/li&gt;
&lt;li&gt;Are there any seasonal events, like sales or holidays, that might drive MORE people to our site?&lt;/li&gt;
&lt;li&gt;Where are the users from? Are they in the same country that our application servers are located in, or are they quite far away? What sort of internet speeds do they have? What percentage of them use computers to access our site, and what percentage of them use tablets or mobiles?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That was just a taste of the kinds of questions a load tester has to answer during the course of testing. There&amp;rsquo;s still a lot more to cover - for starters, we haven&amp;rsquo;t even talked about how to actually RUN the tests yet! I plan to make more videos going through typical activites in load testing in more detail, but for now, I hope that gave you a good idea of what load testing is. And Mom, I hope you know what I do for a living now. :D&lt;/p&gt;
&lt;p&gt;Thanks for watching!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Application Performance Monitoring using Netdata and k6, with Odysseas Lamtzidis (k6 Office Hours)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210528-koh-odysseas/</link>
      <pubDate>Fri, 28 May 2021 23:24:48 +0200</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210528-koh-odysseas/</guid>
      <description>&lt;p&gt;This week, we had &lt;a href=&#34;https://twitter.com/odysseas_lam&#34;&gt;Odysseas Lamtzidis&lt;/a&gt; on the show to talk about &lt;a href=&#34;https://netdata.cloud&#34;&gt;Netdata&lt;/a&gt;, which is an application performance monitoring tool that prides itself on having the easiest setup ever. Odysseas admitted that it might not have all the bells and whistles of other monitoring platforms, it Just Works. I see this as being very interesting especially for testers like me, who just want to have something set up but might not want to be bothered by the implementation.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/Y2dVJssTemI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Learning how to use k6 live with Nočnica Fee from New Relic (k6 Office Hours)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210515-koh-nica/</link>
      <pubDate>Fri, 14 May 2021 21:53:09 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210515-koh-nica/</guid>
      <description>&lt;p&gt;We were happy to welcome &lt;a href=&#34;https://www.twitch.tv/serverlessmom&#34;&gt;Nočnica Fee&lt;/a&gt; from &lt;a href=&#34;https://www.twitch.tv/new_relic&#34;&gt;New Relic&lt;/a&gt; to k6 Office Hours. She very bravely volunteered to learn how to use k6&amp;ndash; live! Talk about pressure. But she handled it like a champ!&lt;/p&gt;
&lt;p&gt;We also talked about why observability is both particularly important and particularly difficult in serverless architecture. There will definitely be a part two at some point!&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/6oMmRiXzvFc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Analyzing load testing results in k6 Cloud</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210511-k6-analysis/</link>
      <pubDate>Tue, 11 May 2021 21:53:09 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210511-k6-analysis/</guid>
      <description>&lt;p&gt;Have you ever run a load test but been unable to decipher what it all means? In this video, I break it all down using k6 Cloud.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/Eia2l3bY5jU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Performance testing tool feature requests (k6 Office Hours)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210507-koh-robin-mark/</link>
      <pubDate>Fri, 07 May 2021 21:53:09 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210507-koh-robin-mark/</guid>
      <description>&lt;p&gt;We managed to get two other folks from k6 to join our Office Hours: our CEO, Robin Gustafsson, and our Head of Customer Success, Mark Meier. We took advantage of the opportunity to discuss wishlist features for k6 and bug Robin about how likely each feature was to see the light of day!&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/d8WaMOmwI3Y&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Using the k6 Cloud interface</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210504-k6-cloud-interface/</link>
      <pubDate>Tue, 04 May 2021 21:53:09 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210504-k6-cloud-interface/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve gotten the feedback that people would like to see more videos of the basics of using k6 and k6 Cloud, so here&amp;rsquo;s a video on getting situated with the k6 Cloud interface and navigation.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/gwO7k5RTE54&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>How to get started with chaos engineering (k6 Office Hours)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210430-koh-pokemon/</link>
      <pubDate>Fri, 30 Apr 2021 21:53:09 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210430-koh-pokemon/</guid>
      <description>&lt;p&gt;Recently, I&amp;rsquo;ve been learning more about chaos engineering. In this week&amp;rsquo;s k6 Office Hours, I shared my experience as a tester getting started with Kubernetes, chaos engineering with &lt;a href=&#34;https://github.com/simskij/xk6-chaos&#34;&gt;xk6-chaos&lt;/a&gt; and k6, and observability with &lt;a href=&#34;https://newrelic.com&#34;&gt;New Relic&lt;/a&gt;.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/gVwJZPo30rk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Shift-left testing and creating a culture of quality with Simon Prior (k6 Office Hours)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210423-koh-simonprior/</link>
      <pubDate>Fri, 23 Apr 2021 21:53:09 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210423-koh-simonprior/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://twitter.com/siprior&#34;&gt;Simon Prior&lt;/a&gt; from the &lt;a href=&#34;https://testingpeers.com/&#34;&gt;Testing Peers podcast&lt;/a&gt; joined us on k6 Office Hours to talk to us about how he&amp;rsquo;s managed to foster a culture of quality at his job with EasyJet.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/w4pqfr5cu_4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>The future of load testing with k6, with k6 CEO Robin Gustafsson (k6 Office Hours)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210416-koh-robin/</link>
      <pubDate>Fri, 16 Apr 2021 21:53:09 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210416-koh-robin/</guid>
      <description>&lt;p&gt;This week, &lt;a href=&#34;https://simme.dev&#34;&gt;Simme&lt;/a&gt; and I convinced k6 CEO, Robin Gustafsson, to come onto k6 Office Hours to talk about the origins of k6 (spoiler: it began with a company called Gatorhole), things we&amp;rsquo;re working on right now, and what he sees as the future of the company.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/pX6AALeD5SA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Testing Kubernetes and infrastructure as code with Sid Palas (k6 Office Hours)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210409-koh-sid/</link>
      <pubDate>Fri, 09 Apr 2021 21:53:09 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210409-koh-sid/</guid>
      <description>&lt;p&gt;For this week&amp;rsquo;s k6 Office Hours, &lt;a href=&#34;https://simme.dev&#34;&gt;Simme&lt;/a&gt; and I had &lt;a href=&#34;https://twitter.com/sidpalas&#34;&gt;Sid Palas&lt;/a&gt; from &lt;a href=&#34;https://www.youtube.com/channel/UC4MdpjzjPuop_qWNAvR23JA&#34;&gt;DevOps Directive&lt;/a&gt; come on board to talk about what Kubernetes is, how it relates to Infrastructure as Code, and why either of those should matter to testers.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/bYdDRZqRSHA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Using CircleCI and environment variables with k6 (k6 Office Hours)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210326-koh-circleci/</link>
      <pubDate>Fri, 26 Mar 2021 21:53:09 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210326-koh-circleci/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://simme.dev&#34;&gt;Simme&lt;/a&gt; and I decided to take this week to answer questions on k6 Office Hours, and we ended up talking about &lt;a href=&#34;https://circleci.com/&#34;&gt;CircleCI&lt;/a&gt;, environment variables, and how to use them with k6.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/3FyV1j3TRBk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Performance testing vs. load testing with Señor Performo and Pepe Cano (k6 Office Hours)</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210319-koh-sr-perf/</link>
      <pubDate>Fri, 19 Mar 2021 21:53:09 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210319-koh-sr-perf/</guid>
      <description>&lt;p&gt;What&amp;rsquo;s the difference between performance testing vs. load testing? This week, Simme and I were joined by &lt;a href=&#34;https://www.srperf.com/&#34;&gt;Señor Performo&lt;/a&gt;, aka Leandro Melendez, and Pepe Cano, the Head of Marketing at k6, to talk about this common question.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ZR8zgIs3he4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Load Tests as Code: An introduction to k6</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210318-load-tests-as-code/</link>
      <pubDate>Thu, 18 Mar 2021 20:36:41 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210318-load-tests-as-code/</guid>
      <description>&lt;p&gt;Today, I attended the &lt;a href=&#34;https://www.cambridge.org/&#34;&gt;Cambridge University Press&lt;/a&gt; QA Week 2021 to talk about load testing with k6. Here&amp;rsquo;s a recording of the presentation.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/kz3Mt97L9CY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;And &lt;a href=&#34;https://slides.nicolevanderhoeven.com/2021-load-tests-as-code/&#34;&gt;here are the slides&lt;/a&gt; I used!&lt;/p&gt;
&lt;p&gt;I had fun discussing the advantages of the load test as code approach and why k6 is a great way to implement it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lucky Dippers 103: Sleeping in the Isle of Skye | Portree, Scotland</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210312-lde103/</link>
      <pubDate>Fri, 12 Mar 2021 21:57:56 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210312-lde103/</guid>
      <description>&lt;p&gt;This is a travel video from January 2020, when my husband Rob and I did a roadtrip in Scotland with our good friends, Nikki and Basti Filler. This is towards the tail end of that trip, and it involved some of the best scenery I&amp;rsquo;ve ever seen. Scotland is a gorgeous country that we thoroughly enjoyed exploring, despite its awful weather. As a bonus, this was also our first trip with our new niece, Cassie.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/Q5ON39s3EfI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>k6 Office Hours 05: Observability with Daniel González Lopes</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210312-k6-office-hours05/</link>
      <pubDate>Fri, 12 Mar 2021 21:53:09 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210312-k6-office-hours05/</guid>
      <description>&lt;p&gt;Our first repeat guest, Daniel González Lopes, also from &lt;a href=&#34;https://k6.io&#34;&gt;k6&lt;/a&gt;, joined us today to talk about how to use observability in conjunction with load testing. We talked about the differences between metrics, logs, and traces, and how to implemented distributed tracing.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ADkd18AdaEA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>k6 Office Hours 04: Using Cypress with Marie Drake</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210305-k6-office-hours04/</link>
      <pubDate>Fri, 05 Mar 2021 21:46:56 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210305-k6-office-hours04/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mariedrake.com&#34;&gt;Marie Drake&lt;/a&gt; joined us today on k6 Office Hours to talk about front-end performance testing using a test tool called &lt;a href=&#34;https://cypress.io&#34;&gt;Cypress&lt;/a&gt; and how it can compliment a back-end performance testing strategy.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ve7Rg0MUZ0g&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>k6 Office Hours 03: Chaos Engineering with Daniel González Lopes</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210226-k6-office-hours03/</link>
      <pubDate>Fri, 26 Feb 2021 21:40:25 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210226-k6-office-hours03/</guid>
      <description>&lt;p&gt;In this week&amp;rsquo;s Office Hours, &lt;a href=&#34;https://simme.dev&#34;&gt;Simme&lt;/a&gt; and I invited Daniel González Lopes, a DevOps engineer from &lt;a href=&#34;https://k6.io&#34;&gt;k6&lt;/a&gt;, to join us to talk about chaos engineering and what it has to do with load testing. Simme also demonstrated how to use k6 to run simple chaos experiments.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/WrDV8iIdCy8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>k6 Office Hours 02: Observability with New Relic</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210219-office-hours-02/</link>
      <pubDate>Fri, 19 Feb 2021 23:24:58 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210219-office-hours-02/</guid>
      <description>&lt;p&gt;For this week&amp;rsquo;s Office Hours, &lt;a href=&#34;https://simme.dev&#34;&gt;Simme&lt;/a&gt; and I invited &lt;a href=&#34;https://twitter.com/gspncr&#34;&gt;Gary Spencer&lt;/a&gt; from &lt;a href=&#34;https://newrelic.com&#34;&gt;New Relic&lt;/a&gt; to talk to us about why he&amp;rsquo;s recently started using k6, and why an observability platform like New Relic is the perfect companion for performance testing and observability.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/TbRVFTXGUPU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>The 503 Podcast</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210211-503-podcast/</link>
      <pubDate>Thu, 11 Feb 2021 21:46:35 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210211-503-podcast/</guid>
      <description>&lt;p&gt;This must be the month for trying new things, because I jumped into livestreaming with the first ever &lt;a href=&#34;https://nicolevanderhoeven.github.io/blog/20210205-k6-office-hours&#34;&gt;k6 Office Hours&lt;/a&gt; just a week ago, and this week I&amp;rsquo;m jumping into podcasting with &lt;a href=&#34;https://simme.dev&#34;&gt;Simme Aronsson&lt;/a&gt;, who&amp;rsquo;s also doing the Office Hours with me. There&amp;rsquo;s definitely safety (at least psychological safety) in numbers, because doing it with someone else makes me feel a little more brave.&lt;/p&gt;
&lt;p&gt;While the podcast is presented by &lt;a href=&#34;https://k6.io&#34;&gt;k6&lt;/a&gt;, that&amp;rsquo;s really just a fancy term for saying that we&amp;rsquo;re both employed by k6 and we&amp;rsquo;re recording and producing the podcast on company time. Unlike the Office Hours, which is heavily k6-focused, the podcast will be about software performance and reliability in general. Simme and I happen to have different and complementary skillsets (he comes from a developer background, and I come from a testing background, and I think that makes for an interesting combination of perspectives.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the first episode! It should also be available on your audio podcasting tool of choice.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/JEpLfLWP4YY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>The first ever k6 Office Hours</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210205-k6-office-hours/</link>
      <pubDate>Fri, 05 Feb 2021 21:47:16 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210205-k6-office-hours/</guid>
      <description>&lt;p&gt;The k6 virtual office is open!&lt;/p&gt;
&lt;p&gt;The first time I heard about office hours was from &lt;a href=&#34;https://www.notion.so/&#34;&gt;Notion&lt;/a&gt;. Recently, &lt;a href=&#34;https://obsidian.md&#34;&gt;Obsidian&lt;/a&gt; went in on this trend as well. The concept involves opening your virtual doors regularly to your community, to answer questions and share best practices.&lt;/p&gt;
&lt;p&gt;A big part of being a Developer Advocate is talking &lt;em&gt;to&lt;/em&gt; people, and even conferences these days are mostly pre-recorded. I kind of miss being able to interact &lt;em&gt;with&lt;/em&gt; people. I miss the immediacy of &lt;em&gt;live&lt;/em&gt;. So I talked &lt;a href=&#34;https://simme.dev&#34;&gt;Simme Aronsson&lt;/a&gt; into doing a k6 Office Hours with me.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re both new to livestreaming, so there&amp;rsquo;s a lot that we&amp;rsquo;ve learned and will be improving in future videos, but here&amp;rsquo;s our first attempt!&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/bZsWn5ckzVM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Comparing k6 and JMeter for load testing</title>
      <link>https://nicolevanderhoeven.github.io/blog/20210129-k6-vs-jmeter/</link>
      <pubDate>Fri, 29 Jan 2021 23:01:18 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20210129-k6-vs-jmeter/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://k6.io/blog/k6-vs-jmeter&#34;&gt;

&lt;p&gt;&lt;em&gt;Originally posted on &lt;a href=&#34;https://k6.io/blog/k6-vs-jmeter&#34;&gt;k6.io&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/noZppBruOSY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;When I &lt;a href=&#34;https://www.youtube.com/watch?v=zcYeboT5FYE&amp;amp;list=PLJdv3RhAQXNHsC8OOV3ZjwZvC9tRoAYF2&#34;&gt;joined the k6 team in late November&lt;/a&gt;, the foremost question on my mind was &amp;ldquo;How does this compare to JMeter?&amp;rdquo; You see, I come from a performance testing consulting background, and in the last few years, JMeter has been far and away my tool of choice.&lt;/p&gt;
&lt;p&gt;So what am I doing on the k6 site, talking about how much I love JMeter? Well, firstly, it turns out that the k6 team is pretty open and transparent, especially about potential improvements in k6. Secondly, I want to share my reasons for wanting to explore k6 as a load testing tool&amp;ndash; the same reasons that ultimately convinced me to join the team that builds it.&lt;/p&gt;
&lt;h2 id=&#34;what-is-jmeter&#34;&gt;What is JMeter?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jmeter.apache.org/&#34;&gt;JMeter&lt;/a&gt; is an open source load testing tool built entirely in Java by the &lt;a href=&#34;https://www.apache.org/&#34;&gt;Apache Foundation&lt;/a&gt;. It was first released in 1998, and it made waves because of its audacity in taking on more popular but proprietary load testing tools. JMeter took what other companies were charging a lot of money for and published it online for everyone to use&amp;ndash; for free. Although scripts can also be extended using code, majority of the scripting in JMeter is done using the UI. At the time of this writing, the latest version of JMeter is 5.4.&lt;/p&gt;
&lt;h2 id=&#34;what-is-k6&#34;&gt;What is k6?&lt;/h2&gt;
&lt;p&gt;k6 is an &lt;a href=&#34;https://github.com/loadimpact/k6&#34;&gt;open source&lt;/a&gt; load testing tool released by &lt;a href=&#34;https://loadimpact.com&#34;&gt;LoadImpact&lt;/a&gt; in 2017. LoadImpact had previously consisted of the SaaS platform (now &lt;a href=&#34;https://k6.io/cloud&#34;&gt;k6 Cloud&lt;/a&gt;) and professional services. k6 is written in Go, but scripts are written in Javascript. Taking the opposite tack to JMeter, k6&amp;rsquo;s main selling point is its code-based scripting and heavy prioritization of the developer experience. The latest version of k6 is 0.30.&lt;/p&gt;
&lt;h2 id=&#34;which-is-better&#34;&gt;Which is better?&lt;/h2&gt;
&lt;p&gt;This article isn&amp;rsquo;t about which tool is &lt;em&gt;better&lt;/em&gt;, because as much as we might prefer a clear-cut answer, there&amp;rsquo;s no &amp;ldquo;best tool&amp;rdquo;. Everything depends on the situation your team is in: what, how, why, and when you&amp;rsquo;re testing.&lt;/p&gt;
&lt;p&gt;The question that I want to answer here is: &lt;em&gt;What situations does each tool excel in?&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;when-does-jmeter-excel&#34;&gt;When does JMeter excel?&lt;/h1&gt;
&lt;h2 id=&#34;when-you-want-to-get-started-quickly&#34;&gt;When you want to get started quickly&lt;/h2&gt;
&lt;h3 id=&#34;jmeter-has-a-gui&#34;&gt;JMeter has a GUI&lt;/h3&gt;
&lt;p&gt;Many testing teams make decisions on load testing tools based on this fact alone. Sometimes, if you&amp;rsquo;re in a situation where people haven&amp;rsquo;t done load testing before and need to learn a new tool, a GUI-driven tool like JMeter is simply the most frictionless option. A tool with a GUI will be less daunting for many testers that are used to the mostly no-code UIs of the likes of Postman or SOAPUI.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/01-jmetergui.png&#34; alt=&#34;JMeter&amp;rsquo;s starting screen: a fresh new test plan&#34;&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve always thought of JMeter as user-friendly, but a developer friend recently pointed out that the Test Plan screen that greets you when you first start JMeter doesn&amp;rsquo;t provide any indication of how to create an HTTP sampler. None of the icons add elements to the test plan. It takes a bit of exploring to realize that right clicking on the test plan, or going to Edit &amp;gt; Add, will show the &amp;ldquo;Add&amp;rdquo; menu that you need. He has a point there: UI is subjective to a certain degree. However, I&amp;rsquo;d argue that it&amp;rsquo;s definitely easier for non-developers to explore a UI than a bit of code.&lt;/p&gt;
&lt;p&gt;k6 doesn&amp;rsquo;t have a GUI packaged within the tool, but the &lt;a href=&#34;https://k6.io/docs/test-authoring/test-builder&#34;&gt;k6 Test Builder&lt;/a&gt; is available for free. It&amp;rsquo;s a way to create tests with a GUI interface, and despite its inclusion in k6 cloud, it doesn&amp;rsquo;t require any subscription to use. However, it isn&amp;rsquo;t as fully-featured as JMeter.&lt;/p&gt;
&lt;h3 id=&#34;jmeter-supports-many-protocols-and-features-out-of-the-box&#34;&gt;JMeter supports many protocols and features out of the box&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s &lt;a href=&#34;https://jmeter.apache.org/index.html&#34;&gt;the official list&lt;/a&gt; of the protocols that JMeter supports:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web - HTTP, HTTPS (Java, NodeJS, PHP, ASP.NET, …)&lt;/li&gt;
&lt;li&gt;SOAP / REST Webservices&lt;/li&gt;
&lt;li&gt;FTP&lt;/li&gt;
&lt;li&gt;Database via JDBC&lt;/li&gt;
&lt;li&gt;LDAP&lt;/li&gt;
&lt;li&gt;Message-oriented middleware (MOM) via JMS&lt;/li&gt;
&lt;li&gt;Mail - SMTP(S), POP3(S) and IMAP(S)&lt;/li&gt;
&lt;li&gt;Native commands or shell scripts&lt;/li&gt;
&lt;li&gt;TCP&lt;/li&gt;
&lt;li&gt;Java Objects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In contrast, k6 supports the following protocols:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web - HTTP/1.1, &lt;a href=&#34;https://k6.io/docs/using-k6/protocols/http-2&#34;&gt;HTTP/2&lt;/a&gt; (Java, NodeJS, PHP, ASP.NET, …)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://k6.io/docs/using-k6/protocols/websockets&#34;&gt;WebSockets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://k6.io/docs/using-k6/protocols/grpc&#34;&gt;gRPC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SOAP / REST Webservices&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The protocols above are those that are natively supported. However, both tools allow the development of third-party plugins, adding support for more protocols. The number of &lt;a href=&#34;https://github.com/topics/xk6&#34;&gt;k6 community extensions&lt;/a&gt;, through &lt;a href=&#34;https://k6.io/blog/extending-k6-with-xk6&#34;&gt;xk6&lt;/a&gt;, is growing, but &lt;a href=&#34;https://jmeter-plugins.org/&#34;&gt;JMeter plugins&lt;/a&gt; still outnumber them. In many cases, the protocols your application uses may make the decision for you of which tool to use.&lt;/p&gt;
&lt;p&gt;JMeter also has most of the features you&amp;rsquo;ll need for a basic load test, and you don&amp;rsquo;t have to code any of it up yourself. Its parent-child element structure means that you can modify a specific element, like an HTTP request, or modify all HTTP requests, with equal ease. Adding think time to all requests is as easy as adding a Uniform Random Timer to your thread group, and all requests within that group will inherit it.
With code-based load testing tools, it can be a bit more difficult to find out what&amp;rsquo;s possible without a UI. Some of the gap, however, can be bridged by an IDE with good autocompletion.&lt;/p&gt;
&lt;h2 id=&#34;when-you-want-a-mature-community-with-tons-of-documentation&#34;&gt;When you want a mature community with tons of documentation&lt;/h2&gt;
&lt;p&gt;JMeter&amp;rsquo;s old, and sometimes that&amp;rsquo;s a good thing. It&amp;rsquo;s been around since 1998, so at this point, it&amp;rsquo;s had 22 years to improve and to build a following. JMeter has a presence on nearly every community networking site, and no matter how specific your use case for JMeter is, the chances are that it&amp;rsquo;s been done before. Searching &amp;ldquo;how to load test X with JMeter&amp;rdquo; is bound to yield thousands of hits and some videos showing you exactly how to do it.&lt;/p&gt;
&lt;p&gt;JMeter&amp;rsquo;s &lt;a href=&#34;https://jmeter.apache.org/usermanual/component_reference.html&#34;&gt;Component Reference&lt;/a&gt; is proof of JMeter&amp;rsquo;s extensive and thorough documentation. Every element, function, and property is discussed in more detail than most people could ever want, and that&amp;rsquo;s just the &amp;ldquo;official&amp;rdquo; documentation that&amp;rsquo;s on the Apache site. There are thousands of JMeter books, tutorials, and courses by its passionate users.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/apache/jmeter&#34;&gt;JMeter GitHub repository&lt;/a&gt; has 17,290 commits as of December 2020 - evidence of a community of developers that have committed some time and experience to JMeter over the last two decades.&lt;/p&gt;
&lt;p&gt;In comparison, the k6 community is growing, but still small. There is an official and &lt;a href=&#34;https://community.k6.io/&#34;&gt;central community forum&lt;/a&gt; that allows users to share their experiences with k6, which is something missing from the JMeter community. The &lt;a href=&#34;https://github.com/loadimpact/k6&#34;&gt;k6 repository&lt;/a&gt; does have more stars, but significantly fewer commits at 3,795. Much of the disparity, of course, is because k6 is very new - the open-source tool k6 was only released in 2017.&lt;/p&gt;
&lt;h2 id=&#34;when-you-need-a-cost-effective-way-to-do-distributed-load-testing&#34;&gt;When you need a cost-effective way to do distributed load testing&lt;/h2&gt;
&lt;p&gt;One of JMeter&amp;rsquo;s absolute best features is that it gives you a framework for running distributed load tests with it. This is pretty special for a free and open-source tool.&lt;/p&gt;
&lt;p&gt;Distributed testing means ramping up the amount of load you&amp;rsquo;re generating with your load tests, usually by increasing the number of virtual users and running multiple instances of your script on other load generators. JMeter accomplishes this by designating a controller node and letting you set up worker nodes. Each worker node needs to have a copy of &lt;code&gt;jmeter-server&lt;/code&gt;, a utility included with every JMeter installation (in &lt;code&gt;jmeter/bin&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/02-jmeterdistributed.svg&#34; alt=&#34;JMeter comes with a native distributed testing mode&#34;&gt;&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.html&#34;&gt;Apache JMeter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These worker nodes then run copies of your test plan and exert load against your application server. You can use on-premise or cloud machines as your worker nodes. A distributed execution like this takes a bit to set up, but it does work surprisingly well.&lt;/p&gt;
&lt;p&gt;k6 doesn&amp;rsquo;t have a &lt;em&gt;native&lt;/em&gt; distributed load testing mode. You &lt;em&gt;can&lt;/em&gt; containerize it yourself and deploy it via Kubernetes, for instance, but it does require a more involved setup. The team is also working on the &lt;a href=&#34;https://github.com/k6io/operator&#34;&gt;k6 Operator&lt;/a&gt;, which makes setup significantly easier, but it is experimental and comes with drawbacks such as not supporting threshold synchronization between instances. For now, the easiest way to scale up on k6 is by using the paid service k6 Cloud, which reduces setup time and complexity significantly.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to note that JMeter can be quite resource-hungry, and thus is more likely to require multiple load generators to generate load than k6. Depending on the resources of the load generator, JMeter can run about a thousand virtual users on average, and scaling up your test beyond that point will require a distributed execution setup. A single instance of k6, on the other hand, can run tens of thousands of virtual users given the same resources. More on that later.&lt;/p&gt;
&lt;h2 id=&#34;when-you-want-canned-reports-built-into-your-load-testing-tool&#34;&gt;When you want canned reports built into your load testing tool&lt;/h2&gt;
&lt;p&gt;JMeter&amp;rsquo;s many listeners allow you to decide exactly what format you want to view results in. Debugging? Use the View Results Tree. Wanting metrics for your load test? Use the Summary or Aggregate Report.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/03-jmeterlistener.png&#34; alt=&#34;Adding listeners like View Results Tree in JMeter lets you visualize results in different ways&#34;&gt;&lt;/p&gt;
&lt;p&gt;In addition, JMeter can generate HTML reports based on your load tests. They&amp;rsquo;re currently quite limited, but functional, and they have several default graphs to help you analyze your load test. They are not interactive, but they are pretty easy to generate and a good starting point for putting together a report template for your tests.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/04-jmeterhtmlreport.png&#34; alt=&#34;JMeter&amp;rsquo;s built-in HTML dashboard is limited but functional&#34;&gt;&lt;/p&gt;
&lt;p&gt;k6 does not have built-in reporting. Its modular nature lends itself better to integrating with &lt;a href=&#34;https://k6.io/docs/results-visualization&#34;&gt;many other data analytics tools&lt;/a&gt;, including Grafana, Datadog, New Relic, Amazon CloudWatch, and k6 Cloud&amp;ndash; all of which are better analysis tools and can provide more insights than what JMeter&amp;rsquo;s reports can provide, but they do require you to set up another tool to analyze your tests. If you&amp;rsquo;re running low on time and can make do with its reports, JMeter does really well at providing that extra value out of the box.&lt;/p&gt;
&lt;h1 id=&#34;when-does-k6-excel&#34;&gt;When does k6 excel?&lt;/h1&gt;
&lt;h2 id=&#34;when-you-want-to-get-started-quickly-1&#34;&gt;When you want to get started quickly&lt;/h2&gt;
&lt;p&gt;Yup, I put this one in both the JMeter and k6 sections. JMeter and k6 can each be easy to get started with, but for very different reasons.&lt;/p&gt;
&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;
&lt;p&gt;k6 installs extremely quickly - on my first installation of it on macOS, it took &lt;a href=&#34;https://www.youtube.com/watch?v=y5tteMKZUqk&amp;amp;t=99&#34;&gt;7 seconds&lt;/a&gt; via &lt;code&gt;brew install k6&lt;/code&gt;. It doesn&amp;rsquo;t require nodeJS or any other dependencies, either.&lt;/p&gt;
&lt;p&gt;JMeter itself is fairly easy to install, but before you install JMeter, you need to install Java. Especially if you&amp;rsquo;re using Windows, it&amp;rsquo;s a bit of a rite of passage for a new JMeter user to run into issues adding the environment variables needed for Java to function.&lt;/p&gt;
&lt;p&gt;It can also be confusing to determine which version of Java is the right one. There&amp;rsquo;s JDK, JRE, and recently Oracle has added to the confusion by announcing that some versions of Java (but not all) are going to require a license.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/05-javalicense.png&#34; alt=&#34;Oracle&amp;rsquo;s changing Java licensing can cause confusion for JMeter users&#34;&gt;&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://java.com/en/download/&#34;&gt;Oracle Java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While JMeter is still free via OpenJDK, I&amp;rsquo;ve spoken to a few testers who mistakenly thought they&amp;rsquo;d have to pay for JMeter. It&amp;rsquo;s a little disconcerting to see Oracle flexing its muscles here, especially if you&amp;rsquo;ve built a whole performance testing suite on Java through JMeter.&lt;/p&gt;
&lt;h3 id=&#34;plugins&#34;&gt;Plugins&lt;/h3&gt;
&lt;p&gt;k6 &lt;a href=&#34;https://k6.io/blog/extending-k6-with-xk6&#34;&gt;supports plugins&lt;/a&gt;, but they&amp;rsquo;re not necessary. For most use cases, k6&amp;rsquo;s built-in functionality should be more than sufficient. This is in sharp contrast to JMeter, where everything is a plugin &amp;hellip; even the &lt;a href=&#34;https://jmeter-plugins.org/wiki/PluginsManager/&#34;&gt;Plugin Manager&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Most JMeter users would argue that there is a standard set of plugins that you should download before you even begin to use it. A new JMeter user might not necessarily know where to find these and may have a less-than-satisfying experience out of the box.&lt;/p&gt;
&lt;p&gt;Here are a few things you &lt;em&gt;won&amp;rsquo;t&lt;/em&gt; have if you stick to a vanilla, no-plugin JMeter installation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thread groups: No custom load profile, stages, rendezvous&lt;/li&gt;
&lt;li&gt;Controllers: No parallel controller to execute requests in parallel&lt;/li&gt;
&lt;li&gt;Samplers: No HTTP/2 support&lt;/li&gt;
&lt;li&gt;Test Data: No randomization of lines within a CSV file (sequential only)&lt;/li&gt;
&lt;li&gt;Timers: No throughput shaping timer for setting throughput in stages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These functions are all available within k6 from the get-go.&lt;/p&gt;
&lt;h3 id=&#34;scripting&#34;&gt;Scripting&lt;/h3&gt;
&lt;p&gt;k6 scripts are written in javascript, making them simple to write and run. All you need is one installer (on Microsoft Windows) or a single command on your terminal and any text editor. For JMeter, you&amp;rsquo;ll need to install a few things locally before you can get started: Java, JMeter itself, and the standard set of plugins you&amp;rsquo;ll need. This can be confusing for new users. Who hasn&amp;rsquo;t struggled with environment variables at some point when learning to use JMeter, especially on Windows?&lt;/p&gt;
&lt;p&gt;It also takes time to learn any new UI, whereas javascript is near-ubiquitous and it&amp;rsquo;s a good language to learn when you&amp;rsquo;re load testing web sites anyway.&lt;/p&gt;
&lt;h2 id=&#34;when-you-want-to-maximize-performance-and-efficiency&#34;&gt;When you want to maximize performance and efficiency&lt;/h2&gt;
&lt;h3 id=&#34;test-your-test-tools&#34;&gt;Test your test tools!&lt;/h3&gt;
&lt;p&gt;Why does all this matter?&lt;/p&gt;
&lt;p&gt;When we&amp;rsquo;re talking about simulating many virtual users, slow performance = high cost. There is a cost to the number of load generators you use, whether it&amp;rsquo;s the cost to acquire and maintain them (on-prem) or the cost of a cloud service.&lt;/p&gt;
&lt;p&gt;It makes sense to consider the performance limitations of your load testing tool before you use it to improve your own application&amp;rsquo;s performance.&lt;/p&gt;
&lt;h3 id=&#34;k6-builds-on-gos-stellar-performance&#34;&gt;k6 builds on Go&amp;rsquo;s stellar performance&lt;/h3&gt;
&lt;p&gt;k6 is written in Go, and Go is built with performance in mind. &amp;ldquo;Go is a compiled language and does not need to be interpreted, unlike Java or Python. There is no added layer of complexity.&amp;rdquo; It also has no external dependencies, which is a good thing. Fewer moving parts for a performance tester means fewer potential sources of a bottleneck.&lt;/p&gt;
&lt;p&gt;The simplest and most common way for a load testing tool to run a virtual user is to assign one virtual user to one kernel or OS thread. However, the 1 Thread: 1 Virtual User paradigm has a serious flaw: when a virtual user is waiting for a response or executing a programmed &lt;code&gt;sleep()&lt;/code&gt;, the thread is also blocked, and cannot process other work.&lt;/p&gt;
&lt;p&gt;In k6, each virtual user is run on a goroutine, not a thread. What difference does that make? Well, goroutines can be controlled by something called the Go Scheduler, which acts like a traffic cop. It reuses idle threads and intelligently assigns work, by allowing &amp;ldquo;work stealing&amp;rdquo; and work hand-offs between threads. Does this sound familiar? This is the same principle that load balancers are built on: An external monitor that oversees the flow of work improves general performance. Go itself is intrinsically load-balanced in a way that many programming languages aren&amp;rsquo;t, which makes it the perfect foundation for a load testing tool.&lt;/p&gt;
&lt;p&gt;Being able to leverage Go&amp;rsquo;s innate performance optimizations also translates into significantly less memory utilization. One thread running k6 doesn&amp;rsquo;t go above 100 kb, whereas a JVM thread like JMeter uses, for instance, &lt;a href=&#34;https://www.baeldung.com/jvm-configure-stack-sizes&#34;&gt;uses the default of 1MB&lt;/a&gt;. That&amp;rsquo;s 1000% more than k6! Of course, Java allows a user to tweak an app&amp;rsquo;s memory utilization, so the difference is usually not quite as stark, but it&amp;rsquo;s still interesting to note that Go has a much lower starting point.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; creating [a] new thread in Java is not memory efficient. As every thread consumes approx 1MB of the memory heap size and eventually if you start spinning thousands of threads, they will put tremendous pressure on the heap and will cause shut down due to out of memory. Also, if you want to communicate between two or more threads, it’s very difficult. - &lt;a href=&#34;https://medium.com/@kevalpatel2106/why-should-you-learn-go-f607681fad65&#34;&gt;Keval Patel&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;performance-benefits-in-practice&#34;&gt;Performance benefits in practice&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fewer load generators needed&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;k6&amp;rsquo;s comparatively better performance means it needs fewer load generators to execute a given amount of load. Rafaela Azevedo made a comparison of the memory used by k6 and JMeter, and &lt;a href=&#34;https://azevedorafaela.com/2020/07/06/load-tests-jmeter-vs-k6/&#34;&gt;here are her results&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;JMeter took up 760 MB of memory.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/06-jmeterbenchmark.png&#34; alt=&#34;In an independent test by Rafaela Azevedo, JMeter took up 760 MB of memory&#34;&gt;&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://azevedorafaela.com/2020/07/06/load-tests-jmeter-vs-k6/&#34;&gt;Rafaela Azevedo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Meanwhile, k6 took up 256 MB of memory.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/07-k6benchmark.png&#34; alt=&#34;In an independent test by Rafaela Azevedo, k6 took up 256 MB of memory compared to JMeter&amp;rsquo;s 760 MB for the same test&#34;&gt;&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://azevedorafaela.com/2020/07/06/load-tests-jmeter-vs-k6/&#34;&gt;Rafaela Azevedo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rafaela&amp;rsquo;s findings are further affirmed by our own benchmarks.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/08-internalbenchmarks.png&#34; alt=&#34;A comparison of maximum throughput and memory for the most popular open-source load testing tools&#34;&gt;&lt;/p&gt;
&lt;p&gt;Source: Ragnar Lönn, in our &lt;a href=&#34;https://k6.io/blog/comparing-best-open-source-load-testing-tools&#34;&gt;Load Testing Tool Comparison&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;k6&amp;rsquo;s lower memory footprint is the reason it can run more virtual users and generate more load than average. Whether you&amp;rsquo;re using load generators that are on-premise or in a cloud, you&amp;rsquo;ll pay less for provisioning costs when using k6. This cost saving makes k6 a great tool for budget-conscious teams.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The common misconception of many load testers is that distributed execution (ability to launch a load test on multiple machines) is required to generate large load. This is not the case with k6. - &lt;a href=&#34;https://azevedorafaela.com/2020/07/06/load-tests-jmeter-vs-k6/&#34;&gt;Rafaela Azevedo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;k6 is different from many other load testing tools in the way it handles hardware resources. A single k6 process will efficiently use all CPU cores on a load generator machine. A single instance of k6 is often enough to generate load of 30.000-40.000 simultaneous users (VUs). This amount of VUs can generate upwards of 300,000 requests per second (RPS).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unless you need more than 100,000-300,000 requests per second (6-12M requests per minute), a single instance of k6 will likely be sufficient for your needs. - &lt;a href=&#34;https://k6.io/docs/testing-guides/running-large-tests&#34;&gt;k6 documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;No out of memory errors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;k6 is also good for when you&amp;rsquo;re short on time. Using JMeter means getting familiar with how to performance tune Java and how to fix the &lt;a href=&#34;https://www.eginnovations.com/blog/top-10-java-performance-problems/&#34;&gt;most common Java performance problems&lt;/a&gt;, because there are several. The one that I&amp;rsquo;ve personally run into the most while using JMeter is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ERROR - jmeter.threads.JMeterThread: Test failed! java.lang.OutOfMemoryError: 
Java heap space. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You&amp;rsquo;re not really a JMeter load tester until you&amp;rsquo;ve seen this error. :)&lt;/p&gt;
&lt;p&gt;The cause for this error is usually that there was an insufficient amount of Heap memory allocated to JMeter. Yup&amp;ndash; in addition to monitoring your load generator&amp;rsquo;s memory usage, you&amp;rsquo;ll also need to monitor the JVM&amp;rsquo;s memory usage. You can set the amount of heap memory allocated to JMeter by modifying the JMeter binary itself and changing this line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; This is the base heap size &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; you may increase or decrease it to fit your
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; system&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;s memory availability&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${HEAP:=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Xms1g &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Xmx1g &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;XX&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;MaxMetaspaceSize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;256m&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Even JMeter official documentation suggests that you increase the Java Heap size beyond 1GB before you even run your first load test.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Increase the Java Heap size. By default JMeter runs with a heap of 1 GB, this might not be enough for your test and depends on your test plan and number of threads you want to run - &lt;a href=&#34;https://jmeter.apache.org/usermanual/get-started.html&#34;&gt;Apache JMeter&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;No GUI means no resource overhead during load tests&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;GUIs typically add significantly more overhead to an application, which is one of the reasons why k6 doesn&amp;rsquo;t have one.&lt;/p&gt;
&lt;p&gt;When you&amp;rsquo;re running a load test, the best practice is to run it from the command line anyway&amp;ndash; because otherwise, it interferes with your results. Code-based load testing tools are performant from the beginning.&lt;/p&gt;
&lt;p&gt;JMeter is peppered with warnings about the GUI&amp;rsquo;s effect on performance. Here&amp;rsquo;s one from the &amp;ldquo;JMeter documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t run load test using GUI mode ! - &lt;a href=&#34;https://jmeter.apache.org/usermanual/get-started.html&#34;&gt;Apache JMeter&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And here&amp;rsquo;s a message that occurs upon startup of JMeter:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/09-jmeterguimodewarning.png&#34; alt=&#34;JMeter&amp;rsquo;s startup screen warns users not to use the GUI mode for load testing&#34;&gt;&lt;/p&gt;
&lt;p&gt;Not having a GUI means there&amp;rsquo;s one less gotcha. Any load testing scripts you create in k6 are ready for prime-time execution whenever you&amp;rsquo;re ready.&lt;/p&gt;
&lt;h2 id=&#34;when-you-want-to-do-goal-oriented-testing&#34;&gt;When you want to do goal-oriented testing&lt;/h2&gt;
&lt;p&gt;The most important question a load tester can ask when starting a new load testing project is &amp;ldquo;Why&amp;rdquo;?
Test plans should be made to directly address a team&amp;rsquo;s reasons for wanting to do load testing, and that should be reflected in the non-functional requirements. Non-functional requirements, in turn, should then give some guidance as to the bounds of acceptable performance. A common example for these bounds, or thresholds, is an average response time of less than 3 seconds for all transactions during the test.
k6 does this natively with &lt;a href=&#34;https://k6.io/docs/using-k6/thresholds&#34;&gt;global thresholds&lt;/a&gt; worked into the script, and you can also create your own metric to use in a threshold:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;k6/http&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;Rate&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;k6/metrics&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;myFailRate&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Rate&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;failed requests&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;thresholds&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;failed requests&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rate&amp;lt;0.1&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#75715e&#34;&gt;// threshold on a custom metric
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;http_req_duration&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p(95)&amp;lt;500&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#75715e&#34;&gt;// threshold on a standard metric
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  },
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://test-api.k6.io/public/crocodiles/1/&amp;#39;&lt;/span&gt;);
  &lt;span style=&#34;color:#a6e22e&#34;&gt;myFailRate&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Source: &lt;a href=&#34;https://k6.io/docs/using-k6/thresholds&#34;&gt;k6 documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JMeter doesn&amp;rsquo;t natively support thresholds at the test-level. There are a few ways that I&amp;rsquo;ve been able to work around this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Duration Assertion&lt;/strong&gt;: You can add a Duration Assertion to any sampler in JMeter, which allows you set an acceptable response time for that request in milliseconds, beyond which the request (and the transaction that encompasses it) would be marked as failed. However, this is still just at the individual request level, and even putting the duration assertion element at the Test Plan level only applies the same threshold to each child request. It doesn&amp;rsquo;t constitute pass/fail criteria for the test as a whole.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Timers&lt;/strong&gt;: For criteria related to throughput, you can use the Constant Throughput Timer or the Throughput Shaping Timer (plugin). This approach controls how many requests per second are spent. In my experience, it&amp;rsquo;s worth testing how these timers behave when using nested transaction controllers - it may take some rearranging to get right.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Performance Plugin&lt;/strong&gt;: When integrating JMeter with Jenkins, you can use the Performance Plugin to set error thresholds and mark test runs (&amp;ldquo;builds&amp;rdquo;) as unstable or failed within Jenkins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Custom Code&lt;/strong&gt;: You can use the JSR223 Sampler to write a bit of Groovy or BeanShell code that collects and parses response metrics.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem is that even though these options make setting thresholds possible in JMeter, they&amp;rsquo;re still workarounds that don&amp;rsquo;t come with JMeter out of the box or don&amp;rsquo;t adequately address the creation of different types of thresholds (error, response time, throughput, CPU, memory). What I end up doing, more often than not, is exporting the raw data from JMeter and doing the analysis myself using another tool.&lt;/p&gt;
&lt;h2 id=&#34;when-youre-part-of-a-team-of-scripters&#34;&gt;When you&amp;rsquo;re part of a team of scripters&lt;/h2&gt;
&lt;p&gt;k6 shines in situations where more than one person could be doing the scripting.&lt;/p&gt;
&lt;h3 id=&#34;it-strikes-a-middle-ground-that-developers-and-testers-can-compromise-on&#34;&gt;It strikes a middle ground that developers and testers can compromise on&lt;/h3&gt;
&lt;p&gt;Software quality should not be the sole responsibility of testers; quality should be baked into every activity when building software. One of the challenges in implementing this concept, however, is that there has traditionally been a segmentation in tools and languages used by team members with different functions. Developers use one tool; testers use another. It&amp;rsquo;s difficult to encourage developers to test and testers to code in this environment, and many testing tools only further encourage this divide. A developer can&amp;rsquo;t use a tool like JMeter for anything but testing, so the incentive to invest the effort in learning it is lower.&lt;/p&gt;
&lt;p&gt;k6 bridges the gap by bringing testing concepts and features to an environment and language that developers are already spending their time in. Javascript is useful for more than just writing load testing scripts, and k6 works well with any IDE or text editor. A frictionless developer experience is central to the k6 philosophy.&lt;/p&gt;
&lt;h3 id=&#34;its-easier-to-collaborate-on-scripts&#34;&gt;It&amp;rsquo;s easier to collaborate on scripts&lt;/h3&gt;
&lt;p&gt;Once you&amp;rsquo;ve convinced both devs and testers to contribute to load testing scripts, how do you keep track of changes? How do you manage scripts that multiple people are working on at the same time?
With tests as code, the easiest way is to just use versioning tools like Git, the way you probably are already using for your application code. Again, no new framework or processes to learn here.
k6&amp;rsquo;s conciseness and portability really proves to be an advantage in collaboration situations. To illustrate this, let&amp;rsquo;s consider a simple test script that contains a few things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A GET request to &lt;a href=&#34;https://test.k6.io&#34;&gt;our test site&lt;/a&gt;, &lt;code&gt;https://test.k6.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A transaction that calls this request &lt;code&gt;01_Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A check to fail non-HTTP 200 responses or responses that don&amp;rsquo;t have the text &lt;code&gt;Collection of simple web-pages suitable for load testing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Variable think time&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;ll just run that as a single user, for a single iteration. Here&amp;rsquo;s what that script looks like in k6:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;k6/http&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;k6&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://test.k6.io&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#a6e22e&#34;&gt;tags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;01_Home&amp;#39;&lt;/span&gt; }});
    &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;is status 200&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text verification&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;includes&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Collection of simple web-pages suitable for load testing&amp;#34;&lt;/span&gt;)
    });
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;(Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;random&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can track JMeter scripts on Git, too. Here&amp;rsquo;s what the same script looks like in JMeter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;jmeterTestPlan&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;version=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;properties=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jmeter=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5.3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;hashTree&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;TestPlan&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;guiclass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TestPlanGui&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testclass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TestPlan&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testname=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test Plan&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enabled=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TestPlan.comments&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boolProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TestPlan.functional_mode&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;false&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/boolProp&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boolProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TestPlan.tearDown_on_shutdown&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/boolProp&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boolProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TestPlan.serialize_threadgroups&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;false&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/boolProp&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;elementProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TestPlan.user_defined_variables&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;elementType=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Arguments&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;guiclass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ArgumentsPanel&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testclass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Arguments&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testname=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User Defined Variables&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enabled=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;collectionProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Arguments.arguments&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/elementProp&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TestPlan.user_define_classpath&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/TestPlan&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;hashTree&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ThreadGroup&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;guiclass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ThreadGroupGui&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testclass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ThreadGroup&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testname=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thread Group&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enabled=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ThreadGroup.on_sample_error&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;continue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;elementProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ThreadGroup.main_controller&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;elementType=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LoopController&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;guiclass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LoopControlPanel&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testclass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LoopController&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testname=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loop Controller&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enabled=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boolProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LoopController.continue_forever&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;false&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/boolProp&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LoopController.loops&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/elementProp&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ThreadGroup.num_threads&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ThreadGroup.ramp_time&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boolProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ThreadGroup.scheduler&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;false&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/boolProp&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ThreadGroup.duration&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ThreadGroup.delay&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boolProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ThreadGroup.same_user_on_next_iteration&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/boolProp&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ThreadGroup&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;hashTree&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;TransactionController&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;guiclass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TransactionControllerGui&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testclass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TransactionController&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testname=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;01_Home&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enabled=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boolProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TransactionController.includeTimers&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;false&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/boolProp&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boolProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TransactionController.parent&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/boolProp&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/TransactionController&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;hashTree&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;HTTPSamplerProxy&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;guiclass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HttpTestSampleGui&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testclass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTPSamplerProxy&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testname=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTP Request&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enabled=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;elementProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTPsampler.Arguments&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;elementType=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Arguments&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;guiclass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTPArgumentsPanel&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testclass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Arguments&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testname=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User Defined Variables&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enabled=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;collectionProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Arguments.arguments&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/elementProp&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTPSampler.domain&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;test.k6.io&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTPSampler.port&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTPSampler.protocol&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;https&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTPSampler.contentEncoding&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTPSampler.path&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTPSampler.method&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;GET&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boolProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTPSampler.follow_redirects&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/boolProp&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boolProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTPSampler.auto_redirects&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;false&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/boolProp&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boolProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTPSampler.use_keepalive&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/boolProp&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boolProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTPSampler.DO_MULTIPART_POST&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;false&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/boolProp&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTPSampler.embedded_url_re&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTPSampler.connect_timeout&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTPSampler.response_timeout&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/HTTPSamplerProxy&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;hashTree&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ResponseAssertion&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;guiclass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AssertionGui&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testclass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ResponseAssertion&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testname=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Response Assertion&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enabled=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;collectionProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Asserion.test_strings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-745788246&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Collection of simple web-pages suitable for load testing&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/collectionProp&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Assertion.custom_message&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Assertion.test_field&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Assertion.response_data&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boolProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Assertion.assume_success&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;false&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/boolProp&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;intProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Assertion.test_type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;16&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/intProp&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ResponseAssertion&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;hashTree/&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/hashTree&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/hashTree&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;UniformRandomTimer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;guiclass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UniformRandomTimerGui&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testclass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UniformRandomTimer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testname=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Uniform Random Timer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enabled=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ConstantTimer.delay&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;1000&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;stringProp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RandomTimer.range&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;4000&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/stringProp&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/UniformRandomTimer&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;hashTree/&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/hashTree&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/hashTree&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/hashTree&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/jmeterTestPlan&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which one is easier to understand? If you had to modify the script to add a request, which format would you choose to do it in?&lt;/p&gt;
&lt;p&gt;Scripting in XML makes merge conflicts more likely and breaking changes in automation pipelines way more difficult to pinpoint.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve collaborated with others on JMeter scripts in the past, and we always opened up scripts in the GUI. It&amp;rsquo;s way easier to spot changes there - but that also created some new issues.&lt;/p&gt;
&lt;h2 id=&#34;when-you-want-something-easy-to-maintain&#34;&gt;When you want something easy to maintain&lt;/h2&gt;
&lt;h3 id=&#34;versioning-for-load-testing&#34;&gt;Versioning for load testing&lt;/h3&gt;
&lt;p&gt;When ramping up load tests to more than one load generator, keeping track of the versions of necessary components ensures that one load generator&amp;rsquo;s traffic is the same as another&amp;rsquo;s. The value of reducing variables in scientific experiments holds true for load testing.&lt;/p&gt;
&lt;p&gt;With k6, you just need to worry about the version of k6 and the script. No other dependencies are required. If you&amp;rsquo;re using plugins, you&amp;rsquo;d need to track those too, but as mentioned previously, plugins in k6 aren&amp;rsquo;t as necessary as they are in some other tools &amp;ndash; and k6 is available as a Docker image to reduce those issues.&lt;/p&gt;
&lt;p&gt;With something like JMeter, there are more levels to consider. There&amp;rsquo;s the version of JMeter itself, Java, versions of plugins, and then the script. Every new layer introduces more changes for incompatibilities. In previous projets I&amp;rsquo;ve worked on, someone would inevitably try out a new plugin and forget to discuss it with the team, and anyone who tried to open that script in their copy of JMeter would see this error:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/10-jmeterpluginerror.png&#34; alt=&#34;This is the error that JMeter throws when you attempt to open a test plan that includes a plugin you don&amp;rsquo;t have installed locally&#34;&gt;&lt;/p&gt;
&lt;p&gt;The error means there&amp;rsquo;s a plugin that the script uses that JMeter doesn&amp;rsquo;t recognize, but depending on the plugin, it&amp;rsquo;s not always this easy to pinpoint which one (it was the &lt;code&gt;Ultimate Thread Group&lt;/code&gt; in this case).
You don&amp;rsquo;t want that happening in the middle of your load test because you forgot to add a plugin to some of your load generators!&lt;/p&gt;
&lt;h3 id=&#34;its-easier-to-link-test-code-with-application-code&#34;&gt;It&amp;rsquo;s easier to link test code with application code&lt;/h3&gt;
&lt;p&gt;If your application code is in Javascript, k6 is a shoo-in as a load testing tool. You could build tests that are tightly integrated with application code by importing objects and having your tests interacting with them directly. This approach would reduce a lot of time spent in refactoring test scripts when objects are changed.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re already using VS Code, k6 even has a &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=k6.k6&#34;&gt;VS Code plugin&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;test-as-code-gives-you-control&#34;&gt;Test as code gives you control&lt;/h3&gt;
&lt;p&gt;Having your scripts be pure code reduces ambiguities in that you&amp;rsquo;re not limited by poor UI design or bugs in third-party plugins. k6 scripts are Typescript-typed, so most IDEs support autocompletion while you&amp;rsquo;re scripting - the code equivalent of helpful tooltips, except way more universal.
k6 scripts give you the freedom to import and use JS libraries, so you can build on code others have already written. While k6 is not NodeJS, there are even &lt;a href=&#34;https://k6.io/docs/using-k6/modules#bundling-node-modules&#34;&gt;some NodeJS packages&lt;/a&gt; that you can bundle for use with your scripts.&lt;/p&gt;
&lt;h3 id=&#34;no-external-dependencies&#34;&gt;No external dependencies&lt;/h3&gt;
&lt;p&gt;k6 doesn&amp;rsquo;t require NodeJS or anything else to run, which also reduces the likelihood of bugs that might affect your scripts. For example, since JMeter runs on Java, it is also dependent on Java. When Java receives a new version, that often requires a JMeter update as well. JMeter versions understandably lag a bit behind Java versions as developers refactor code, but this gap can lead to potential security issues in a previous version of Java that may remain unpatched in the meantime.&lt;/p&gt;
&lt;p&gt;With k6, development can proceed independently of any third-party component, so major issues can be addressed more easily.&lt;/p&gt;
&lt;h1 id=&#34;comparison-table-jmeter-vs-k6&#34;&gt;Comparison table: JMeter vs k6&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;JMeter&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;k6&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Written in&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Scripting language&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Limited: some Java (Groovy, Beanshell, etc)&lt;/td&gt;
&lt;td&gt;Javascript&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Protocols&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Supports most protocols via plugins (native support for HTTP/1.1, SOAP, FTP, JDBC, LDAP, MOM via JMS, SMTP, POP3, IMAP, shell scripts, TCP, Java objects)&lt;/td&gt;
&lt;td&gt;Supports fewer, modern protocols natively (HTTP/1.1, HTTP/2, WebSockets, gRPC)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;External dependencies&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Resource utilization&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://k6.io/blog/static/b4075246f21af514c7a1554d1406b337/d5e13/RPSvMemory.png&#34;&gt;Poor&lt;/a&gt;; One load generator can simulate a few thousand virtual users&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://k6.io/blog/static/b4075246f21af514c7a1554d1406b337/d5e13/RPSvMemory.png&#34;&gt;Very good&lt;/a&gt;; One load generator can simulate tens of thousands of virtual users&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Memory management&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;JVM heap memory must be set&lt;/td&gt;
&lt;td&gt;Uses load generator memory natively&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Threading model&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1 Thread: 1 Virtual User; Slower performance, higher resource cost&lt;/td&gt;
&lt;td&gt;1 Goroutine: 1 Virtual User; Faster performance, lower resource cost&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Ease of scripting&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;GUI-driven, with code blocks&lt;/td&gt;
&lt;td&gt;code-driven; VSCode plugin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Test-level thresholds&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;No, individual request only&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Script format&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;XML&lt;/td&gt;
&lt;td&gt;javascript&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Collaboration&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Difficult to work on simultaneously; tester-friendly; need the GUI app to edit&lt;/td&gt;
&lt;td&gt;Developer-friendly, easy to version; Javascript format promotes collaboration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maintenance&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Verbose scripts; XML format is difficult to read&lt;/td&gt;
&lt;td&gt;More concise scripts; JavaScript is easy to read&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Community&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Since 1998; Many third-party tutorials; Extensive documentation; No central community&lt;/td&gt;
&lt;td&gt;Since 2017; Extensive documentation; Fewer third-party tutorials; &lt;a href=&#34;https://community.k6.io/&#34;&gt;Official community&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Plugin support&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Requires plugins for many features, but there are lots of plugins available&lt;/td&gt;
&lt;td&gt;Most features are natively supported, but plugin support is new and availability is sparse&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Native distributed load generation&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No (Premium only)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Pre-generated reports&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Default and custom HTML reports; logging via listeners&lt;/td&gt;
&lt;td&gt;No built-in pre-generated reports; integration with analytics tools with third-party dashboards&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Website&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://jmeter.apache.org/&#34;&gt;jmeter.apache.org&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://k6.io&#34;&gt;k6.io&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Source Code&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/apache/jmeter&#34;&gt;Link&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/loadimpact/k6&#34;&gt;Link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The best advice, when attempting to choose a load testing tool, is to do a proof of concept with the most promising candidates. Some features or bugs may prove more or less important when used in an actual testing cycle. However, don&amp;rsquo;t put too much weight on comparisons of the load test &lt;em&gt;results&lt;/em&gt; from two different tools - each tool records metrics differently, and it&amp;rsquo;s more meaningful to compare results against previous runs with the same tool. When switching tools, reestablish a baseline in the new tool each time.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a summary that might help you decide between JMeter and k6.&lt;/p&gt;
&lt;h2 id=&#34;both-tools-do-well-at&#34;&gt;Both tools do well at:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generating protocol-level load on an application server by scripting complex user flows&lt;/li&gt;
&lt;li&gt;Realistic scripting with the use of dynamic think time, test data generation and reuse, and customizable workload models&lt;/li&gt;
&lt;li&gt;Documentation of features and consistency of releases&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;neither-tool-supports&#34;&gt;Neither tool supports:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generating browser-level load and interacting with DOM elements, especially for SPA&lt;/li&gt;
&lt;li&gt;Detailed results analysis (JMeter has pre-generated HTML reports and listeners, but they are far from ideal). Users should expect to integrate results with databases and data visualization software.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jmeter-is-best-for&#34;&gt;JMeter is best for:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;traditional testing teams&lt;/li&gt;
&lt;li&gt;those looking for a GUI-driven testing tool with tons of third-party tutorials and extensive protocol support&lt;/li&gt;
&lt;li&gt;previous users of commercial tools like LoadRunner and NeoLoad&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;k6-is-best-for&#34;&gt;k6 is best for:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;collaborative, cross-functional engineering teams where testing spans acrosss multiple roles&lt;/li&gt;
&lt;li&gt;those looking for a simple and lightweight, yet fully-featured load testing tool&lt;/li&gt;
&lt;li&gt;teams looking to integrate testing into existing development workflows and CI/CD pipelines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Load testing scripting tools are by no means the most important consideration for the success of load testing. Knowing &lt;em&gt;why&lt;/em&gt; you&amp;rsquo;re testing, what the requirements are, and understanding and communicating results are all arguably more important. The right tool will enable you to address those concerns while providing as little friction as possible. There&amp;rsquo;s no unequivocal &amp;ldquo;best&amp;rdquo; tool; there&amp;rsquo;s only the right tool for &lt;em&gt;your&lt;/em&gt; project and context.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Week of Testing Wrap-up: My thoughts on k6 as a load testing tool</title>
      <link>https://nicolevanderhoeven.github.io/blog/20201217-week-of-testing-07/</link>
      <pubDate>Thu, 17 Dec 2020 15:29:57 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20201217-week-of-testing-07/</guid>
      <description>&lt;p&gt;I decided to make a final wrap-up video for my &amp;ldquo;Week of Testing&amp;rdquo; with k6&amp;hellip; ok, so it&amp;rsquo;s actually three weeks later now, but I wanted to explore k6 a little bit more before I gave my opinion on it.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/zVjLBp543E4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;And here&amp;rsquo;s the audio version:&lt;/p&gt;


&lt;iframe src=&#34;https://open.spotify.com/embed-podcast/episode/0YgYqrPpEzEMSZIloeiQtC&#34; width=&#34;100%&#34; height=&#34;232&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34; allow=&#34;encrypted-media&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Thank you, k6, for being awesome enough to agree to this video series before knowing what I&amp;rsquo;d say. Gotta love a company that welcomes transparency and feedback.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cuándo JMeter no alcanza: Pruebas de carga simulando navegadores</title>
      <link>https://nicolevanderhoeven.github.io/blog/20201216-cuando-jmeter-no-alcanza/</link>
      <pubDate>Wed, 16 Dec 2020 18:18:23 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20201216-cuando-jmeter-no-alcanza/</guid>
      <description>&lt;p&gt;Aquí está el video de mi presentación en JMeter Scripting Day, un evento organizado por &lt;a href=&#34;https://jmeterenespanol.org/&#34;&gt;JMeter en Español&lt;/a&gt; el 31 de Oktubre, 2020.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/1KB8e2Ld08M&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Y la versión audio:&lt;/p&gt;


&lt;iframe src=&#34;https://open.spotify.com/embed-podcast/episode/1f17kzrbYmOxk8e65JBTQH&#34; width=&#34;100%&#34; height=&#34;232&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34; allow=&#34;encrypted-media&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Hola a todos! Yo soy Nicole van der Hoeven, y soy performance tester. JMeter es una de mis herramientas favoritas porque es gratis, simple, y por muchos casos hace exactamente lo que quiero y no más. Sin embargo, como performers es parte de nuestro trabajo elegir la herramienta adecuada para cada proyecto, y hay que admitir que hay situaciones en que JMeter simplemente no es suficiente.&lt;/p&gt;
&lt;h2 id=&#34;amazon---ui--dev-tools&#34;&gt;Amazon - UI + Dev Tools&lt;/h2&gt;
&lt;p&gt;Esto es el sitio web de Amazon.com. Tengo abierta la pantalla de Chrome Developer Tools, que me muestra las solicitudes (o requests) que componen la página. Cuándo vamos a la página, el navegador (Chrome en este caso) envia estas solicitudes para nosotros, pero eso occure en el fondo. Un usuario normal no las ve.&lt;/p&gt;
&lt;h2 id=&#34;jmeter---creando-un-script&#34;&gt;JMeter - Creando un script&lt;/h2&gt;
&lt;p&gt;Lo que JMeter hace es grabar estas solicitudes y replicarlas. Aqui vemos una ejecución de un usuario virtual de un script en JMeter. Cada solicitud tiene la respuesta y el tiempo de respuesta. Pero eso no nos da una idea completa del rendimiento de la aplicación. ¿Por qué?&lt;/p&gt;
&lt;p&gt;Por que JMeter, como otras herramientas de nivel protocolo, tiene unas limitaciónes. La primera es que si hay javascript o otros script que deben estar ejecutado por el navegador, JMeter no los ejecuta. JMeter solo los descarga. El tiempo de respuesta mide la descarga, no la duración de la ejecución. Entonces, siempre habrá una diferencia entre los tiempos de respuesta en una prueba de JMeter y los tiempos de respuesta en práctica.&lt;/p&gt;
&lt;p&gt;A veces esta diferencia no es tan importante. Pero hay más y más aplicaciones hoy en día que se componen principalmente de estos javascript. Por esas aplicaciones, simplemente no es posible hacer un script en JMeter porque la mayoría de la lógica de la aplicación occure en el navegador, no en el servidor.&lt;/p&gt;
&lt;h2 id=&#34;flood-challenge&#34;&gt;Flood Challenge&lt;/h2&gt;
&lt;p&gt;La segunda razón es que el aumento de la seguridad de aplicaciones conduce a solicitudes más complejas que incluyen parámetros dinámicos. Estos parámetros hacen que sea más difícil para un intermediario lanzar un ataque, pero también hacen que sea más difícil para nosotros scripters, porque tenemos que extraer información desde la última respuesta y ponerla en la próxima solicitud. Es posible, pero es la pesadilla de cada performance tester.&lt;/p&gt;
&lt;p&gt;Podemos verlo en la aplicación de muestra &lt;a href=&#34;https://challenge.flood.io&#34;&gt;Flood Challenge&lt;/a&gt;. Ya no trabajo para Flood, pero todavía es un buen ejemplo.&lt;/p&gt;
&lt;h2 id=&#34;correlación-en-jmeter---flood-challenge-script&#34;&gt;Correlación en JMeter - Flood challenge script&lt;/h2&gt;
&lt;p&gt;Esto es mi script en JMeter, y vemos que hay muchos parámetros que he tenido que correlacionar. La solicitud para simular hacer clic en el botón &amp;ldquo;Start&amp;rdquo; necesita los parámetros authenticity token, step ID, y step number, que son dinámicos. El contenido de los parámetros cambian cada vez que usamos esta aplicación.&lt;/p&gt;
&lt;h2 id=&#34;la-experiencia-del-usuario&#34;&gt;La experiencia del usuario&lt;/h2&gt;
&lt;p&gt;La tercera razón es que JMeter tampoco mide la verdadera experiencia del usuario. Solo mide la duración de la comunicación entre el navegador y el servidor, pero no mide cosas como la representación de elementos en la página web, ni el efecto de un script que dura mucho tiempo para terminar.&lt;/p&gt;
&lt;p&gt;Eso es importante porque estas cosas afectan significativamente la experiencia del usuario. De hecho, Steve Souders, un conocido el la industría de performance, dice que &lt;a href=&#34;https://rigor.com/blog/80-90-of-load-times-are-spent-on-the-front-end-start-there/#:~:text=Start%20there.,-Written%20by%20Craig&amp;amp;text=Last%20month%2C%20Steve%20Souders%2C%20Google&#39;s,is%20spent%20on%20the%20frontend&#34;&gt;hasta 90% del tiempo de respuesta&lt;/a&gt; que experimenta el usuario está en la interfaz. Con este numero podemos estar ciertos que una prueba con una herramienta de nivel protocolo no va a poder encapsular el rendimiento final de una aplicación.&lt;/p&gt;
&lt;h2 id=&#34;developer-tools---lighthouse&#34;&gt;Developer Tools - Lighthouse&lt;/h2&gt;
&lt;p&gt;Entonces, ¿qué podemos hacer?&lt;/p&gt;
&lt;p&gt;Lo más fácil es intentar de medir la interfaz durante una prueba de cargas. Mientras ejecutamos una prueba con JMeter, podemos ir manualmente a la aplicación web en Chrome para usar Developer Tools. Podemos usar la pestaña Lighthouse, que nos da más métricos del perspectivo del usuario y sugerencias para mejorar el rendimiento.&lt;/p&gt;
&lt;h2 id=&#34;webpagetest&#34;&gt;WebPageTest&lt;/h2&gt;
&lt;p&gt;También uso &lt;a href=&#34;https://webpagetest.org&#34;&gt;WebPageTest&lt;/a&gt; a veces. Eso tiene más opciones para ejecutar la prueba automáticamente varias veces desde un lugar que puedo elegir. Aún podemos elegir un dispositivo para simular la experiencia de un usuario en un iPad, por ejemplo.&lt;/p&gt;
&lt;h2 id=&#34;herramientas-alternativas-para-pruebas-de-carga&#34;&gt;Herramientas alternativas para pruebas de carga&lt;/h2&gt;
&lt;p&gt;Tambien podemos elegir herramientas alternativas para ejecutar nuestras pruebas de carga. Lo que tienen en común es que fueron diseñadas para pruebas de automatización, y utilizan un navegador real.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.selenium.dev/&#34;&gt;Selenium&lt;/a&gt; es probablemente la más popular de esas. Selenium WebDriver en particular. Es compatible con Ruby, Java, Python, C# y Javascript. El problema con Selenium es que puede ser muy pesada. En una machina probablamente podemos ejecutar cinco usuarios de Selenium, más o menos. Eso es importante si estamos tratando de simular miles de usuarios.&lt;/p&gt;
&lt;p&gt;Hay muchas herramientas basadas en Javascript que también podemos usar. Hay varias framework que se utilizan para adaptar Javascript y nodeJS.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Puppeteer fue desarollado por Google. Tricentis Flood también ha diseñado Element que utiliza Puppeteer, pero con un enfoque en el rendimiento.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/playwright&#34;&gt;Playwright&lt;/a&gt; es una creación de Microsoft.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://jest.io&#34;&gt;Jest&lt;/a&gt; fue desarrollado por Facebook&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mocha es otro framework que es la base para &lt;a href=&#34;https://cypress.io&#34;&gt;Cypress&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Todos esas herramientas son open source y gratis. También hay alternativas propietarias, pero prefiero las soluciones open source porque en la mayoría de casos hacen la misma cosa y se actualizan con más frecuencia.&lt;/p&gt;
&lt;h2 id=&#34;element-script&#34;&gt;Element script&lt;/h2&gt;
&lt;p&gt;Esto es un ejemplo de la misma acción, hacer clic en el botón Start en la aplicación Flood Challenge.&lt;/p&gt;
&lt;p&gt;Otra ventaja de simulando navegadores en vez de simulando las solicitudes es que es más simple crear un script. No tenemos que saber cada parámetro. Solo tenemos que describir lo que queremos que cada usuario virtual haga.&lt;/p&gt;
&lt;p&gt;Podemos ejecutar scripts usando estas herramientas al mismo tiempo que un script de &lt;a href=&#34;https://jmeter.apache.org&#34;&gt;JMeter&lt;/a&gt; o &lt;a href=&#34;https://gatling.io&#34;&gt;Gatling&lt;/a&gt; o lo que sea, y también tenemos la opción de reemplazar los script de protocolo con estas.&lt;/p&gt;
&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Para resumir, JMeter y otras herramientas de nivel protocolo tiene algunas limitaciones.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No ejecutan scripts del lado del navegador&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pueden ser más complicado correlacionar parámetros dinámicos&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No miden la experiencia final de un usuario&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para solucionar estos problemas, podemos complementar pruebas de carga tradicionales, de nivel protocolo, como JMeter, con herramientas simulando navegadores. De este modo podremos tener una comprensión más completa del rendimiento total de la aplicación.&lt;/p&gt;
&lt;p&gt;Bueno, se acabó el tiempo, entonces los dejo aquí. Gracias por escuchar, y me disculpo por mi español. Gracias a todos!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Week of Testing: Day 5 - The thing about learning in public</title>
      <link>https://nicolevanderhoeven.github.io/blog/20201128-week-of-testing-5/</link>
      <pubDate>Sat, 28 Nov 2020 20:03:04 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20201128-week-of-testing-5/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/quoOYnweKw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Yesterday I mentioned that I&amp;rsquo;d used the &lt;code&gt;constant-vus&lt;/code&gt; executor to recreate the stepped load profile. Well, the thing about learning publicly is that it also means making mistakes publicly!&lt;/p&gt;
&lt;p&gt;I was kindly informed by a few of my new colleagues that &lt;code&gt;constant-vus&lt;/code&gt; was not the most optimal way to recreate the stepped load profile. &lt;a href=&#34;https://simme.dev&#34;&gt;Simme&lt;/a&gt; wrote up a little function so I wouldn&amp;rsquo;t have to repeat myself so much, and &lt;a href=&#34;https://twitter.com/ppcano_&#34;&gt;Pepe Cano&lt;/a&gt; and Pawel Suwala (the CTO of k6 himself) both told me nicely that using &lt;a href=&#34;https://k6.io/docs/getting-started/running-k6#stages-ramping-up-down-vus&#34;&gt;stages&lt;/a&gt; would have been the better solution.&lt;/p&gt;
&lt;p&gt;So, let&amp;rsquo;s chalk that up to a TIL (Today I Learned) and record that snippet here for prosperity (found in the k6 documentation linked above):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;k6/http&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;k6&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;stages&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [
    { &lt;span style=&#34;color:#a6e22e&#34;&gt;duration&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;30s&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; },
    { &lt;span style=&#34;color:#a6e22e&#34;&gt;duration&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1m30s&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; },
    { &lt;span style=&#34;color:#a6e22e&#34;&gt;duration&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;20s&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; },
  ],
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://httpbin.org/&amp;#39;&lt;/span&gt;);
  &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status was 200&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; });
  &lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Week of Testing: Day 4 - Load profiles on k6</title>
      <link>https://nicolevanderhoeven.github.io/blog/20201127-week-of-testing-4/</link>
      <pubDate>Fri, 27 Nov 2020 19:54:06 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20201127-week-of-testing-4/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/jDmMmc75RRM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;k6 has a cool feature where even if you start a load test locally via the CLI, you can still stream the results to k6 Cloud. It&amp;rsquo;s an interesting compromise between debugging a test locally (and therefore not paying for cloud infrastructure) and sharing results for load tests run on the cloud. It worked seamlessly, too.&lt;/p&gt;
&lt;p&gt;I also wanted to see how to recreate a specific load profile that I commonly use - the stepped load profile. In JMeter, I typically do this with a plugin - the jp@gc Ultimate Thread Group is my thread group of choice. So, I created it in JMeter (I love that it shows a little image of it as well, while you&amp;rsquo;re building it) and then attempted to recreate it in k6.&lt;/p&gt;
&lt;p&gt;I definitely had to look at the k6 documentation for this. I used the &lt;code&gt;constant-vus&lt;/code&gt; executor for this, but k6 has &lt;a href=&#34;https://k6.io/docs/using-k6/scenarios#executors&#34;&gt;several other executors&lt;/a&gt; to choose from, and it worked as well as I had hoped.&lt;/p&gt;
&lt;p&gt;So far, my experience with k6 has been positive. Things are well-documented, and they just work out of the box. No plugins necessary.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Week of Testing: Day 3 - Running a load test locally using k6</title>
      <link>https://nicolevanderhoeven.github.io/blog/20201126-week-of-testing-3/</link>
      <pubDate>Thu, 26 Nov 2020 19:31:33 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20201126-week-of-testing-3/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/y5tteMKZUqk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;I&amp;rsquo;ve had my fun playing around with k6 Cloud, the SaaS component. For Day 3, I thought it was time to jump into the heart of k6: k6 the &lt;a href=&#34;https://github.com/loadimpact/k6&#34;&gt;open source load testing tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First impressions: logging was a little sparser than I expect, coming from having used load testing tools that just do this for me automatically. I think one of the first things I&amp;rsquo;ll do with k6 is to create my own little &amp;ldquo;load testing starting script&amp;rdquo; that I&amp;rsquo;ll always use, with all of the appropriate logging already set up.&lt;/p&gt;
&lt;p&gt;Otherwise, I was really impressed with how quickly it installed. If you scrub over to the timestamp &lt;a href=&#34;https://www.youtube.com/watch?v=y5tteMKZUqk&amp;amp;ab_channel=k6&amp;amp;ts=106&#34;&gt;1:46&lt;/a&gt; in the video, you&amp;rsquo;ll hear that I was actually expecting to have to speed up the installation process while editing to save time, but the installation actually finished before I could say that I was going to do so. By my count that was 7 seconds between hitting enter in my terminal and the download finishing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7 seconds&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I can&amp;rsquo;t help but compare that to &lt;a href=&#34;https://jmeter.apache.org/&#34;&gt;JMeter&lt;/a&gt;. JMeter is honestly probably my go-to load testing right now&amp;ndash; it&amp;rsquo;s not good for absolutely everything, but it&amp;rsquo;s the tool that I reach for when I &amp;ldquo;just want to test this one thing&amp;rdquo;. I&amp;rsquo;ve used it for years, and it&amp;rsquo;s the tool that I know the most. But one of the issues with JMeter is that there&amp;rsquo;s so much to do before it&amp;rsquo;s actually usable.&lt;/p&gt;
&lt;p&gt;Before you even open JMeter, you need to install Java, and when I first started in load testing, I spent a long time wrestling with getting setting the Java environment variable in Windows before my computer would even recognize that Java was installed. Then you need to install JMeter&amp;ndash; but any JMeter tester will tell you that there are some plugins that you just can&amp;rsquo;t do without, and that really you should always install. That&amp;rsquo;s why there are so many &amp;ldquo;best plugins in JMeter&amp;rdquo; lists (&lt;a href=&#34;https://nicolevanderhoeven.github.io/blog/20200414-aaf11&#34;&gt;here&amp;rsquo;s my top 3&lt;/a&gt;)&amp;hellip; because most of them are necessary, but you wouldn&amp;rsquo;t know that if you&amp;rsquo;re new to JMeter.&lt;/p&gt;
&lt;p&gt;The fact that k6 starts up in 7 seconds is&amp;hellip; shockingly good.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Week of Testing: Day 2 - Comparing tests against a baseline</title>
      <link>https://nicolevanderhoeven.github.io/blog/20201125-week-of-testing-2/</link>
      <pubDate>Wed, 25 Nov 2020 19:21:53 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20201125-week-of-testing-2/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/dcahi7-9pRs&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Day 2 of my Week of Testing!&lt;/p&gt;
&lt;p&gt;Yesterday I ran my first load test on k6, and actually set up the thresholds wrong. I still maintain that there are some UI improvements that could still be made in that area, and that feedback was well-received. Apparently I&amp;rsquo;m not the only one who has made the same mistake.&lt;/p&gt;
&lt;p&gt;Today I learned that on k6, you can actually set one test to be a baseline. There&amp;rsquo;s so much I want to say on this topic - that&amp;rsquo;s probably a whole blog post there - but for now, suffice it to say that having a baseline test to compare succeeding tests to is a key to a successful round of load testing. I was happy to see that k6 thinks so too, because that functionality is built into the UI by default.&lt;/p&gt;
&lt;p&gt;I also think that being able to schedule a test regularly is fantastic for practicing Continuous Testing. Of course, teams already using CI/CD pipelines would probably get the most benefit out of running load tests using the command line rather than through the UI, but it&amp;rsquo;s nice to know that scheduling is an option in the UI as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Week of Testing: Day 1 - Running a load test on k6</title>
      <link>https://nicolevanderhoeven.github.io/blog/20201124-week-of-testing-1/</link>
      <pubDate>Tue, 24 Nov 2020 19:13:03 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20201124-week-of-testing-1/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/6qXJUS6yMDc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;On my first real day of testing with &lt;a href=&#34;https://k6.io&#34;&gt;k6.io&lt;/a&gt;, I wanted to jump right in and figure out how to run a load test on k6 Cloud. k6 has documentation on this, but I didn&amp;rsquo;t use it for this test, since the point of a week of testing is to record how easy the product is to use.&lt;/p&gt;
&lt;p&gt;My verdict: I&amp;rsquo;m pleasantly surprised with how easily everything went. Is it just me, or was that AWS startup time exceptionally fast? I&amp;rsquo;m used to AWS taking at least a couple of minutes to provision a machine, but this seemed to start up almost instantaneously.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Week of Testing: Intro</title>
      <link>https://nicolevanderhoeven.github.io/blog/20201123-week-of-testing-intro/</link>
      <pubDate>Mon, 23 Nov 2020 20:45:31 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20201123-week-of-testing-intro/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/zcYeboT5FYE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Today was my first day at &lt;a href=&#34;https://k6.io&#34;&gt;k6.io&lt;/a&gt;! I&amp;rsquo;m happy to announce that I&amp;rsquo;ve joined as their newest Developer Advocate for Performance Testing. k6 is a company I&amp;rsquo;ve had my eye on for a while, even (or maybe especially) when I was working for a competitor, &lt;a href=&#34;https://flood.io&#34;&gt;Tricentis Flood&lt;/a&gt;. I always admired k6&amp;rsquo;s stance on open source, their involvement with the developer community, and the slick web app that brings load testing into the hands of many developers and testers.&lt;/p&gt;
&lt;p&gt;As a load tester, I try to be tool-agnostic. I have to admit, though, that I do have a strong bias towards opensource tools. I joined Flood because of their focus on tools I already loved like &lt;a href=&#34;http://jmeter.apache.org/download_jmeter.cgi&#34;&gt;JMeter&lt;/a&gt;, &lt;a href=&#34;https://gatling.io/&#34;&gt;Gatling&lt;/a&gt;, and &lt;a href=&#34;https://element.flood.io&#34;&gt;Element&lt;/a&gt; (based on Puppeteer). (And Selenium, but it&amp;rsquo;s a stretch to say I love Selenium.) But these are tools I&amp;rsquo;ve used for years, most of them from even before I joined Flood. What kind of load tester would I be if I could only really talk about scripting in a handful of tools?&lt;/p&gt;
&lt;p&gt;So I thought it was time for a change, and k6 was the first and only company on my list for a couple reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/loadimpact/k6&#34;&gt;The free and open source tool k6&lt;/a&gt;, which recently crossed over to 10,000 stars on Github, is often touted as the developer&amp;rsquo;s load testing tool of choice.&lt;/li&gt;
&lt;li&gt;k6&amp;rsquo;s &lt;a href=&#34;https://k6.io/cloud&#34;&gt;cloud offering&lt;/a&gt; integrates seamlessly with the OSS tool, and it adds some killer features like performance insights that add real value to teams wanting to scale their load tests.&lt;/li&gt;
&lt;li&gt;The k6 team is incredibly responsive to the needs of their community. Unlike most companies, where only marketing, sales, and customer support people talk to customers, k6 developers are active on GitHub, social media, and other blog sites. Everyone is passionate about what they&amp;rsquo;re building.&lt;/li&gt;
&lt;li&gt;Roles in testing are changing, and the lines between tester and developer are blurring. Developers who don&amp;rsquo;t test are going to become just as obsolete as testers who don&amp;rsquo;t develop. I see k6&amp;rsquo;s popularity among the developer crowd as a good opportunity for me to sharpen my coding skills.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I had to see for myself whether k6 was actually as good as it seemed.&lt;/p&gt;
&lt;p&gt;Luckily, it turns out that k6 has a tradition of a &amp;ldquo;Week of Testing&amp;rdquo;, where every new member of the k6 team, regardless of role, spends their first week putting the product through its paces. Every part of the whole k6 solution (Cloud and OSS tool) is fair game, and the goal of the Week of Testing is to present feedback to the team at the end of it, while the new member&amp;rsquo;s eyes are fresh. When they told me about it, they said &amp;ldquo;We want to see you learn the tool on your own to see what parts are difficult to figure out.&amp;rdquo; To which I responded, &amp;ldquo;Challenge accepted!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I decided to not only give a presentation at the end, but also to video the process for posterity&amp;rsquo;s sake&amp;hellip; and, let&amp;rsquo;s face it, to impress my new managers and coworkers with my dazzling work ethic.&lt;/p&gt;
&lt;p&gt;Step 1: Get the company&amp;rsquo;s name right.&lt;/p&gt;
&lt;p&gt;In the first video, I share the differences between k6 vs. k6 Cloud vs. Load Impact!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Become a Load Tester</title>
      <link>https://nicolevanderhoeven.github.io/blog/20201007-how-to-become-a-load-tester/</link>
      <pubDate>Wed, 07 Oct 2020 14:15:45 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20201007-how-to-become-a-load-tester/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://www.flood.io/blog/how-to-become-a-load-tester&#34;&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.flood.io/blog/how-to-become-a-load-tester&#34;&gt;Originally posted here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Load testing can be a pretty intimidating field to get into, but it&amp;rsquo;s easy to get started. Here are some concrete steps you can take to start learning how to load test from scratch.&lt;/p&gt;
&lt;p&gt;In this video, Flood co-founder Tim Koopmans and I teamed up at Tricentis User Conference 2020 to talk about the essential ingredients for load testing.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/_R2dmEmtO48&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;background-required-for-load-testing&#34;&gt;Background required for load testing&lt;/h2&gt;
&lt;p&gt;Load testing can be quite technical. It involves not just the ability to use different programming languages to create load testing scripts but also familiarity with software engineering practices, DevOps, application infrastructure, site reliability, and networking. A good load tester needs to be able to understand the basics of how an application works and how different components interact with each other. It&amp;rsquo;s common for a load tester to work on applications employing a variety of technologies, so staying up to date with recent technological trends and switching seamlessly from one language to another, or from one platform to another, is of utmost importantance. This technical side of load testing might make you think that a load tester needs to have formal studies in computer science and several years of experience in software testing. The reality is that there are many load testers who stumbled into the field from wildly unexpected backgrounds. So you might think load testing looks like this:&lt;/p&gt;
&lt;p&gt;‍&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/how-to-become-a-load-tester01.jpg&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Photo by &lt;a href=&#34;https://unsplash.com/@wocintechchat?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Christina @ wocintechchat.com&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/s/photos/meeting?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And sometimes it does. But it more often looks something like this:&lt;/p&gt;
&lt;p&gt;‍&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/how-to-become-a-load-tester02.jpg&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Photo by &lt;a href=&#34;https://unsplash.com/@youxventures?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;You X Ventures&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/s/photos/meeting?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You see, load testing is an interdisciplinary field. So much of the job involves talking to people. Sometimes the requirements for a project are not clear, and someone needs to talk to the both the business and the developers to make sure that nonfunctional requirements are clarified. A load tester is a detective, tracing a request as it goes from one application component to another, coordinating with different application teams. A load tester is a scientist, using the scientific method to design experiments that yield the results. A load tester is a statistician, making sense of a jumble of data and seeking correlations between variables. A load tester is a public speaker. Even when the actual load testing has been completed and the report has been sent, a load tester makes sure all stakeholders understand the report so that the results can be used to make meaningful changes to improve application performance. All these tasks require a mishmash of skills and competencies that can be difficult to find in just the field of computer science.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take our backgrounds as anecdotal examples.&lt;/p&gt;
&lt;p&gt;Tim grew up and currently lives in a small country town in Australia, and he joined the military straight after school. He later developed a love of automating things, which led him first to use tools like perl to scrape websites and try to win bids with early versions of ebay, and then later to starting a performance engineering consulting career and co-founding Flood itself.&lt;/p&gt;
&lt;p&gt;I, Nicole, grew up in Metro Manila in the Philippines (which has 14,000 more people per km2 than Mumbai does). I learned English as a foreign language in school, and I have a university degree in Economics. When I discovered load testing, I had a job in a completely different field– I was working for an airline and making sure engine components were properly maintained and repaired. My love for gadgets and technology took me down an 8-year rabbit hole involving doing performance consulting for clients across a variety of industries in Australia and the Netherlands. At Flood, I help customers around the world improve their application performance.&lt;/p&gt;
&lt;p&gt;As you can see, Tim and I came from very different backgrounds and different parts of the world. Neither of us knew what load testing even was when we started working. Neither of us got formal instruction in load testing. But somehow, we still both ended up becoming load testers at Flood.&lt;/p&gt;
&lt;h2 id=&#34;reasons-to-become-a-load-tester&#34;&gt;Reasons to become a load tester&lt;/h2&gt;
&lt;p&gt;So why become a load tester? Here are some practical reasons.&lt;/p&gt;
&lt;h3 id=&#34;load-testing-is-cool&#34;&gt;Load testing is cool&lt;/h3&gt;
&lt;p&gt;A little-known fact about load testing is that it can be really satisfying to be involved in big-name projects that end up going live.&lt;/p&gt;
&lt;p&gt;You may have heard of Flood. But even if you haven’t, we’re sure you&amp;rsquo;re familiar with the results of load testing done on Flood. In the last few years, we have been helping Hotstar, one of the largest streaming services in the world, load test their systems in preparation for the Indian Premier League.&lt;/p&gt;
&lt;p&gt;Hotstar uses an open-source tool that we support, Gatling, to create scripts to simulate users tuning in to watch cricket games. Then, they use Flood to create a “Game Day” simulation. They scale up those load tests and run 5 million users on thousands of machines in the cloud. We help them coordinate execution, spot problems quickly with real-time results from all those machines while the test is still running, and identify bottlenecks so that they don’t occur in production, when India’s playing.&lt;/p&gt;
&lt;p&gt;As a load tester, you&amp;rsquo;ll definitely be working with brands you recognize and love.&lt;/p&gt;
&lt;h3 id=&#34;load-testing-can-pay-well&#34;&gt;Load testing can pay well&lt;/h3&gt;
&lt;p&gt;‍&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/how-to-become-a-load-tester03.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Source: &lt;a href=&#34;https://www.payscale.com/research/IN/Job=Software_Tester/Salary&#34;&gt;Payscale&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;‍&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/how-to-become-a-load-tester04.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Source: &lt;a href=&#34;https://www.payscale.com/research/IN/Job=Performance_Engineer/Salary&#34;&gt;Payscale&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I said this would be a practical list, right?&lt;/p&gt;
&lt;p&gt;Here are 261,768 practical reasons. The average performance engineer’s salary is 71% more than that of an average software tester in India, according to Payscale.com. We all know that money isn’t everything, but this is a clear signal from the market about the importance of performance-related skills. Adding load testing to your CV as a tester makes you more attractive to employers. It’s a great way to differentiate yourself in an over-saturated market.&lt;/p&gt;
&lt;h3 id=&#34;load-testing-can-literally-take-you-places&#34;&gt;Load testing can literally take you places&lt;/h3&gt;
&lt;p&gt;‍&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/how-to-become-a-load-tester05.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Source: &lt;a href=&#34;https://twitter.com/shamim_j&#34;&gt;Shamim&lt;/a&gt; from &lt;a href=&#34;https://www.flood.io/blog/inside-the-career-of-a-digital-nomad-is-a-life-on-the-road-right-for-you&#34;&gt;Flood&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Then there are the side benefits of being in load testing. The photos above are real ones from the Flood team. That’s me on the upper left, exploring a castle in Belgrade, Serbia, and that’s Tim in the bottom right, taking a photo in San Francisco, USA.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.flood.io/blog/inside-the-career-of-a-digital-nomad-is-a-life-on-the-road-right-for-you&#34;&gt;We’re a fully distributed team on Flood&lt;/a&gt;, which means we can work from anywhere. Flood is a web app, so you don’t need to install anything– I’ve been known to start load tests from my iPad in a café. Load testing on the cloud frees you from being tied to running tests from the office. You can start load generators when you need them and shut them down when you don’t– all from a web browser. It’s a job that can come with a great work/life balance, if you find the right company.&lt;/p&gt;
&lt;p&gt;Load testing can also be a great way to move to another country. It’s what’s allowed me to move to other countries– twice. In Australia, the average performance engineer’s salary is AU$108,053, or over 5.6 million rupee.&lt;/p&gt;
&lt;p&gt;‍&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/how-to-become-a-load-tester06.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Source: &lt;a href=&#34;https://www.payscale.com/research/AU/Job=Performance_Engineer/Salary&#34;&gt;Payscale&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So it’s clear that there are some pretty good reasons for you to become a load tester. I&amp;rsquo;m going to walk you through the practical steps to become a load tester. You may not be an expert by the end of this, but I hope I can convince you that you can get started in load testing whether your background looks like Tim’s or mine.&lt;/p&gt;
&lt;h3 id=&#34;load-testing-adds-real-value&#34;&gt;Load testing adds real value&lt;/h3&gt;
&lt;p&gt;And the trite, but absolutely true reason: Everyone fails.&lt;/p&gt;
&lt;p&gt;As a load tester, you are a gatekeeper of quality. What you do directly affects revenue and customer experience.&lt;/p&gt;
&lt;p&gt;Performance is an aspect of software that is often overlooked, but it’s only becoming more important in a world where everything is going online. People are being born who have never known what it’s like not to have the internet, and consumers in general expect applications to be responsive and stable. Would-be customers who can’t get an e-commerce site to load within 3 seconds may switch to a competitor’s site, and we all know there are many of them. Performance-related outages can be seriously damaging to a company’s reputation, and social networking amplifies customer dissatisfaction by effectively giving everyone a megaphone to complain into.&lt;/p&gt;
&lt;p&gt;Software functionality is still important. However, if an online store goes live with no critical functional defects, but it fails when the 100th person logs into it, or it takes 10 seconds to load the homepage, can you really say that it was ready for production?&lt;/p&gt;
&lt;p&gt;Load testing is a crucial part of ensuring software quality, and quality is the responsibility of everyone on a team, even if the word “performance” isn’t in your job title.&lt;/p&gt;
&lt;h2 id=&#34;the-essential-ingredients-of-a-load-test&#34;&gt;The essential ingredients of a load test&lt;/h2&gt;
&lt;p&gt;Load testing is like cooking a meal. This is one of Tim&amp;rsquo;s favorite dishes, aloo matar.&lt;/p&gt;
&lt;p&gt;‍&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/how-to-become-a-load-tester07.jpg&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Source: &lt;a href=&#34;https://www.cubesnjuliennes.com/aloo-matar-recipe/&#34;&gt;Cubes n Juliennes&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can approach cooking as a science. There are recipes with a list of ingredients, a precise measurement of how much you need for each, and a procedure for creating the dish.&lt;/p&gt;
&lt;p&gt;But you can also look at cooking as an art. Cooking the same dish over and over again will give you an experience in working with those ingredients that a novice cook won’t have. There’s room in cooking for adding one ingredient, changing the quantity of another, or just trying something new.&lt;/p&gt;
&lt;p&gt;A master chef knows how to use both the science and the art to create something delicious. But you don’t HAVE to be at that level in order to cook.&lt;/p&gt;
&lt;p&gt;Anyone can cook. If you know how to follow a basic recipe, you may not create a masterpiece, but if you’re like me and you haven’t had lunch yet, you’ll still end up with something you’ll eat.&lt;/p&gt;
&lt;p&gt;So here’s the recipe for load testing.&lt;/p&gt;
&lt;p&gt;I prefer kadai paneer myself, but aloo matar requires, among other things, peas. And so does load testing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P is Preparation&lt;/strong&gt;. To prepare for a load test, you need to get your ingredients ready. You need to decide what it is you want to test, why you’re testing it, and how. You write load testing scripts that will simulate real users as closely as possible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;E is Execution&lt;/strong&gt;. This is when you do the actual cooking. You run your load tests and scale them up according to your requirements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A is Analysis&lt;/strong&gt;. You figure out whether the dish you created is edible. You determine how your application servers responded during the load test, and decide if that’s acceptable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Preparation – Execution – Analysis.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;preparing-for-a-load-test&#34;&gt;Preparing for a load test&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“As far as the World Cup is concerned, it is a process. We don’t want to jump to the 50th floor straight away. We must start on the ground floor.” - Sachin Tendulkar, via &lt;a href=&#34;https://www.espncricinfo.com/story/_/id/22538610/world-cup-final-dream-tendulkar&#34;&gt;ESPN&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Load testing doesn’t start with writing a script. Load testing starts with building a foundation for later tests.&lt;/p&gt;
&lt;p&gt;‍&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/how-to-become-a-load-tester08.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Source: &lt;a href=&#34;https://www.insidesport.co/cricket-sachin-tendulkar-comes-to-aid-of-ailing-ashraf-who-once-fixed-his-bats/&#34;&gt;Inside Sport&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Part of that foundation is asking WHY. Why do you want to do a load test? Has there been a performance-related issue before? Are you trying to determine whether an application is ready to go live, or is it already live, and you just want to improve its performance? What type of application do you want to test?&lt;/p&gt;
&lt;p&gt;WHOM are you cooking for? I think you’d cook differently for yourself than you would for Sachin Tendulkar. What do your end users typically do on your site? Where do they come from?&lt;/p&gt;
&lt;p&gt;These are questions that need to be answered before you think about scripting. Here are some resource for planning your load tests:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.flood.io/blog/start-with-why-how-to-write-requirements-for-api-load-testing&#34;&gt;Start with Why: How to write requirements for API load testing&lt;/a&gt;
&lt;a href=&#34;https://www.flood.io/blog/how-to-write-a-test-plan-for-load-testing&#34;&gt;How to write a test plan for load testing&lt;/a&gt;
&lt;a href=&#34;https://guides.flood.io/ebooks/api-load-testing/scripting-an-api-load-test&#34;&gt;Selecting a tool for load testing&lt;/a&gt;
Generating a load testing script without coding: &lt;a href=&#34;https://guides.flood.io/overview-of-flood/scripting-your-load-test&#34;&gt;Getting Started with Test Builder&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;execution-of-a-load-test&#34;&gt;Execution of a load test&lt;/h2&gt;
&lt;p&gt;So now we’re ready to start cooking. This is the Execution phase. You’ll need a machine to use as a load generator. Depending on the number of users you want to run with, you may need more than one machine. You might be tempted to run a load test on your laptop, or on a bunch of machines you have lying around, but that introduces new variables that may affect the results.&lt;/p&gt;
&lt;p&gt;‍&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/how-to-become-a-load-tester09.jpeg&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Source: &lt;a href=&#34;https://unsplash.com/@suicide_chewbacca?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Ashwini Chaudhary&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/s/photos/indian-food?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Like any good cook, you’ll also need to make sure you have all your ingredients handy. In load testing, that means making sure your scripts and test data files are ready to be executed on every load generator.&lt;/p&gt;
&lt;p&gt;Both of these problems – provisioning a load generator and transferring files over to them – are solved pretty easily by running on the cloud using something like Flood.&lt;/p&gt;
&lt;p&gt;Designing and executing your load test&lt;/p&gt;
&lt;p&gt;Where should you run your load tests? A look at demand, hosted, and on-premise infrastructure&lt;/p&gt;
&lt;h2 id=&#34;analysis-of-results&#34;&gt;Analysis of Results&lt;/h2&gt;
&lt;p&gt;The last part is Analysis.&lt;/p&gt;
&lt;p&gt;‍&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/how-to-become-a-load-tester10.jpeg&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Source: &lt;a href=&#34;https://www.finedininglovers.com/recipes/brunch/potato-pakoras-yogurt-sauce&#34;&gt;Fine Dining Lovers&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a pretty crucial moment, because this is when you figure out whether what you cooked was delicious or not. Unfortunately, in load testing, it’s not always easy to tell how your test went. It’s like this photo of pakora (onion is my favorite kind). It’s kind of hard to say what expression that is in their faces. Is it disgust? Or is the pakora so yummy that they just can’t wait to eat more?&lt;/p&gt;
&lt;p&gt;Load testing typically generates a LOT of data. You’d have to go copy every single file from every load generator you used. But can you imagine the hundreds of load generators that Hotstar used? Of course they didn’t manually copy those files. Instead, they used Flood.&lt;/p&gt;
&lt;p&gt;On Flood, we show real-time graphs as you’re running the test so that you can tell immediately whether transactions are failing or whether a server has stopped responding.&lt;/p&gt;
&lt;p&gt;After the test, you can also compare this data to previous tests to spot trends, or even create your own dashboards using an analytics engine.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://guides.flood.io/results-analysis/metrics-during-test&#34;&gt;Real-time metrics during your load test&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://guides.flood.io/results-analysis/archived-results&#34;&gt;Downloading results and logs after the test&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;is-that-it&#34;&gt;Is that it?&lt;/h2&gt;
&lt;p&gt;You’ve prepared for a load test, you’ve executed a load test, and you’ve analysed the results from the load test. Congratulations, you’re a load tester! By following this recipe, you’re already doing better than many people, and you’re certainly doing a lot better than those who do not run any load tests at all.&lt;/p&gt;
&lt;p&gt;The cool thing about load testing, though, is that this is just the beginning. There’s always room for improvement.&lt;/p&gt;
&lt;p&gt;‍&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/how-to-become-a-load-tester11.jpeg&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Source: &lt;a href=&#34;https://popupcity.net/observations/dabbawalla-hot-lunch-delivery-by-mumbais-fastest/&#34;&gt;Pop Up City&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Dabbawallas are people who deliver hot lunches, and while the concept is not new, the implementation in India is particularly interesting.&lt;/p&gt;
&lt;p&gt;For these dabbawallas, having the meals prepared is not the end of the job. Once the food is ready, it needs to be packed into lunchboxes, picked up, separated according to destination, put on trains, and delivered. Later, the empty lunchboxes are picked up, and the system works in reverse.&lt;/p&gt;
&lt;p&gt;It turns out that this is actually a pretty sophisticated system. In fact, it’s been estimated that only one tiffin every two months is not delivered. That’s equivalent to a &lt;a href=&#34;https://www.bbc.com/future/article/20170114-the-125-year-old-network-that-keeps-mumbai-going&#34;&gt;Six-Sigma quality rating of 99.9999999%&lt;/a&gt; (that’s nine nines) or more.&lt;/p&gt;
&lt;p&gt;Dabbawallas didn’t get that rating just by delivering quickly. They did it by being consistent and reliable. They did it by having a process.&lt;/p&gt;
&lt;p&gt;Once you see the benefits of running a load test, you may also start to understand that the real value of load testing is not in a test that you run once whenever you think of it. Imagine having the benefits of a load test tied to your development process, so that it is automated.&lt;/p&gt;
&lt;p&gt;As an advanced topic, &lt;a href=&#34;https://www.flood.io/blog/load-testing-in-devops-pipelines-with-azure-and-flood&#34;&gt;adding your load testing&lt;/a&gt; to your team&amp;rsquo;s Continuous Integration/Continuous Development pipelines such as sets up a repeatable process that reaps benefits far into the future, not just whenever official load testing activities are carried out.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://guides.flood.io/continuous-integration/what-is-continuous-integration&#34;&gt;Continuous Integration with Flood&lt;/a&gt;: Integrating Travis CI, Circle CI, and Jenkins&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So that’s the recipe for becoming a load tester.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Preparation – Execution – Analysis.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;Preparation&lt;/strong&gt;, you determine why you’re testing and what tool best fits your needs. We showed you how to use Element, but there are many open source tools out there. Don’t get overwhelmed by scripting– a lot of times it can just mean replacing a URL with the one YOU want to test.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;Execution&lt;/strong&gt;, you run a baseline test that will serve as a point of comparison for future testing, choose the number of users and the number of regions you want, and then you run your test. Running on the cloud is the easiest (and usually cheapest) way to get started.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;Analysis&lt;/strong&gt;, you view the results in real-time, compare historical performance to see trends, and share reports to stakeholders so that your team can make changes to your application.&lt;/p&gt;
&lt;p&gt;We also talked about the bonus topic of &lt;strong&gt;CI/CD&lt;/strong&gt; and how you can incorporate load testing into your pipeline to get a continuous feedback during your development cycle.&lt;/p&gt;
&lt;p&gt;Tim and I started in very different places and had different experiences before we discovered load testing. But eventually, we ended up on the same path, and that’s what we’ve outlined for you here. We hope that this convinces you that load testing doesn’t have to be complicated.&lt;/p&gt;
&lt;p&gt;You absolutely don’t need to be an expert to run a load test. Even if you don’t think you’ll get all these steps right, a load test that is less than ideal is still better than no load testing at all.&lt;/p&gt;
&lt;p&gt;In the end, anyone can be a load tester with the right attitude and the right tools.&lt;/p&gt;
&lt;h2 id=&#34;learning-about-load-testing&#34;&gt;Learning about load testing&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/1681559.High_Performance_Web_Sites&#34;&gt;High Performance Websites&lt;/a&gt; book by Steve Souders&lt;/p&gt;
&lt;p&gt;Ministry of Testing/PerfBytes &lt;a href=&#34;https://www.ministryoftesting.com/dojo/lessons/a-quick-start-guide-to-learning-performance-testing&#34;&gt;list of resources&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.perfbytes.com/&#34;&gt;PerfBytes podcast&lt;/a&gt; (EN and ES)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://guildconferences.com/conference/perfguild-2020/&#34;&gt;PerfGuild conferences&lt;/a&gt; by Joe Colantonio&lt;/p&gt;
&lt;p&gt;Señor Performo’s YouTube Channel: &lt;a href=&#34;https://www.youtube.com/channel/UCO-RlGccAUQnMqTaBkvUJhQ&#34;&gt;Señor Performo ENG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Scott Moore’s &lt;a href=&#34;https://www.youtube.com/watch?v=9H2GSGvGwqQ&amp;amp;list=PLXRCdih3vTUEFz1TVyP7RRqEEk__CYGoB&#34;&gt;Performance Tour&lt;/a&gt; on YouTube&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lifting the lid on performance testing</title>
      <link>https://nicolevanderhoeven.github.io/blog/20200924-testing-talks-online/</link>
      <pubDate>Thu, 24 Sep 2020 23:38:56 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20200924-testing-talks-online/</guid>
      <description>&lt;p&gt;I joined other performance and testing engineers in this online panel at Testing Talks Online about load testing best practices.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/pHQ4FwdwGGk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;From the &lt;a href=&#34;https://www.testingtalks.com.au/presentations/lifting-the-lid-on-performance-testing-best-practices-from-leading-companies&#34;&gt;Testing Talks Online site&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Performance testing is an essential part of the quality assurance function. However, across the industry the great majority of companies still struggle to master and execute a successful performance testing strategy that produces measurable results.
In this panel discussion, Cameron Bradley will host some of the best performance engineers in the world. The panel will discuss how we as quality assurance experts and performance engineers can better understand performance testing, the value of performance testing and how world leaders are approaching and succeeding with performance testing as part of the delivery life cycle.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Ask a Flooder 20: How can fear affect application performance?</title>
      <link>https://nicolevanderhoeven.github.io/blog/20200806-aaf20/</link>
      <pubDate>Thu, 06 Aug 2020 22:43:28 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20200806-aaf20/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://www.flood.io/blog/ask-a-flooder-20-how-can-fear-affect-application-performance-video&#34;&gt;

&lt;p&gt;&lt;em&gt;Originally posted &lt;a href=&#34;https://www.flood.io/blog/ask-a-flooder-20-how-can-fear-affect-application-performance-video&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this video, I talk about the power of fear, and how it can end up affecting performance test results.
‍
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/oeEFCrTYULE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Or listen to the audio version here:&lt;/p&gt;


&lt;iframe src=&#34;https://open.spotify.com/embed-podcast/episode/2cOfQrrUwyIKWbztgNdoXR&#34; width=&#34;100%&#34; height=&#34;232&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34; allow=&#34;encrypted-media&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Hi everyone, I&amp;rsquo;m Nicole van der Hoeven, back with another Ask a Flooder, and today I want to talk about the effect of fear on your performance outcomes.&lt;/p&gt;
&lt;h2 id=&#34;the-dutch-coronalijn&#34;&gt;The Dutch &amp;ldquo;coronalijn&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;I currently live in Maastricht, in the Netherlands. At the beginning of this global pandemic, the only people getting tested actively for COVID-19 were either people who presented with serious symptoms of the disease, or health care professionals who were continually exposed to the disease and therefore at a higher risk of contracting it.&lt;/p&gt;
&lt;p&gt;Last month, on June 1st, the Dutch government made testing available to everybody. They set up a telephone hotline that any Dutch resident could call to set an appointment to get tested for a COVID-19 test. A task force was dispatched to make sure that they could test up to 30.000 people per day. Yet on the first day of testing, only 1.146 people were tested. So what happened?&lt;/p&gt;
&lt;p&gt;Well, it turned out that the bottleneck of the entire process wasn&amp;rsquo;t getting enough tests, registering the tests, or even processing the test results. The bottleneck actually occurred way before that, when people called up the hotline to get an appointment.&lt;/p&gt;
&lt;p&gt;323.000 people called on the first day that the hotline opened. And not even all of them had called to make an appointment. Some of them were just calling for general information on the coronavirus despite the fact that the government made it clear that that&amp;rsquo;s not what the line was for, and that there were other lines dedicated to information. There were reports on Twitter of people waiting up to 6 hours on the line just to talk to someone who would make an appointment for them. There were calls that got dropped. People said that sometimes it happened in the middle of a call. Even telephone operators that   the appointment system was down or slow and unusable for a lot of it.&lt;/p&gt;
&lt;p&gt;As a result, only 5,500 people actually had appointments booked on a day where there were 323,000 that called. That&amp;rsquo;s 1.70%.&lt;/p&gt;
&lt;h2 id=&#34;what-does-that-have-to-do-with-performance&#34;&gt;What does that have to do with performance?&lt;/h2&gt;
&lt;p&gt;As performance engineers, we like to believe that everything we do is reasoned. We design tests based on quantitative data. We look at historical trends and metrics to help us decide how to build a workload model. But the truth is that that&amp;rsquo;s often not enough.&lt;/p&gt;
&lt;p&gt;If anything, this pandemic has shown us just how wrong our guesses can be, whether or not they&amp;rsquo;re  informed by facts, especially when it has to do with human behavior. We&amp;rsquo;ve seen violent fights erupt over toilet paper. We&amp;rsquo;ve seen peaks and troughs on the stock market that didn&amp;rsquo;t have anything to do with the underlying companies. We&amp;rsquo;ve seen arson on 5G cell towers. Because human beings are irrational, and it&amp;rsquo;s really hard to capture that irrationality in our model for how users are going to behave.&lt;/p&gt;
&lt;p&gt;We may never be able to accurate predict how irrationality is going to affect the load on our application in production. But that doesn&amp;rsquo;t mean that we shouldn&amp;rsquo;t try. There are still things that we can do to mitigate the risk. I think that any application that is public-facing should be assessed for exposure to the risk of fear or other human psychological factors.&lt;/p&gt;
&lt;h2 id=&#34;how-do-we-account-for-fear-in-our-performance-testing&#34;&gt;How do we account for fear in our performance testing?&lt;/h2&gt;
&lt;p&gt;I actually wrote a whole blog post on this particular situation (the Dutch corona line), and how it might have been possible to predict (maybe not with 100% accuracy but with reasonable accuracy) how many people would have called the hotline.&lt;/p&gt;
&lt;p&gt;For example, we can look at statistics like the of the Netherlands or how many people normally get flu-like symptoms or at least report them at this time of the year. These are statistics that are readily available from the Department of Health, and we could have used them to inform our decisions on the workload model for such an application. We may not have gotten it exactly, but we would have at least bin in the same ballpark.&lt;/p&gt;
&lt;p&gt;If we have a good enough idea about the workload that our application would have to handle when it&amp;rsquo;s influenced by fear, we can start running load tests around that. Another good open-ended kind of test to run, especially for applications that are particularly susceptible to fear, is the stress test. In a stress test, you push your application to its limits and you find out what they are. You could, for instance, start with your peak work load, and then add a certain number of users every 30 minutes and see how much your application can actually handle. You can do the same with soak tests, where you&amp;rsquo;re exposing your application to the same amount of load for an extended period of time. Both of those kind of exploratory tests help you define the limits of your application and how it would respond if fear plays a role in the workload model in production.&lt;/p&gt;
&lt;p&gt;If we overlook this critical human element in our test design, then we leave ourselves, and our applications, vulnerable to performance degradation and, perhaps, outages.&lt;/p&gt;
&lt;p&gt;Till next time, happy flooding!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Read &lt;a href=&#34;blog/20200813-dutch-coronavirus-hotline/&#34;&gt;this blog post&lt;/a&gt; for more about the coronavirus hotline.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ask a Flooder 18: How do I load test video streaming with JMeter?</title>
      <link>https://nicolevanderhoeven.github.io/blog/20200722-aaf18/</link>
      <pubDate>Wed, 22 Jul 2020 22:49:15 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20200722-aaf18/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://www.flood.io/blog/ask-a-flooder-18-how-do-i-load-test-video-streaming-with-jmeter-video&#34;&gt;

&lt;p&gt;&lt;em&gt;Originally posted &lt;a href=&#34;https://www.flood.io/blog/ask-a-flooder-18-how-do-i-load-test-video-streaming-with-jmeter-video&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this video, I answer the question: &amp;ldquo;How do I load test video streaming with JMeter?&amp;rdquo;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/Q00briuogto&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Or listen to the audio version here:&lt;/p&gt;


&lt;iframe src=&#34;https://open.spotify.com/embed-podcast/episode/69F5lmOeFfEJr6ZgVWFGOu&#34; width=&#34;100%&#34; height=&#34;232&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34; allow=&#34;encrypted-media&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;http-live-streaming-hls-and-performance&#34;&gt;HTTP Live Streaming (HLS) and performance&lt;/h2&gt;
&lt;p&gt;One of the most popular protocols for video streaming is &lt;a href=&#34;https://developer.apple.com/streaming/examples/&#34;&gt;HTTP Live Streaming&lt;/a&gt;, or HLS, and that&amp;rsquo;s what I&amp;rsquo;m going to show you today. An HLS video ends with the [file extension .m3u8‍](&lt;a href=&#34;https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_4x3/bipbop_4x3_variant.m3u8%5D(https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_4x3/bipbop_4x3_variant.m3u8)&#34;&gt;https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_4x3/bipbop_4x3_variant.m3u8](https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_4x3/bipbop_4x3_variant.m3u8)&lt;/a&gt;. According to the HLS protocol, when a video is streamed, the first request sent must be a manifest. A manifest is sometimes called a playlist, and it is a list of all the chunks or parts that make up the video. Then, each chunk is downloaded.&lt;/p&gt;
&lt;p&gt;To assess the performance of a video stream, we still want the response time of the manifest, the chunks, and the whole video. However, there are many more metrics that are important in video streaming which aren&amp;rsquo;t captured by just the response time. For example, how do you determine whether a video was played smoothly or if it stopped to buffer? A video that keeps pausing might just drive a user away, and it&amp;rsquo;s difficult to tell whether that is happening just from the response time.&lt;/p&gt;
&lt;h2 id=&#34;how-to-load-test-video-streaming-with-jmeter&#34;&gt;How to load test video streaming with JMeter&lt;/h2&gt;
&lt;h3 id=&#34;downloading-and-installing-the-ubik-video-streaming-plugin&#34;&gt;Downloading and installing the Ubik Video Streaming plugin&lt;/h3&gt;
&lt;p&gt;Luckily, there&amp;rsquo;s a plugin for that, created by a company called Ubik Ingénierie. The &lt;a href=&#34;https://ubikloadpack.com/&#34;&gt;Ubik Load Pack&lt;/a&gt; is a set of enterprise-grade plugins for JMeter. One of those plugins is a &lt;a href=&#34;https://ubikloadpack.com/video-streaming-performance.php&#34;&gt;Video Streaming Plugin&lt;/a&gt;, and it happens to be a really easy way to get started with video streaming. This is a paid plugin, but you can &lt;a href=&#34;https://ubikloadpack.com/video-streaming-performance.php#formulaire&#34;&gt;sign up for a free 11-day trial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you do that, you&amp;rsquo;ll get an email from Ubik with a link to download the bundle. Go to lib/ext and then copy this .jar file into the same directory on your JMeter installation. Start up JMeter, and it&amp;rsquo;ll ask you for the license file. Browse to the license file in the bundle you downloaded. JMeter will restart.&lt;/p&gt;
&lt;h3 id=&#34;using-the-jmeter-plugin-in-your-load-testing-script&#34;&gt;Using the JMeter plugin in your load testing script&lt;/h3&gt;
&lt;p&gt;Now let&amp;rsquo;s start creating the Test Plan. Create a Thread group, and then right click on the thread group, go to Add &amp;gt; Sampler and then select the &amp;ldquo;ULP Video Streaming sampler&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Click on the sampler and then paste in the URL to the HLS file that you&amp;rsquo;d like to test. This should end in a .m3u8. This plugin supports several protocols for video streaming, but we can just leave it at auto and it&amp;rsquo;ll automatically detect which one it is.&lt;/p&gt;
&lt;p&gt;In Play Options, you can choose whether to play the entire video or just a part of it, or even whether you want to include the video subtitles in your test.&lt;/p&gt;
&lt;p&gt;This Network Options panel is fantastic because it allows you to limit your network speed. Slow networks, like mobile networks, really affect user experience, so it&amp;rsquo;s really important to take this into account when running load tests. You might even use a parameter here and do something like throttle to 3G speeds for 80% of your traffic, and leave it on Auto 20% of the time. But I&amp;rsquo;ll just leave this blank for now.&lt;/p&gt;
&lt;p&gt;Next, let&amp;rsquo;s add a View Results Tree listener. Then, let&amp;rsquo;s run the script once, just to see if it works.&lt;/p&gt;
&lt;p&gt;As you can see, we can see the manifest retrieved first, and then all the chunks. We didn&amp;rsquo;t get any errors, so let&amp;rsquo;s run this as a load test. We can disable this listener because it just consumes extra resources on our load generator.&lt;/p&gt;
&lt;h3 id=&#34;ramping-up-your-load-test-on-flood&#34;&gt;Ramping up your load test on Flood&lt;/h3&gt;
&lt;p&gt;To ramp this up into a load test, we&amp;rsquo;ll have to go into Thread Group and change these settings. Ideally, we want to be able to change these values from the Flood UI later so we don&amp;rsquo;t have to go into the script whenever we change them, so I&amp;rsquo;ll type in these Flood-specific properties. I&amp;rsquo;ll leave a link in the description about these properties. I&amp;rsquo;ll also set it to run Forever so that we can change the duration and the video will just keep playing to fill that duration.&lt;/p&gt;
&lt;p&gt;To capture some of Ubik&amp;rsquo;s cool metrics, let&amp;rsquo;s add a Simple Data Writer listener here and write the results to a CSV file. On Flood, all flood results are stored on /data/flood/results, so we&amp;rsquo;ll add an output.csv file in that directory that we can download after the test.&lt;/p&gt;
&lt;p&gt;So that&amp;rsquo;s our script! Now we&amp;rsquo;ll have to include the plugin and related files so that Flood can access them as well.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s go back to the bundle we downloaded and go to the bin folder to look for &lt;a href=&#34;http://user.properties/&#34;&gt;user.properties&lt;/a&gt;. Let&amp;rsquo;s open that up, and we&amp;rsquo;ll change the license path to &lt;code&gt;/data/flood/files&lt;/code&gt;, which is the directory that Flood saves files we upload to. To preserve this directory structure, we&amp;rsquo;ll compress just the lib and bin folders.&lt;/p&gt;
&lt;p&gt;On Flood, we&amp;rsquo;ll start a new stream here and upload three things: the jmx script, the license, and the compressed archive of the lib and bin folders from the bundle.&lt;/p&gt;
&lt;p&gt;Then we&amp;rsquo;ll go through the rest of the process here, setting the test parameters. Time to launch the test!&lt;/p&gt;
&lt;h3 id=&#34;analyzing-video-streaming-load-test-results&#34;&gt;Analyzing video streaming load test results&lt;/h3&gt;
&lt;p&gt;Flood shows you results of your load test while it&amp;rsquo;s running as well as after the test. You can see metrics like concurrency, network throughput, transaction rate, and response time for the test. You can also see these metrics for each individual transaction, including the video or sampler as a whole, the manifest, and the chunks.&lt;/p&gt;
&lt;p&gt;To see the CSV that our script generated, we can download the Archived Results from a flood.&lt;/p&gt;
&lt;p&gt;In JMeter, click on Tools &amp;gt; Generate Report and fill in the fields, selecting the output.csv from the flood&amp;rsquo;s Archived Results, JMeter&amp;rsquo;s &lt;a href=&#34;http://user.properties&#34;&gt;user.properties&lt;/a&gt; file, and then an output directory for the report.&lt;/p&gt;
&lt;p&gt;Ubik&amp;rsquo;s plugin creates a few custom graphs in the HTML report:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Buffer fill in Millis&lt;/li&gt;
&lt;li&gt;Lag ratio in percentage&lt;/li&gt;
&lt;li&gt;Lag ratio without buffer fill in percentage&lt;/li&gt;
&lt;li&gt;Lag time in Millis&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Using Ubik&amp;rsquo;s Video Streaming plugin is an easy and thorough way to load test video streaming with JMeter, and I highly recommend it. I used an HLS video to demonstrate it, but this plugin supports several protocols:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HLS&lt;/li&gt;
&lt;li&gt;Mpeg DASH&lt;/li&gt;
&lt;li&gt;Smooth&lt;/li&gt;
&lt;li&gt;Adobe HDS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information, read Ubik&amp;rsquo;s tutorial on how to use their plugin with Flood &lt;a href=&#34;https://www.flood.io/blog/running-a-video-streaming-performance-test-using-flood-io-and-ubikloadpack&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ask a Flooder 17: How do I use unique test data on Element?</title>
      <link>https://nicolevanderhoeven.github.io/blog/20200618-aaf17/</link>
      <pubDate>Thu, 18 Jun 2020 21:58:49 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20200618-aaf17/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://www.flood.io/blog/ask-a-flooder-17-how-do-i-use-unique-test-data-on-element&#34;&gt;

&lt;p&gt;&lt;em&gt;Originally posted on &lt;a href=&#34;https://www.flood.io/blog/ask-a-flooder-17-how-do-i-use-unique-test-data-on-element&#34;&gt;Tricentis Flood&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this video, I talk about how to ensure that Flood Element uses unique test data, using the example of a customer wanting to script unique logins for his application.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/qVpX7MX3jxE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Or listen to the audio version instead:&lt;/p&gt;


&lt;iframe src=&#34;https://open.spotify.com/embed-podcast/episode/7k5TXtoHnswJwBbKHXgJR7&#34; width=&#34;100%&#34; height=&#34;232&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34; allow=&#34;encrypted-media&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;transcript&#34;&gt;Transcript:&lt;/h2&gt;
&lt;p&gt;Hi everyone, Nicole van der Hoeven here again back with another Ask a Flooder, and this week&amp;rsquo;s question is a follow-up question from last week. That user had previously asked about test data in Flood Element. This week he&amp;rsquo;s asking: &amp;ldquo;How do I ensure that Flood Element uses unique test data?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;So this user is actually trying to script a login for an application. He has a list of usernames and corresponding passwords that he wants to use. He&amp;rsquo;s already set both of these up in a CSV file, and he&amp;rsquo;s also set up the Element script in the same way that I outline in my previous video. However, this user is seeing errors in the test due to the application not allowing a given user account to be used simultaneously in two or more devices. The problem is that the way that he&amp;rsquo;s set it up is that he has Element running on multiple nodes, and each node has the chance to pick the same user account.&lt;/p&gt;
&lt;p&gt;So how do you make sure that it&amp;rsquo;s a unique 1:1 ratio for an instance of Element and a user account in the CSV file? If you haven&amp;rsquo;t already watched the previous week&amp;rsquo;s video, you should pause this, watch that, and then come back here, so it makes a little more sense because the script that I&amp;rsquo;m using is building on what we already did in the previous week.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s talk about the differences between this script and the previous week&amp;rsquo;s.&lt;/p&gt;
&lt;p&gt;First, I&amp;rsquo;m declaring a global variable here called &lt;code&gt;globalBrowserID&lt;/code&gt;. The idea is to create a unique and globally identifiable string that I can attach to every account in the CSV file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;globalBrowserID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ENV&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FLOOD_GRID_INDEX&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ENV&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FLOOD_GRID_NODE_SEQUENCE_ID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ENV&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BROWSER_ID&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The global browser ID consists of three parts:- The first is a grid index, which is a number assigned to every grid, and it&amp;rsquo;s also globally unique. So if there are three grids being used in the test, then the grid indexes would be 0, 1, and 2.- The second one is a grid node sequence ID, and this is unique within the grid. The node sequence ID is a number that is assigned to every node in a single grid.- The last one is a browser ID. The browser ID is a number assigned to an instance of Element running on a single node.&lt;/p&gt;
&lt;p&gt;These are all zero-based, so the very first instance of Element running on the very first node and on the very first grid in the entire test would be &lt;code&gt;0_0_0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re going to have to modify our CSV file to make use of this browser ID. So whereas the user previously had username and password, I&amp;rsquo;ve added an ID column. From then, these will have to be sequential. So &lt;code&gt;0_0_0&lt;/code&gt;, &lt;code&gt;0_0_1...&lt;/code&gt; And &lt;code&gt;0_0_1&lt;/code&gt; would be the second instance of Element running still on the first node, on the first grid. And you can make as many of these as you need.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;id,username,password
0_0_0,user1,password1
0_0_1,user2,password2
0_0_2,user3,password3
1_0_0,user4,password4
1_0_1,user5,password5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve also modified the interface &lt;code&gt;UserData&lt;/code&gt; to describe the fields in the CSV file. So there&amp;rsquo;s &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt;, and &lt;code&gt;password&lt;/code&gt;, and I&amp;rsquo;ve defined them all as strings.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TestData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromCSV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UserData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;users_multiplegrids.csv&amp;#39;&lt;/span&gt;)
  .&lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;line&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;browserID&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;line&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;globalBrowserID&lt;/span&gt;)
  .&lt;span style=&#34;color:#a6e22e&#34;&gt;circular&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This line is telling Element to take this data file with this filename and filter it based on the line, the index, and the browserID such that &lt;code&gt;id&lt;/code&gt; is equal to the browser ID. So what happens here is that Element will take the global browser ID, which let&amp;rsquo;s say is &lt;code&gt;0_0_0&lt;/code&gt; for the very first one. It&amp;rsquo;ll then take that &lt;code&gt;0_0_0&lt;/code&gt; and look at the CSV file for anything in the ID field that has the value &lt;code&gt;0_0_0&lt;/code&gt;. And then it will continue to use the rest of that line.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve also made the CSV file circular just because that&amp;rsquo;s always a good practice to get into.&lt;/p&gt;
&lt;p&gt;And as always, I think it&amp;rsquo;s a great idea to debug this, especially when you&amp;rsquo;re dealing with multiple grids and multiple nodes on that grid.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Print to console&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;browser&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Browser&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserData&lt;/span&gt;) =&amp;gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;global browser ID: &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;globalBrowserID&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;| user: &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; | password: &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;)    
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve also added the username and password here, just in case we need to verify the state that that user is in.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s run the test. Since we&amp;rsquo;re just running this locally, we&amp;rsquo;ll see that the first value indeed is &lt;code&gt;0_0_0&lt;/code&gt;, and the user we&amp;rsquo;re selecting is &lt;code&gt;user1&lt;/code&gt; and &lt;code&gt;password1&lt;/code&gt;, which lines up with the username and password values corresponding to &lt;code&gt;0_0_0&lt;/code&gt; in the CSV file.&lt;/p&gt;
&lt;p&gt;I hope that helped, and until next time, happy flooding!&lt;/p&gt;
&lt;p&gt;Download the &lt;a href=&#34;https://github.com/flood-io/load-testing-playground/blob/master/element/test-data/example.ts&#34;&gt;full script&lt;/a&gt; and the &lt;a href=&#34;https://github.com/flood-io/load-testing-playground/blob/master/element/test-data/users.csv&#34;&gt;data file&lt;/a&gt; to follow along.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ask a Flooder 16: How do I use test data with Element?</title>
      <link>https://nicolevanderhoeven.github.io/blog/20200609-aaf16/</link>
      <pubDate>Tue, 09 Jun 2020 22:18:41 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20200609-aaf16/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://www.flood.io/blog/ask-a-flooder-16-how-do-i-use-test-data-with-element-video&#34;&gt;

&lt;p&gt;&lt;em&gt;Originally posted on &lt;a href=&#34;https://www.flood.io/blog/ask-a-flooder-16-how-do-i-use-test-data-with-element-video&#34;&gt;Tricentis Flood&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this video, I discuss how to make your load testing scripts more realistic by including test data. The load testing tool I use is &lt;a href=&#34;https://element.flood.io/&#34;&gt;Flood Element&lt;/a&gt;, but you can apply these principles to any tool. You&amp;rsquo;ll find a copy of the Element script I used below.&lt;/p&gt;
&lt;p&gt;‍
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/EGhVm-R12qI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;And, if you prefer, here&amp;rsquo;s the audio version:&lt;/p&gt;


&lt;iframe src=&#34;https://open.spotify.com/embed-podcast/episode/4OW5slSCmAuBc9NPa1NKtk&#34; width=&#34;100%&#34; height=&#34;232&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34; allow=&#34;encrypted-media&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;transcript&#34;&gt;Transcript&lt;/h2&gt;
&lt;p&gt;Hi everyone, Nicole van der Hoeven here back with another Ask a Flooder, and this time the question is: How do I use test data with Flood Element?&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s talk about why you might want to use test data. In load testing, it&amp;rsquo;s important to make your scripts behave as similarly to real users as possible so that the load that you generate is production-like. The problem is that if you send the same data over and over again to the server, that server is probably going to cache that response. The response being cached means that the server will return the response way faster than it normally would if it had been a unique request. So we can use test data, instead of static data hardcoded in your scripts, to make sure that this doesn&amp;rsquo;t happen.&lt;/p&gt;
&lt;p&gt;Using test data can also help us test different responses. For example, let&amp;rsquo;s say we&amp;rsquo;re testing a loan application system, where a user inputs the application ID, the server looks it up, and returns the status of that loan application. Now, loan applications might be in different stages of the process. For instance, some might be saved but not submitted, or maybe they&amp;rsquo;ve been submitted but failed the identity verification check.&lt;/p&gt;
&lt;p&gt;If we used the same application ID every time, then the server would always return the same status and the same details. Instead, let&amp;rsquo;s create a CSV file that we can use as test data. It might look something like this.‍&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;applicationId
A100001
B100002
C100003
D100004
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can have &lt;code&gt;applicationId&lt;/code&gt; as the single header here, and we can populate this with a list of different application IDs in different stages of the process. That way, when we run the script, the server will have to respond authentically to every request without it being cached.&lt;/p&gt;
&lt;p&gt;Now to create our script. This is an empty Element script. To start with, make sure you&amp;rsquo;re importing &lt;code&gt;TestData&lt;/code&gt; here in the first line of your script.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;TestSettings&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Until&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;By&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Browser&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;TestData&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@flood/element&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first thing we&amp;rsquo;re going to need to do is to create an interface for the CSV file. Let&amp;rsquo;s call it &lt;code&gt;AppData&lt;/code&gt;. Within this interface, we&amp;rsquo;ll need to define all the fields that we intend to use in our data file and what type of values we can expect to be in those fields. Looking at our CSV here, we&amp;rsquo;ve just got the application ID, so I&amp;rsquo;m just going to copy that, and it&amp;rsquo;s a mixture of characters and numbers, so I&amp;rsquo;m going to put that in as a string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AppData&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;applicationId&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we need to tell Element how to find this test data. We&amp;rsquo;ll say that it&amp;rsquo;s from the CSV, using the interface we&amp;rsquo;ve just created. Now we&amp;rsquo;ll tell Element the filename. In this situation, the CSV file that I&amp;rsquo;m using is actually in the same directory, so I don&amp;rsquo;t need to specify a path here, but if you&amp;rsquo;re putting it somewhere else, then you&amp;rsquo;ll need to specify the folder and the path to it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TestData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromCSV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AppData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;applicationids.csv&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s use the data in a step. In real life, you might want to use an application ID to type it into a text field, but for demonstration purposes, I&amp;rsquo;m just going to show you how to output it to the console log. Printing to the console is also a good way to debug your tests, especially if you&amp;rsquo;re dealing with test data.&lt;/p&gt;
&lt;p&gt;We need to let Element know that we want to use AppData. So now, let&amp;rsquo;s output this to the console. Since we&amp;rsquo;re just debugging, let&amp;rsquo;s output the application ID. To actually get the value from the data file, we&amp;rsquo;ll use this syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Print to console&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;browser&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Browser&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AppData&lt;/span&gt;) =&amp;gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application ID: &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;applicationId&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;) 
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;‍By default, Element reads the data files sequentially. The problem with that is we only have a handful of application IDs. So if we wanted to run this one script 100 times, we&amp;rsquo;re going to run out of data. What we can do here is add &lt;code&gt;circular&lt;/code&gt;. That way, when the script reaches the very last value of the file, the next value it selects will be the first one, and it never runs out of test data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TestData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromCSV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AppData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;applicationids.csv&amp;#39;&lt;/span&gt;)    
  .&lt;span style=&#34;color:#a6e22e&#34;&gt;circular&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another thing you might be wondering is how to make it so that Element chooses a random value every time. To do that, we&amp;rsquo;ll also have to add &lt;code&gt;shuffle&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TestData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromCSV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AppData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;applicationids.csv&amp;#39;&lt;/span&gt;)    
  .&lt;span style=&#34;color:#a6e22e&#34;&gt;circular&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;‍Now let&amp;rsquo;s try to run the test.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;element run test-data.ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, it&amp;rsquo;s been finished. The application ID that was selected was indeed a random one because the first one would have started with A. So, it actually chose the last one randomly.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s it for test data with Element. Now, this user actually had a follow-up question, which was about unique test data. I&amp;rsquo;m going to answer that in the next video. Until next time, happy Flooding!&lt;/p&gt;
&lt;h2 id=&#34;sample-script&#34;&gt;Sample script&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;TestSettings&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Until&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;By&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Browser&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;TestData&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@flood/element&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;assert&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;settings&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestSettings&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {    
  &lt;span style=&#34;color:#a6e22e&#34;&gt;loopCount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,    
  &lt;span style=&#34;color:#a6e22e&#34;&gt;description&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Test Data&amp;#39;&lt;/span&gt;,    
  &lt;span style=&#34;color:#a6e22e&#34;&gt;screenshotOnFailure&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,    
  &lt;span style=&#34;color:#a6e22e&#34;&gt;disableCache&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,    
  &lt;span style=&#34;color:#a6e22e&#34;&gt;clearCache&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,    
  &lt;span style=&#34;color:#a6e22e&#34;&gt;clearCookies&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
}

&lt;span style=&#34;color:#75715e&#34;&gt;/*** Test Data * Version: 1.0 */&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; () =&amp;gt; {    
  &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AppData&lt;/span&gt; {        
    &lt;span style=&#34;color:#a6e22e&#34;&gt;applicationId&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;    }    
  &lt;span style=&#34;color:#a6e22e&#34;&gt;TestData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromCSV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AppData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;applicationids.csv&amp;#39;&lt;/span&gt;)    
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;circular&lt;/span&gt;()    
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;shuffle&lt;/span&gt;()    
  &lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Print to console&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;browser&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Browser&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AppData&lt;/span&gt;) =&amp;gt; {        
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application ID: &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;applicationId&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;)    
  })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Hybrid load testing: the best of testing using protocols and real browsers</title>
      <link>https://nicolevanderhoeven.github.io/blog/20200602-hybrid-load-testing/</link>
      <pubDate>Tue, 02 Jun 2020 22:21:11 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20200602-hybrid-load-testing/</guid>
      <description>&lt;p&gt;At &lt;a href=&#34;https://guildconferences.com/speaker/nicole-hoeven/&#34;&gt;PerfGuild 2020&lt;/a&gt;, I spoke about hybrid load testing and how to mix two different approaches to load testing: protocol-based and browser-based.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/20200602-01.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here’s the unlisted video from that presentation:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/KwlU6unOD9E&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Load testing on the Google Cloud Platform</title>
      <link>https://nicolevanderhoeven.github.io/blog/20200528-load-testing-on-google-cloud-platform/</link>
      <pubDate>Thu, 28 May 2020 22:25:06 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20200528-load-testing-on-google-cloud-platform/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://www.flood.io/blog/load-testing-on-the-google-cloud-platform&#34;&gt;

&lt;p&gt;&lt;em&gt;Originally posted &lt;a href=&#34;https://www.flood.io/blog/load-testing-on-the-google-cloud-platform&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re excited to welcome another cloud provider to the Flood lineup,  giving you even more options for running your load tests. You can now  use Flood to run load tests on the &lt;a href=&#34;https://cloud.google.com/&#34;&gt;Google Cloud Platform (GCP)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Many of you have requested an integration with Google Cloud, citing many of its strengths:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Full &lt;a href=&#34;https://cloud.google.com/blog/products/open-source/bringing-the-best-of-open-source-to-google-cloud-customers&#34;&gt;integrations with open-source tools&lt;/a&gt; like Influx and Redis&lt;/li&gt;
&lt;li&gt;World-class &lt;a href=&#34;https://cloud.google.com/security&#34;&gt;security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;High-performance &lt;a href=&#34;https://cloud.google.com/infrastructure&#34;&gt;global network&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Seamless access to other apps in the Google ecosystem, such as Search and Maps&lt;/p&gt;
&lt;p&gt;We think that adding support for GCP instances opens up a lot of  opportunities for flooders wanting to take advantage of these benefits.&lt;/p&gt;
&lt;h2 id=&#34;using-flood-with-google-cloud&#34;&gt;Using Flood with Google Cloud&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ll notice a new Google Cloud section in &lt;a href=&#34;https://app.flood.io/account/integrations&#34;&gt;the Integrations page&lt;/a&gt; while you&amp;rsquo;re logged into Flood:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/20200528-01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll need to add your GCP service account key to allow Flood to access your  account on your behalf. Once you&amp;rsquo;ve done this, you&amp;rsquo;ll be able to start  grids and floods right from the Flood interface you&amp;rsquo;re already using.&lt;/p&gt;
&lt;p&gt;For more details on how to set up Flood to use your GCP account, check out &lt;a href=&#34;https://guides.flood.io/infrastructure/host-your-own-infrastructure/using-your-own-google-cloud-account&#34;&gt;our documentation&lt;/a&gt; or follow along with the video below:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/oYTo0jwRfMo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Anyone with a Flood subscription, including a free one, can use Google Cloud instances at no extra cost from Flood; however, GCP usage  may incur separate costs.&lt;/p&gt;
&lt;p&gt;GCP is the third cloud provider that we support at Flood, after &lt;a href=&#34;https://guides.flood.io/infrastructure/host-your-own-infrastructure/using-your-own-aws-account&#34;&gt;Amazon Web Services&lt;/a&gt; and &lt;a href=&#34;https://guides.flood.io/infrastructure/host-your-own-infrastructure/using-your-own-azure-account&#34;&gt;Microsoft Azure&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ask a Flooder 15: How do I install Element?</title>
      <link>https://nicolevanderhoeven.github.io/blog/20200512-aaf15/</link>
      <pubDate>Tue, 12 May 2020 22:45:18 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20200512-aaf15/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://www.flood.io/blog/ask-a-flooder-15-how-do-i-install-element-video&#34;&gt;

&lt;p&gt;&lt;em&gt;Originally posted &lt;a href=&#34;https://www.flood.io/blog/ask-a-flooder-15-how-do-i-install-element-video&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this Flood Element tutorial, I demonstrate the steps required to install Flood Element, including dependencies it requires. Flood Element is an open-source browser-based load testing tool created by Tricentis Flood.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://bit.ly/2YM1mnV&#34;&gt;Learn more about Flood Element&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/download/current/&#34;&gt;Installation instructions for NodeJS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://classic.yarnpkg.com/en/docs/install/&#34;&gt;Installation instructions for Yarn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://bit.ly/2yuYrWl&#34;&gt;Installation instructions for Element&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=oWtnStKrh98&#34;&gt;Video: Getting Started with Element&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://bit.ly/2YJIQg5&#34;&gt;Guides: Using Element with Flood‍&lt;/a&gt;&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/N7VLqqueqJE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Audio version here:&lt;/p&gt;


&lt;iframe src=&#34;https://open.spotify.com/embed-podcast/episode/6EZ97ImNGUiDAGcEyGGNYM&#34; width=&#34;100%&#34; height=&#34;232&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34; allow=&#34;encrypted-media&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;transcript&#34;&gt;Transcript&lt;/h2&gt;
&lt;p&gt;Hi everyone, Nicole van der Hoeven here again, back with another Ask a Flooder, and today&amp;rsquo;s question is: &amp;ldquo;How do I install Element?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Now, I already made a previous video on how to get started with Element, but I didn&amp;rsquo;t actually go into the details of how to install it, so that&amp;rsquo;s what I&amp;rsquo;m going to do in this video today. There are actually a few parts to installing Element, and all of these instructions are going to be on &lt;a href=&#34;http://element.flood.io/&#34;&gt;element.flood.io&lt;/a&gt;. If you go onto the site and click on Install, you&amp;rsquo;ll see all of the instructions depending on which operating system you&amp;rsquo;re on.&lt;/p&gt;
&lt;p&gt;First, you need to install NodeJS. This is sort of like how, if you&amp;rsquo;re familiar with JMeter, you have to install Java before installing JMeter. NodeJS is what Element runs on. Secondly, you&amp;rsquo;ll need a package manager. You can use NPM or Yarn, but in this video, I&amp;rsquo;m going to take you through how to do it with Yarn. And thirdly, there&amp;rsquo;s installing Element itself.&lt;/p&gt;
&lt;p&gt;First, download NodeJS. I&amp;rsquo;m going to leave links in the description to all of the sites that I visit so that you can go through all of the instructions later. On the Node site, download whichever installer suits your operating system. Go through the installation steps, and afterwards, check to make sure that NodeJS is properly installed on your machine. You can do that by going into the terminal and typing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;node -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just make sure that the version that&amp;rsquo;s shown here is the same version that you&amp;rsquo;ve downloaded.&lt;/p&gt;
&lt;p&gt;Secondly, install the latest version of Yarn. On the Yarn site, you&amp;rsquo;re going to have to choose your operating system and the version. We recommend using the latest stable version. And then go through the instructions for your operating system. After you&amp;rsquo;ve done that, check your Yarn installation by typing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;yarn --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the last step is installing Element. On the Element site, you can find the exact code that you need to type into your terminal. It&amp;rsquo;s:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;yarn global add @flood/element-cli 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So you can just copy that into your terminal. As of the time of this recording, the latest version of Element is 1.2.3. Looks like that&amp;rsquo;s installed. To check the version of Element, type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;element --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So that&amp;rsquo;s how to install Element. We&amp;rsquo;ve gotten a lot of questions recently about Element in particular, so I&amp;rsquo;m going to answering them in future videos. Hope this helped, and until next time, happy flooding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ask a Flooder 13: How do you do mobile load testing?</title>
      <link>https://nicolevanderhoeven.github.io/blog/20200428-aaf13/</link>
      <pubDate>Tue, 28 Apr 2020 23:21:08 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20200428-aaf13/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://www.flood.io/blog/ask-a-flooder-13-how-do-you-do-mobile-load-testing&#34;&gt;

&lt;p&gt;&lt;em&gt;Originally posted &lt;a href=&#34;https://www.flood.io/blog/ask-a-flooder-13-how-do-you-do-mobile-load-testing&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;How do you load test a native mobile app? I discuss the general approach to mobile load testing, what a device farm is, and why a device farm isn&amp;rsquo;t necessary for load testing. I also discuss the best mobile load testing tools to use.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/y_rRu0cDey4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Or listen to the audio version here:&lt;/p&gt;


&lt;iframe src=&#34;https://open.spotify.com/embed-podcast/episode/2fevtJd7pPIAUDkMpdnzkV&#34; width=&#34;100%&#34; height=&#34;232&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34; allow=&#34;encrypted-media&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Hi everyone, Nicole here again, back with another Ask a Flooder, and today&amp;rsquo;s question is:&lt;/p&gt;
&lt;h2 id=&#34;how-do-you-do-mobile-load-testing&#34;&gt;How do you do mobile load testing?&lt;/h2&gt;
&lt;p&gt;Now, this question came from a customer who was under the misconception that in order to do mobile load testing, they would need to use what we call a device farm. A device farm is a collection of different kinds of mobile phones. You would ideally have the most popular makes of mobile phones (the hardware models) and the operating systems and system versions. You can imagine that this can very easily get a little out of hand to coordinate because of fragmentation. There are just so many devices out on the market, and then there&amp;rsquo;s the question of how you actually generate the load from that.&lt;/p&gt;
&lt;p&gt;You would somehow need some sort of test automation script that was running and then coordinate os that they all run at the same time, and you would use that as a load test. As you can imagine, whether you use real devices or simulators, this kind of thing would get complicated and expensive very quickly. But the good news is that it&amp;rsquo;s unnecessary if it&amp;rsquo;s load testing that you want to do. Now I say that because, for functional testing or compatibility testing, you ARE going to want to test your application on a variety of different browsers. But with load testing, you&amp;rsquo;re really more concerned about the back end part of the equation. You want to generate load on your application servers. In reality, most mobile apps work by sending API requests to that server, usually by some sort of restful API. Luckily, API load testing has been around for a while, so we do have some industry-tested ways to run this.&lt;/p&gt;
&lt;h2 id=&#34;what-are-the-best-tools-for-api-load-testing&#34;&gt;What are the best tools for API load testing?&lt;/h2&gt;
&lt;p&gt;Essentially, you&amp;rsquo;re going to want to test protocol-level tools. That means that you don&amp;rsquo;t want to be using browser-level tools in which you&amp;rsquo;re using scripts to drive a full browser. All you really need is something that sends requests on the protocol-level. That&amp;rsquo;s great because it&amp;rsquo;s actually way more efficient.&lt;/p&gt;
&lt;p&gt;You have two really good open-source options for this, JMeter and Gatling. I&amp;rsquo;ve already gone a little bit into the differences between these two in my previous video on how you choose a tool for load testing, which I will leave a link to.&lt;/p&gt;
&lt;p&gt;And here are some other resources that will help you get started with mobile load testing. I also have another video about how to record network traffic from a native mobile app on JMeter, which sounds a little complicated, but I promise it&amp;rsquo;s not. In that video, I go over the steps with you, and I&amp;rsquo;m actually doing it in real-time with you as well. I show you the screen recording from my mobile and from JMeter on my laptop, so you can always pause and watch it at your own pace.&lt;/p&gt;
&lt;p&gt;The second thing is that I already wrote a blog post, which is sort of a guide for mobile load testing, which goes into the steps into way more detail than I can here.&lt;/p&gt;
&lt;p&gt;And lastly, I have written blog posts about two real-life examples of mobile load testing. The first one was the Iowa Caucus Reporter app. I ran through it from the workload modeling to the scripting and then the actual execution. More recently, I also wrote about the Robinhood app. Be sure to check out the links in the description to find out more.&lt;/p&gt;
&lt;p&gt;Until next time, happy flooding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ask a Flooder 12: Puppeteer vs Selenium: which one is better for load testing?</title>
      <link>https://nicolevanderhoeven.github.io/blog/20200421-aaf12/</link>
      <pubDate>Tue, 21 Apr 2020 17:36:28 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20200421-aaf12/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://www.flood.io/blog/ask-a-flooder-12-puppeteer-vs-selenium-which-one-is-better-for-load-testing&#34;&gt;

&lt;p&gt;&lt;em&gt;Originally posted &lt;a href=&#34;https://www.flood.io/blog/ask-a-flooder-12-puppeteer-vs-selenium-which-one-is-better-for-load-testing&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When it comes to software testing, the debate of Puppeteer vs Selenium is a hot one. Nicole tackles it here to determine which one is better for load testing in particular. Spoiler: The answer is still &amp;ldquo;it depends&amp;rdquo;.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/K61W7ivhsuE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Or catch the audio version here:&lt;/p&gt;


&lt;iframe src=&#34;https://open.spotify.com/embed-podcast/episode/76u25lI7sFx5SwgbsFLU5Z&#34; width=&#34;100%&#34; height=&#34;232&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34; allow=&#34;encrypted-media&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Hi everyone, Nicole here again, back for another Ask a Flooder, and today, the question is: &amp;ldquo;Puppeteer vs. Selenium: which one is better for load testing?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re actually getting this quite a bit now as Puppeteer grows in popularity, but first, let&amp;rsquo;s discuss the similarities. They&amp;rsquo;re tools that you can use to drive browsers. The work by identifying and interacting with elements on a website in the same way that a user would. They are also both open-source, and both can be used for load testing. This is a great strategy because instead of writing tests for an automation suite and then tests for load testing, you can just write the one test suite and re-use it, so it saves a lot of resources in the end. To answer this question, I&amp;rsquo;m going to focus on load testing because that&amp;rsquo;s what my experience is in.&lt;/p&gt;
&lt;h2 id=&#34;difference-between-selenium-and-puppeteer&#34;&gt;Difference between Selenium and Puppeteer&lt;/h2&gt;
&lt;h3 id=&#34;pros-and-cons-of-selenium&#34;&gt;Pros and cons of Selenium&lt;/h3&gt;
&lt;p&gt;Now for the difference. Selenium supports more browsers than does Puppeteer. It supports Chrome, Firefox, IE, Safari, and Opera, so there are a lot more options to choose from depending on your application.&lt;/p&gt;
&lt;p&gt;Selenium is also what I would call automation-first. It was built with automation in mind, which means it&amp;rsquo;s very good at that. It&amp;rsquo;s very robust, and if you have a complicated test scenario, Selenium is an excellent choice.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also been around for much longer than Puppeteer, which is important because that means it&amp;rsquo;s had more time to build up a community. There are way more resources and tutorials for Selenium than for Puppeteer.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also, unfortunately, very resource-intensive. That&amp;rsquo;s not something that you would typically care too much about from a test automation perspective, but when you&amp;rsquo;re running thousands of users on the cloud, it IS important to keep in mind that Selenium, just because of how it&amp;rsquo;s built and its complexity, can only run about five users per node. We&amp;rsquo;ve found that out at Flood, after baselining specifically an AWS m5.xlarge instance. So you can look at the specs of that and compare it with the machines that you&amp;rsquo;re wanting to run Selenium on, to see how that would equate for you.&lt;/p&gt;
&lt;h3 id=&#34;pros-and-cons-of-puppeteer&#34;&gt;Pros and cons of Puppeteer&lt;/h3&gt;
&lt;p&gt;Puppeteer is a NodeJS library developed by Google, which means it plays very well with Chrome. There are a whole lot of things that you have access to with Puppeteer, and if you&amp;rsquo;re using it with Chrome, pretty much anything in Chrome, including rendering times, you can see and access with a Puppeteer script. So that&amp;rsquo;s a huge advantage.&lt;/p&gt;
&lt;p&gt;Unfortunately, that also means it supports fewer browsers. Obviously, it supports Chrome very well, and they recently came out with support for Firefox, although they do have plans to incorporate support for more browsers in the future.&lt;/p&gt;
&lt;p&gt;One of Puppeteer&amp;rsquo;s advantages is that we at Flood actually created a tool on top of Puppeteer. It&amp;rsquo;s also open-source. It&amp;rsquo;s called Flood Element, and Element is built to be performance-first because obviously, that&amp;rsquo;s what we had in mind when we were building it. It takes everything that&amp;rsquo;s good about Puppeteer and makes it really easy to set parameters that you normally would expect to need for load testing, like users and ramp-up.&lt;/p&gt;
&lt;p&gt;This also means that it&amp;rsquo;s way less resource-intensive. I said that with Selenium, you can run up to five users on an AWS m5.xlarge instance, and for the same instance type, you can run, from our experiments, anywhere from 30-50 Element scripts/users. That is a huge saving when you&amp;rsquo;re running a really large-scale test.&lt;/p&gt;
&lt;h2 id=&#34;should-you-choose-selenium-or-puppeteer-for-load-testing&#34;&gt;Should you choose Selenium or Puppeteer for load testing?&lt;/h2&gt;
&lt;p&gt;I would say that if you already have a large Selenium automation suite, if you have a complex test scenario, or if you aren&amp;rsquo;t running that many users for your load test, then Selenium is a great choice. If you ARE running thousands of users, though, and resource efficiency, and therefore cost efficiency, is really important to you, then choose Element.&lt;/p&gt;
&lt;p&gt;My advice is always to try both. If you have the time, do a proof of concept with both of them. That way, your whole team can better understand what the pros and cons are for each one and decide which one is best going forward. Or maybe you don&amp;rsquo;t even decide on one. At Flood, we support both of them at the same price, so it depends on what you prefer.&lt;/p&gt;
&lt;p&gt;Until next time, happy flooding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ask a Flooder 11: What are the best JMeter plugins?</title>
      <link>https://nicolevanderhoeven.github.io/blog/20200414-aaf11/</link>
      <pubDate>Tue, 14 Apr 2020 19:47:53 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20200414-aaf11/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://www.flood.io/blog/ask-a-flooder-11-what-are-the-best-jmeter-plugins&#34;&gt;

&lt;p&gt;&lt;em&gt;Originally posted &lt;a href=&#34;https://www.flood.io/blog/ask-a-flooder-11-what-are-the-best-jmeter-plugins&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this video, I talk about how to install the JMeter Plugin Manager as well as other plugins, what the best JMeter plugins are, and why you need them. JMeter is an open-source load testing tool that is already robust, but there are some fantastic plugins that have been developed for it that you might want to use in your next load test.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/eYyLoH-FQrk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Audio version here:&lt;/p&gt;


&lt;iframe src=&#34;https://open.spotify.com/embed-podcast/episode/36GUgvf17bRwmJxg8CNkvy&#34; width=&#34;100%&#34; height=&#34;232&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34; allow=&#34;encrypted-media&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Hi everyone, Nicole here, back again for another Ask a Flooder, and I hope everybody is staying alert, not anxious, during these crazy times. In today&amp;rsquo;s Ask a Flooder, our customer asks: &amp;ldquo;What are the best JMeter plugins?&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;what-is-a-jmeter-plugin&#34;&gt;What is a JMeter plugin?&lt;/h2&gt;
&lt;p&gt;So first, I want to talk about what a JMeter plugin is and how you can actually install one. Apache JMeter is a really great, robust load testing that is one of my personal favorites. There are still some things that could be done better or could be extended, and the great thing about being an open-source tool is that anybody, pretty much, can just jump in and develop these plugins for JMeter to extend functionality, so that it supports more protocols or to customize load profiles in a way that is easier. We already have &lt;a href=&#34;https://flood.io/blog/jmeter-plugins-the-top-10-plugins-and-how-they-help&#34;&gt;a blog post on this&lt;/a&gt;, and I will leave a link to that article as well in the description because it goes into a lot more detail. However, I still want to give you my personal top 3 JMeter plugins.&lt;/p&gt;
&lt;h2 id=&#34;how-do-you-install-a-jmeter-plugin&#34;&gt;How do you install a JMeter plugin?&lt;/h2&gt;
&lt;p&gt;You can install a plugin for JMeter in two ways.&lt;/p&gt;
&lt;p&gt;One is to download it from &lt;a href=&#34;https://jmeter-plugins.org/&#34;&gt;JMeter Plugins&lt;/a&gt;, which I will give you a link to, and then you paste that into either the lib — it&amp;rsquo;s usually in the lib folder, but it could be in the ext (extensions) folder. Each plugin is going to differ as to what you need to copy into what folder, but that&amp;rsquo;s why I prefer the second method, which is the &lt;a href=&#34;https://jmeter-plugins.org/wiki/PluginsManager/&#34;&gt;Plugin Manager&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Plugin Manager is a plugin itself, so you will initially need to do that copy and pasting of the jar file. Once you have the JMeter Plugin Manager installed, downloading and installing a plugin is as simple as choosing which ones you want and then clicking install. JMeter restarts, and that&amp;rsquo;s pretty much it. So I do recommend that the Plugin Manager be the first plugin that you install. But that&amp;rsquo;s still not my top 3 favorite - that&amp;rsquo;s just an optional step.&lt;/p&gt;
&lt;h2 id=&#34;what-are-the-top-3-jmeter-plugins&#34;&gt;What are the top 3 JMeter plugins?&lt;/h2&gt;
&lt;h3 id=&#34;custom-thread-groups&#34;&gt;Custom Thread Groups&lt;/h3&gt;
&lt;p&gt;Now for the actual plugins. My #1 favorite is the Custom Thread Groups. See, with JMeter, you get the standard default thread group, and all that does is it asks you how many users you want to run, how many loops, the duration, and the ramp-up. That&amp;rsquo;s it. So that&amp;rsquo;s good for a lot of uses, but it doesn&amp;rsquo;t really help you in cases where maybe you want to plan a spike test, and you want to make sure that all the users have fully ramped up and gotten to a certain point, and then all hit the server at once. Or maybe you want to do a step load. Previously I&amp;rsquo;ve discussed stress testing and how a step load can be useful for that. In that case, the Thread Group doesn&amp;rsquo;t quite cut it because it only ramps up a user, and then it continues at the same level of load for the duration of the test.&lt;/p&gt;
&lt;p&gt;So, if you want any sort of variation in the middle (increasing users or decreasing), then you&amp;rsquo;re going to want something else.The Custom Thread Groups plugin has a lot of different types of thread groups. My favorite is the Ultimate One because you can probably do almost anything on that one. It also has the Stepping, Concurrency, Arrivals, and Free-Form Arrivals, so you have quite a few options.&lt;/p&gt;
&lt;h3 id=&#34;throughput-shaping-timer&#34;&gt;Throughput Shaping Timer&lt;/h3&gt;
&lt;p&gt;Plugin #2 is the Throughput Shaping Timer. I love it because not a lot of load testing tools, even the proprietary ones, actually have this. This is really handy when you have a project where you&amp;rsquo;re given a requirement that isn&amp;rsquo;t in terms of the number of users; it&amp;rsquo;s in terms of hits per second, or requests per second, or something to do with the actual throughput of the test.&lt;/p&gt;
&lt;p&gt;The problem with that is that the throughput tends to change, so you can&amp;rsquo;t actually take as a given that it&amp;rsquo;ll remain constant for the duration of the test. Things like response time or latency are going to affect that throughput. For instance, when you have one user or one thread that&amp;rsquo;s running, and it sends a request and receives the response back in one second, you can&amp;rsquo;t necessarily say that that&amp;rsquo;s going to be the same when there are a thousand threads doing the same thing. The server&amp;rsquo;s under more load, so maybe it&amp;rsquo;ll take five seconds instead of one second— but that&amp;rsquo;s already changed your throughput. Before, one thread was doing one request per second, and now it&amp;rsquo;s doing one request every five seconds.&lt;/p&gt;
&lt;p&gt;So it can get a little complicated, and the Throughput Shaping Timer is one of my favorites because it promises to solve all that. The Throughput Shaping Timer dynamically changes the think time, so at the beginning of a test, for instance, when there are no response time issues and requests are being returned really quickly, it might increase the think time so that it slows down your load test. So you&amp;rsquo;re not going over that throughput that you wanted to maintain. And then later on in the test, when all the users are ramped up, then it&amp;rsquo;ll decrease the think time that it uses. So it&amp;rsquo;s great because you just have this consistent throughput throughout your test. It&amp;rsquo;s a really intelligent way to test.&lt;/p&gt;
&lt;p&gt;I do want to say, though, that you do also want to play around with this a bit and make sure you understand how this works. One page could have several requests in it, and you&amp;rsquo;ll want to take that into consideration when you&amp;rsquo;re choosing what to set in that timer.&lt;/p&gt;
&lt;h3 id=&#34;http2-request-sampler&#34;&gt;HTTP/2 Request Sampler&lt;/h3&gt;
&lt;p&gt;My #3 is the HTTP/2 Sampler. If you don&amp;rsquo;t know what HTTP/2 is, it&amp;rsquo;s an upgraded or next-generation protocol to the normal HTTP that we already use. The HTTP/2 protocol is supposed to be faster and more efficient, so more and more web apps are switching to it because of that.&lt;/p&gt;
&lt;p&gt;The problem is that JMeter&amp;rsquo;s HTTP request sampler is only really for HTTP sites, so the HTTP/2 sampler is an upgraded version of the HTTP sampler. It&amp;rsquo;s really easy to use. The experience is pretty much going to be the same for you, but in the background, it uses the faster HTTP/2 protocol rather than the slower one.&lt;/p&gt;
&lt;p&gt;My colleague, Jason Rizio, actually &lt;a href=&#34;https://flood.io/blog/jmeter-tutorial-http2-test&#34;&gt;wrote a whole blog post about this&lt;/a&gt;, so if you want to learn more, I will put a link in the description.&lt;/p&gt;
&lt;p&gt;I hope that answered your question, and until next time, happy flooding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing Flood Agent: standalone infrastructure for load testing</title>
      <link>https://nicolevanderhoeven.github.io/blog/20200407-introducing-flood-agent/</link>
      <pubDate>Tue, 07 Apr 2020 19:03:42 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20200407-introducing-flood-agent/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://www.flood.io/blog/introducing-flood-agent-standalone-infrastructure-for-load-testing&#34;&gt;

&lt;p&gt;&lt;em&gt;Originally posted &lt;a href=&#34;https://www.flood.io/blog/introducing-flood-agent-standalone-infrastructure-for-load-testing&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Working from home during this pandemic and wondering how to start load tests from the office? Today, we&amp;rsquo;re officially introducing Flood Agent, a way to turn your own physical or virtual machines into load generators that you can control from anywhere with an internet connection.&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Installing Flood Agent on a machine lets you start load tests on it remotely from Flood—even if it&amp;rsquo;s within a corporate VPN.&lt;/li&gt;
&lt;li&gt;Flood Agent is a simple binary that you can install on Linux, macOS, and Windows machines.&lt;/li&gt;
&lt;li&gt;Once you&amp;rsquo;ve installed Flood Agent, your machines show up on the Flood web app to use as load generators or grids.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;boldly-going-where-no-one-has-gone-before&#34;&gt;Boldly going where no one has gone before&lt;/h2&gt;
&lt;p&gt;Load testing within your company&amp;rsquo;s VPN and trying to coordinate it from home is like being on a maintenance pod trying to contact your starship, but a Mazarite ship is broadcasting a jamming signal, so comms are down. That Mazarite ship is your company&amp;rsquo;s firewall, and it can make testing difficult.&lt;/p&gt;
&lt;p&gt;‍&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/20200407-01.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The easiest way around this is to provision load generators in the cloud. However, because your application servers are still behind a firewall, you&amp;rsquo;d need to convince IT security to &lt;a href=&#34;https://guides.flood.io/test-execution/infrastructure/static-ip-addresses#hosted-grids&#34;&gt;whitelist the IP addresses&lt;/a&gt; of the load generators. Depending on how tight security policies are, this may not be an option even in this new world of remote working.&lt;/p&gt;
&lt;p&gt;Flood Agent is a way to start load tests on Flood from the load generators you already have. It&amp;rsquo;s a cross-platform agent that you can install on your regular load generators, allowing you to control them on Flood.&lt;/p&gt;
&lt;p&gt;‍‍&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/20200407-02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Flood Agent is kind of like the &lt;a href=&#34;https://en.wikipedia.org/wiki/Borg#Borg_Collective&#34;&gt;Borg Collective&lt;/a&gt;. Each machine that you install Flood Agent on is assimilated into the Borg. A hive mind (you, on the Flood site) controls all Borgs, coordinating test execution with robotic efficiency.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/J6P7vFEQ6PcgE/giphy.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Check out this video to follow along as I walk you through the process of setting up Flood Agent, or you can keep reading for the text version.&lt;/p&gt;
&lt;p&gt;‍
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/6VFn96aKSU8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

‍&lt;/p&gt;
&lt;h2 id=&#34;installing-and-configuring-flood-agent&#34;&gt;Installing and configuring Flood Agent&lt;/h2&gt;
&lt;p&gt;Flood Agent is a free binary, and it runs on Linux, Mac, or Windows machines. You can &lt;a href=&#34;https://github.com/flood-io/flood-agent/releases/latest&#34;&gt;download the appropriate version&lt;/a&gt; for your operating system and then follow the installation instructions here for more information:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://guides.flood.io/infrastructure/standalone-infrastructure/getting-started-on-linux&#34;&gt;Getting started on Linux&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://guides.flood.io/infrastructure/standalone-infrastructure/getting-started-on-macos&#34;&gt;Getting started on macOS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://guides.flood.io/infrastructure/standalone-infrastructure/getting-started-on-windows&#34;&gt;Getting started on Windows&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After installing Flood Agent, you can configure it according to how you want to use it. Start Flood Agent in your terminal and use the configure functionality. Here&amp;rsquo;s what that command looks like on macOS, but you can follow the links above for other operating systems:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./flood-agent configure
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;linking-your-flood-account&#34;&gt;Linking your Flood account&lt;/h3&gt;
&lt;p&gt;The command above yields a prompt for a token like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/20200407-03.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This token allows Flood to run load tests on the load generator that you&amp;rsquo;ve installed Flood Agent in. To get the token, go to the &lt;a href=&#34;https://app.flood.io/account/api&#34;&gt;API Access page&lt;/a&gt; on your Flood account (&lt;a href=&#34;https://app.flood.io/sign-up&#34;&gt;you already have one, don&amp;rsquo;t you?&lt;/a&gt;) and click REVEAL token.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/20200407-04.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;You should see a string of characters like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/20200407-05.jpg&#34; alt=&#34;&#34;&gt;‍&lt;/p&gt;
&lt;p&gt;Copy your token (anything after the = sign) and paste it into the Flood Agent terminal window.&lt;/p&gt;
&lt;h3 id=&#34;choosing-load-testing-tools&#34;&gt;Choosing load testing tools&lt;/h3&gt;
&lt;p&gt;Next, you can choose which tools you&amp;rsquo;d like to set up and which version of those tools Flood Agent uses to run your tests.&lt;/p&gt;
&lt;p&gt;‍&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/20200407-06.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Starting with JMeter, Flood Agent asks you which of the tools you&amp;rsquo;d like to configure. You can choose to set up your tools at the beginning so that you don&amp;rsquo;t have to set them up again, or you can go back to this configuration wizard at any point to add another tool. Either way, you need to provide the tools that you select in one of two ways: via a Docker image supplied by Flood, or via a &lt;a href=&#34;https://guides.flood.io/infrastructure/standalone-infrastructure/getting-started-local-jmeter-and-gatling&#34;&gt;local installation&lt;/a&gt; that you already have.&lt;/p&gt;
&lt;p&gt;For this example, I chose to configure JMeter and to use a local installation. Local installations give you the most flexibility because you can use the version of the tool that you prefer, along with any special plugins. However, if you already have Docker installed or don&amp;rsquo;t want to manually install JMeter separately, you can also use our Docker image for JMeter.&lt;/p&gt;
&lt;p&gt;Selecting a local installation prompts you to provide the location of that directory:&lt;/p&gt;
&lt;p&gt;‍&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/20200407-07.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;For JMeter, this looks something like &lt;code&gt;/Users/nvanderhoeven/jmeter/apache-jmeter-5.1.1.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After you enter this file path, Flood Agent checks to make sure the directory is valid. You can also set the configuration for other tools in this dialog.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/20200407-08.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;After you finish the configuration, the wizard writes to a config.yaml file in your Flood Agent directory. You can also edit this configuration file directly in the future if you prefer.&lt;/p&gt;
&lt;h2 id=&#34;verifying-flood-agent-configuration&#34;&gt;Verifying Flood Agent configuration&lt;/h2&gt;
&lt;p&gt;To run a final check on whether Flood Agent has been installed correctly, type &lt;code&gt;./flood-agent check&lt;/code&gt;. You should see a summary of the configuration options you selected as well as some connectivity and validity checks, like this:&lt;/p&gt;
&lt;p&gt;‍
&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/20200407-09.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;These green check marks mean you&amp;rsquo;re good to go! If you&amp;rsquo;re running Flood Agent from within a corporate network, though, you may see some errors here.&lt;/p&gt;
&lt;h2 id=&#34;troubleshooting-network-connectivity-within-a-corporate-network&#34;&gt;Troubleshooting network connectivity within a corporate network&lt;/h2&gt;
&lt;p&gt;If your company already has a web proxy, check out &lt;a href=&#34;https://guides.flood.io/infrastructure/standalone-infrastructure/deployment/integrating-with-a-web-proxy&#34;&gt;our guide on running floods through this proxy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please ensure that the load generator that you&amp;rsquo;ve installed Flood Agent on has access to the following endpoints:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&amp;lt;https://drain.flood.io&amp;gt;
&amp;lt;https://beacon.flood.io&amp;gt;
&amp;lt;https://vault.flood.io&amp;gt;
&amp;lt;https://flood-archives.s3-accelerate.amazonaws.com&amp;gt;
&amp;lt;https://logs.us-east-1.amazonaws.com&amp;gt;
&amp;lt;https://sns&amp;gt;.*.amazonaws.com
&amp;lt;https://sqs&amp;gt;.*.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You may need to request these from your IT department.&lt;/p&gt;
&lt;p&gt;If you get stuck, please contact us at &lt;a href=&#34;mailto:support@flood.io&#34;&gt;support@flood.io&lt;/a&gt;. We&amp;rsquo;d love to go over your specific situation and get you up and running.&lt;/p&gt;
&lt;p&gt;Once Flood Agent returns a successful check, you can start up your own grid!&lt;/p&gt;
&lt;h2 id=&#34;turning-your-machine-into-a-flood-grid&#34;&gt;Turning your machine into a Flood grid&lt;/h2&gt;
&lt;p&gt;A grid, in Flood terminology, is a group of machines to be used for load generation. To make your machine a grid, run this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./flood-agent --grid askaflooder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where &lt;code&gt;askaflooder&lt;/code&gt; is the name of your grid.&lt;/p&gt;
&lt;p&gt;‍&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/20200407-10.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once you see those [agent] ready and awaiting next job messages, you&amp;rsquo;re ready to run your test!&lt;/p&gt;
&lt;h2 id=&#34;running-a-load-test-on-your-own-infrastructure&#34;&gt;Running a load test on your own infrastructure&lt;/h2&gt;
&lt;p&gt;Log into your account on Flood, if you aren&amp;rsquo;t already, and &lt;a href=&#34;https://guides.flood.io/overview-of-flood/scripting-your-load-test#creating-a-stream&#34;&gt;create a new stream&lt;/a&gt; like you normally would, uploading your load testing script and data files. When &lt;a href=&#34;https://guides.flood.io/overview-of-flood/launching-your-test&#34;&gt;launching your test&lt;/a&gt;, though, select the option for Hosted infrastructure and then choose the grid with Flood Agent running on it.&lt;/p&gt;
&lt;p&gt;‍&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/20200407-11.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Go ahead and launch your test. Congratulations, you&amp;rsquo;re now set up to run a load test on your on-premise load generators!&lt;/p&gt;
&lt;h2 id=&#34;giving-it-a-go&#34;&gt;Giving it a go&lt;/h2&gt;
&lt;p&gt;Flood Agent is a free download, so you&amp;rsquo;ll only need to pay when you run load tests on Flood. However, we also have a free tier— perfect for a proof-of-concept while you&amp;rsquo;re working from home.&lt;/p&gt;
&lt;p&gt;If you have any questions about Flood Agent, check out &lt;a href=&#34;https://guides.flood.io/infrastructure/standalone-infrastructure/flood-agent&#34;&gt;our documentation&lt;/a&gt; or &lt;a href=&#34;mailto:support@flood.io&#34;&gt;email us&lt;/a&gt;. We&amp;rsquo;d be happy to get you started!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/flood-io/flood-agent/releases&#34;&gt;Download Flood Agent for free here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;‍&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/20200407-12.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ask a Flooder 10: What is the difference between load testing and stress testing?</title>
      <link>https://nicolevanderhoeven.github.io/blog/20200406-aaf10/</link>
      <pubDate>Mon, 06 Apr 2020 20:26:24 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20200406-aaf10/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://www.flood.io/blog/ask-a-flooder-10-what-is-the-difference-between-load-testing-and-stress-testing-video&#34;&gt;

&lt;p&gt;&lt;em&gt;Originally posted &lt;a href=&#34;https://www.flood.io/blog/ask-a-flooder-10-what-is-the-difference-between-load-testing-and-stress-testing-video&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s the difference between load testing and stress testing? When should you choose to run a load test on your application, and when is a stress test more appropriate? Well, it&amp;rsquo;s all in the intention.&lt;/p&gt;
&lt;p&gt;‍
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/igP2q__zMcc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Hi everyone, Nicole here again, back with another Ask a Flooder, and this time the question is:&lt;/p&gt;
&lt;h2 id=&#34;what-is-the-difference-between-load-testing-and-stress-testing&#34;&gt;What is the difference between load testing and stress testing?&lt;/h2&gt;
&lt;p&gt;Okay, again, this is a matter of semantics, but I think the difference is in the intention. Load testing and stress testing are both types of back-end performance testing, and I did also make a video on it that I&amp;rsquo;ll link in the description down below.&lt;/p&gt;
&lt;h3 id=&#34;load-testing-is-about-seeing-how-your-server-reacts-to-finite-load&#34;&gt;Load testing is about seeing how your server reacts to finite load&lt;/h3&gt;
&lt;p&gt;Now, with load testing, you usually have to start with a specific idea of the load profile that you want to test. You get to this number by looking through your Google Analytics or other analytics on your site to see what load you need to test at, and then the intention is to see how your server responds to that load. So the load is fixed: you know WHAT you want to test, and you just want to see how the server reacts to it. So it&amp;rsquo;s more finite in scope. In general, it&amp;rsquo;s also more about how your server reacts to normal or expected load, whether that&amp;rsquo;s now or in the future.&lt;/p&gt;
&lt;h3 id=&#34;stress-testing-explores-your-applications-upper-limits&#34;&gt;Stress testing explores your application&amp;rsquo;s upper limits&lt;/h3&gt;
&lt;p&gt;Stress testing, on the other hand, is a little bit more open-ended and a little bit more destructive. So instead of starting with how much load you want to put on [your server], in stress testing, what you generally do is you increase the load. You usually use a step load profile: so you start a certain number of users, you wait maybe 30 minutes, and then you increase it again. And you end up with this staircase kind of load profile. What you&amp;rsquo;re doing there is you just let it increase until your server fails because the intention of stress testing is to get your server to fail. And, once it fails, does it fail gracefully? Does it show an error message? These are really things that test the upper limits of your server, and that&amp;rsquo;s what stress testing really is.&lt;/p&gt;
&lt;h3 id=&#34;they-can-be-interchangeable&#34;&gt;They can be interchangeable&lt;/h3&gt;
&lt;p&gt;At Flood, we tend to use the word &amp;ldquo;load&amp;rdquo; testing to refer to both kinds of testing because both of them entail applying load on your application server. It&amp;rsquo;s not really that important to distinguish between one or another; what&amp;rsquo;s [important] is that your team uses the same definition so that when YOU say &amp;ldquo;load testing,&amp;rdquo; they know what you mean.&lt;/p&gt;
&lt;p&gt;Until the next time, happy flooding!&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://nicolevanderhoeven.github.io/blog/20200324-aaf07&#34;&gt;Video on performance testing vs load testing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Real-life stress testing in action: &lt;a href=&#34;https://nicolevanderhoeven.github.io/blog/20200309-fomo-and-performance-testing&#34;&gt;Robinhood app failure&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ask a Flooder 09: What are the best tools for load testing?</title>
      <link>https://nicolevanderhoeven.github.io/blog/20200331-aaf09/</link>
      <pubDate>Tue, 31 Mar 2020 20:35:36 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20200331-aaf09/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://www.flood.io/blog/ask-a-flooder-09-what-are-the-best-tools-for-load-testing-video&#34;&gt;

&lt;p&gt;&lt;em&gt;Originally posted &lt;a href=&#34;https://www.flood.io/blog/ask-a-flooder-09-what-are-the-best-tools-for-load-testing-video&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One of our most commonly-asked questions is: &amp;ldquo;What are the best tools for load testing?&amp;rdquo; The answer will depend on a few things: your reason for load testing, the application you want to test, what kind of load testing you want to carry out, your team&amp;rsquo;s experience with scripting, and how many virtual users you want to run.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: In this video, I say that traditional load testing tools can&amp;rsquo;t simulate requests that are triggered by interactions on the client-side. This isn&amp;rsquo;t technically true: if you know what the requests are, you can build those requests manually on a protocol-level tool (like JMeter or Gatling). However, this takes more work compared to browser-level tools that just do this natively.&lt;/em&gt;
‍

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/I5Wo6x2OoZU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Transcript:&lt;/p&gt;
&lt;p&gt;Hi everyone, Nicole back again with another Ask a Flooder, and this time I&amp;rsquo;m tackling one of the questions we get asked A LOT, which is:&lt;/p&gt;
&lt;h2 id=&#34;what-are-the-best-tools-for-load-testing&#34;&gt;What are the best tools for load testing?&lt;/h2&gt;
&lt;h3 id=&#34;why-open-source-load-testing-tools-are-awesome&#34;&gt;Why open-source load testing tools are awesome&lt;/h3&gt;
&lt;p&gt;Now, I want to preface this by saying that we really love open-source tools here at Flood, because 1) they&amp;rsquo;re really pretty full-fledged these days. You don&amp;rsquo;t have to make any compromises on features, and, in fact, some of these open-source tools have more features than some newer load testing tools just because they&amp;rsquo;ve been out longer. And secondly, they have large communities. Because they&amp;rsquo;re open-source, lots of people are using it, and lots of people are developing for it. So there are lots of plugins normally, and they support any kind of protocol that you can think of. And lastly, cost. It&amp;rsquo;s hard not to mention cost because it can be a really important factor depending on the budget of your project. And if you&amp;rsquo;re starting out as a load tester, I think that it might even be the best way to start with load testing, because you can take that knowledge with you and apply it to other projects and other companies regardless of the budget that they have.&lt;/p&gt;
&lt;h3 id=&#34;questions-to-ask-yourself-in-choosing-a-load-testing-tool&#34;&gt;Questions to ask yourself in choosing a load testing tool&lt;/h3&gt;
&lt;h4 id=&#34;why-are-you-doing-load-testing&#34;&gt;Why are you doing load testing?&lt;/h4&gt;
&lt;p&gt;I always advocate starting with WHY. Why are you actually load testing? Is there a particular production defect that you noticed that you&amp;rsquo;re trying to solve? Is there already a problem, or are you just preparing to launch? These are things that are going to inform the type of tool that you use because you might want to make sure that that tool supports the protocols that you need.&lt;/p&gt;
&lt;h4 id=&#34;what-are-you-load-testing&#34;&gt;What are you load testing?&lt;/h4&gt;
&lt;p&gt;Secondly, what type of app are you testing? Because if you have a single-page app, where your end-user is interacting with the page and client-side scripts are running to make requests to servers, then that&amp;rsquo;s something that most traditional load testing tools aren&amp;rsquo;t going to be able to do.&lt;/p&gt;
&lt;p&gt;There are two general types of load testing tools: there&amp;rsquo;s browser-based, and there&amp;rsquo;s protocol-based. I&amp;rsquo;ll leave a link in the description talking about the differences between the two, but in general, if you want to go for browser-level testing, I would suggest Selenium and Element. Now, they&amp;rsquo;re both very good options. Selenium is probably the more robust in terms of automation of the two, but Element is better one in terms of efficiency because it was built with performance in mind. So Selenium&amp;rsquo;s automation-first and Element is really performance-first.&lt;/p&gt;
&lt;p&gt;Now, for protocol-level tools, you can&amp;rsquo;t go wrong with either JMeter or Gatling.&lt;/p&gt;
&lt;h4 id=&#34;what-experience-does-your-team-have-with-scripting&#34;&gt;What experience does your team have with scripting?&lt;/h4&gt;
&lt;p&gt;Thirdly, what&amp;rsquo;s the level of technical expertise that your team has? I think it&amp;rsquo;s important to be realistic about what your team can do, given the amount of time that they have. So if you have a team that has never done load testing and has never done any scripting before, then I would suggest using our Test Builder or something similar. On Flood, we have a Test Builder that is really just an easy interface that actually runs JMeter under the hood, but it just kind of simplifies JMeter and boils it down to what are the URLs that you want to test. That is a really easy way to get started, and it&amp;rsquo;s also a great [way to run a] proof of concept. If you have some automation testers on your team that are trying to do the load testing, well, maybe you should stick to tools that they already use. So it might be easier for them to get up and running with either Selenium or Element rather than learning a new tool. And if you have developers on your team, you might consider Ruby JMeter rather than the vanilla JMeter because Ruby JMeter is a lot easier to deal with&amp;mdash; because you don&amp;rsquo;t have to deal with the XML files of a JMeter file (a normal JMX script). You can just plan out your load tests in Ruby. Or, Gatling is also a really good option because it allows you to write scripts in Scala. Scala is really really powerful, and you can create an entire framework with Gatling, which is also something to keep in mind.&lt;/p&gt;
&lt;h4 id=&#34;how-many-virtual-users-do-you-want-to-run-in-your-load-tests&#34;&gt;How many virtual users do you want to run in your load tests?&lt;/h4&gt;
&lt;p&gt;And lastly, how many users do you want to simulate? Now protocol-level tools are going to really shine here because Element and Selenium both require a higher usage of resources on your load generators just because of the complexities involved in starting a browser instance, whereas protocol-level tools are just super efficient at sending these requests. So I would suggest that if you&amp;rsquo;re talking about thousands of users, I would use the protocol-level tools unless there&amp;rsquo;s a really good reason why that&amp;rsquo;s not going to give you the results that you&amp;rsquo;re looking for. Between JMeter and Gatling&amp;ndash; well, they&amp;rsquo;re both excellent tools, but Gatling has been shown to particularly be good for really high levels of usage. But JMeter is also a good alternative, and you can run thousands of users of JMeter without any problem.&lt;/p&gt;
&lt;h2 id=&#34;just-get-started&#34;&gt;Just get started!&lt;/h2&gt;
&lt;p&gt;As always, I&amp;rsquo;d suggest just getting started. Pick whatever tool sounds like it might be the best for you, do a proof of concept on that one, and you can always try the other ones as well. On Flood, we don&amp;rsquo;t restrict you to just using one tool, so you can use one; you can use all four; you can run them at the same time if you want. It all depends on what you need for your testing.&lt;/p&gt;
&lt;p&gt;Till next time, happy flooding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ask a Flooder 08: Why is concurrent users an ambiguous measure of throughput?</title>
      <link>https://nicolevanderhoeven.github.io/blog/20200326-aaf08/</link>
      <pubDate>Thu, 26 Mar 2020 20:41:22 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20200326-aaf08/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://www.flood.io/blog/ask-a-flooder-08-why-is-concurrent-users-an-ambiguous-measure-of-throughput-video&#34;&gt;

&lt;p&gt;&lt;em&gt;Originally posted &lt;a href=&#34;https://www.flood.io/blog/ask-a-flooder-08-why-is-concurrent-users-an-ambiguous-measure-of-throughput-video&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What is the meaning of concurrent users in performance testing? You might have seen concurrent users in JMeter or other tools, but what does it mean and how can you use the term properly?&lt;/p&gt;
&lt;p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/uJE2hm50TIw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

‍&lt;/p&gt;
&lt;p&gt;Transcript:&lt;/p&gt;
&lt;p&gt;Hi everyone! Nicole here again for another Ask a Flooder, except this time it&amp;rsquo;s not really a question&amp;ndash; it&amp;rsquo;s just something I want to talk about.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nicolevanderhoeven.github.io/assets/20200326-01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Source: The &lt;a href=&#34;https://twitter.com/flood_io/status/1224284942932332544&#34;&gt;Flood Twitter account&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So I&amp;rsquo;m going to put the tweet up here, but last month I actually tweeted about something that somebody else posted. Netflix actually reported some of their viewership figures, and one thing that they reported was that 76 million households watched their new show, The Witcher, which is a large amount of people. So I posted something about why concurrent users is actually an ambiguous way to measure throughput, and I want to expound a little bit more on that.&lt;/p&gt;
&lt;h2 id=&#34;concurrent-users-in-performance-testing---limitations&#34;&gt;&amp;ldquo;Concurrent users&amp;rdquo; in performance testing - limitations&lt;/h2&gt;
&lt;p&gt;In load testing, the number of concurrent users is a pretty standard measure of throughput, and generally, it means the number of users that are accessing an application at any one point in time. And even on Flood, we use it because it&amp;rsquo;s a really good rule of thumb. When we want to get a feel for how big a test is, load testers generally ask, &amp;ldquo;How many users?&amp;rdquo; However, we should be aware, as load testers, that that doesn&amp;rsquo;t always give us the full picture.&lt;/p&gt;
&lt;h3 id=&#34;what-type-of-user-is-it&#34;&gt;What type of user is it?&lt;/h3&gt;
&lt;p&gt;For instance, the type of user that it is can really change the traffic. Sometimes mobile browsers will optimize requests so that they send fewer because they realize that mobile networks are slower.&lt;/p&gt;
&lt;h3 id=&#34;what-is-the-user-doing&#34;&gt;What is the user doing?&lt;/h3&gt;
&lt;p&gt;Secondly, what is the user doing? Are they browsing on different tabs all the time? Or are they just refreshing the content on the same tab? Because if they&amp;rsquo;re just using the same page and fetching it over and over again, then caching could come into play, so that would create a different load on the system.&lt;/p&gt;
&lt;h3 id=&#34;how-long-is-the-user-doing-it&#34;&gt;How long is the user doing it?&lt;/h3&gt;
&lt;p&gt;And thirdly, how long is the user doing it? Are we talking about a sustained load for an hour, or is it a shorter time period, like a spike test of five minutes where all the users just ram a system? There are things like the number of requests per second that you need to take into account, which is affected by the think time and the delays that you set in your script. Perhaps your script has a user that just sends a request, then waits for a minute, and then sends another request. That&amp;rsquo;s very different from a user just sending one request after another as fast as possible.&lt;/p&gt;
&lt;h3 id=&#34;when-does-the-user-do-it&#34;&gt;When does the user do it?&lt;/h3&gt;
&lt;p&gt;Lastly, it&amp;rsquo;s also important to take into account the seasonality of the request. When does the user do it? If you have a timesheeting application, for instance, then it might only get traffic on Fridays and a little bit on Monday, so you need to specify, when you report these numbers, whether it&amp;rsquo;s for the peak time period on Friday - you know, around 3 pm or something - or you&amp;rsquo;re reporting on figures from a Wednesday when there really wouldn&amp;rsquo;t be that many people accessing it.&lt;/p&gt;
&lt;p&gt;In the case of Netflix, what they counted as a view was only a two-minute watch time. So if you&amp;rsquo;re one of those people who went into The Witcher and didn&amp;rsquo;t watch past two minutes, that still counted as a view. So the 76 million users is still not completely accurate, because not all of those people would have watched the entire thing.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Concurrent users is a good way in order to get a quick feel of the throughput that a test outputs, but it really needs to be examined in context along with things like requests per second and the network throughput (kbps) in order to get a really good understanding of how much load a test is generating.&lt;/p&gt;
&lt;p&gt;Till next time, happy flooding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ask a Flooder 07: What is the difference between performance testing and load testing?</title>
      <link>https://nicolevanderhoeven.github.io/blog/20200324-aaf07/</link>
      <pubDate>Tue, 24 Mar 2020 20:31:06 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20200324-aaf07/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://www.flood.io/blog/ask-a-flooder-07-what-is-the-difference-between-performance-testing-and-load-testing-video&#34;&gt;

&lt;p&gt;&lt;em&gt;Originally posted &lt;a href=&#34;https://www.flood.io/blog/ask-a-flooder-07-what-is-the-difference-between-performance-testing-and-load-testing-video&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In a two-for-one Ask a Flooder, I answer two questions: What is the difference between performance testing and load testing and in which situations is performance testing a better option than load testing?&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/8CueAkDY5yE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Transcript:&lt;/p&gt;
&lt;p&gt;Hi again, it&amp;rsquo;s Nicole back for another Ask a Flooder. And this time, the question from one of our customers is:&lt;/p&gt;
&lt;h2 id=&#34;what-is-the-difference-between-performance-testing-and-load-testing&#34;&gt;What is the difference between performance testing and load testing?&lt;/h2&gt;
&lt;p&gt;Now, this is really a matter of semantics, and it kind of depends on whom you ask, but in general, performance is how quickly an application responds. So when you&amp;rsquo;re doing performance testing, you&amp;rsquo;re doing one of two things: there&amp;rsquo;s front-end performance, and then there&amp;rsquo;s back-end performance.&lt;/p&gt;
&lt;p&gt;In front-end performance, you&amp;rsquo;re looking at things like how quickly does the application render for the customer on the client-side. It&amp;rsquo;s how fast something renders on the screen, so it&amp;rsquo;s how page resources can be rearranged or optimized so that the experience is a lot faster for the end customer. So the focus is on the client-side on the end user&amp;rsquo;s actual device.&lt;/p&gt;
&lt;p&gt;On the back-end performance side, you&amp;rsquo;re looking at the server. How quickly does the server send a response to a request that&amp;rsquo;s sent by the browser?&lt;/p&gt;
&lt;p&gt;So those are really two different things because back-end performance really looks at everything outside - everything beyond - the device of the customer. Both kinds of performance testing are important. A solid, holistic performance testing strategy will incorporate both front-end and back-end performance.&lt;/p&gt;
&lt;p&gt;There are different types of back-end performance testing. You might have heard of load testing, stress testing, volume testing. At Flood, we kind of refer to all of those under the bracket of load testing. They do have some semantic differences between them, but in general, we talk about load testing to refer to simulating traffic against an application server to see how that server responds.&lt;/p&gt;
&lt;p&gt;Now the type of the testing that you want to do will also affect the kind of performance testing tool that you choose. For instance, a tool like Flood Element can do both front-end and back-end testing, but a tool like JMeter is only going to be useful for the back-end performance testing. So you need to choose your test according to the testing type that you&amp;rsquo;d like to carry out.&lt;/p&gt;
&lt;p&gt;This customer also had a follow-up question:&lt;/p&gt;
&lt;h2 id=&#34;in-which-situations-is-performance-testing-a-better-option-than-load-testing&#34;&gt;In which situations is performance testing a better option than load testing?&lt;/h2&gt;
&lt;p&gt;And one answer to this is when front-end performance is required. So if what you&amp;rsquo;re after is trying to speed up how quickly your application renders on a mobile device, for instance, you might be better off looking at tools like GTMetrix or WebPageTest in order to measure and improve that side of it.&lt;/p&gt;
&lt;p&gt;I really want to stress here that neither front-end performance nor back-end performance is better than the other. If you&amp;rsquo;re asking me which type of testing you should do, my answer would be both. Till next time, happy flooding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ask a Flooder 06: How to record traffic from a mobile app with JMeter</title>
      <link>https://nicolevanderhoeven.github.io/blog/20200319-aaf06/</link>
      <pubDate>Thu, 19 Mar 2020 20:50:44 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20200319-aaf06/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://www.flood.io/blog/ask-a-flooder-06-how-to-record-traffic-from-a-mobile-app-with-jmeter-video&#34;&gt;

&lt;p&gt;&lt;em&gt;Originally posted &lt;a href=&#34;https://www.flood.io/blog/ask-a-flooder-06-how-to-record-traffic-from-a-mobile-app-with-jmeter-video&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;How do you record the traffic from your native mobile app using Apache JMeter? In this video, I explain step-by-step how to begin load testing a native mobile app.&lt;/p&gt;
&lt;p&gt;‍
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/VVUyYF1VPlo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;You might want to be doing this because you&amp;rsquo;re load testing a mobile app but either you don&amp;rsquo;t have access to your developers right now so they can&amp;rsquo;t help you with how the requests are made or what the requests are, or maybe you just want to verify what you&amp;rsquo;ve already been told. Either way, I&amp;rsquo;m going to show you how using my Android device (it&amp;rsquo;s a Samsung Galaxy Note 10+) and a Macbook Pro 13&amp;quot;. However, the same principles should apply to other mobile devices and laptops.&lt;/p&gt;
&lt;h2 id=&#34;step-1-download-and-install-the-mobile-app&#34;&gt;Step 1: Download and install the mobile app&lt;/h2&gt;
&lt;p&gt;The first thing you&amp;rsquo;ll want to do is download and install the app. Now, if the app has already been released, then that&amp;rsquo;s no problem. You just go to the Google Play Store and download it. However, if it hasn&amp;rsquo;t been released yet and you&amp;rsquo;ve been given an APK file for the app, then you&amp;rsquo;ll have to tweak your settings a little bit in order to get your phone to allow you to download it.&lt;/p&gt;
&lt;p&gt;And I&amp;rsquo;m going to do this right with you. So go into Settings: pull down the little notification screen and hit the little gear icon, and you&amp;rsquo;ll see a bunch of settings there. Scroll down all the way to the bottom until you see About phone. Click that and then click Software Information. You&amp;rsquo;ll see the Build number halfway through the screen here&amp;ndash; and I know this is weird, but click on it seven times. You have to draw your pattern if you have one set up, but you&amp;rsquo;ll see here that it says Developer Mode has been enabled. That&amp;rsquo;s all you need to do; from now on you can install any APK, but be careful, because if you don&amp;rsquo;t trust the source, you know, they could do some damage to your phone.&lt;/p&gt;
&lt;h2 id=&#34;step-2-set-up-the-https-test-script-recorder-on-jmeter&#34;&gt;Step 2: Set up the HTTP(S) Test Script Recorder on JMeter&lt;/h2&gt;
&lt;p&gt;The second step is setting up an HTTP recorder on JMeter. So let&amp;rsquo;s head over to our laptop. Make sure you&amp;rsquo;re connected to a wifi network. Now, this is a completely new JMeter test plan here. So just right-click on Test Plan and then hover over Add, and then you&amp;rsquo;re going to go down to Non-Test Elements. Select the HTTP(S) Test Script Recorder. You&amp;rsquo;ll see here that the port it uses is 8888. We&amp;rsquo;ll need that for later. Now right-click on the Test Script Recorder, hit Add, and then Listener. We&amp;rsquo;ll add a View Results Tree to be able to capture the results that we need later. Now we&amp;rsquo;ll click on the Test Plan - right-click - and then we&amp;rsquo;re going to Add a Thread Group. Now let&amp;rsquo;s right-click on the Thread Group and go to Add &amp;gt; Logic Controller &amp;gt; Recording Controller. This is where the requests that we&amp;rsquo;re going to send are going to be recorded, and we&amp;rsquo;ll see both the requests and the responses in View Results Tree.&lt;/p&gt;
&lt;h2 id=&#34;step-3-set-up-your-mobile-to-use-the-https-test-script-recorder-as-a-proxy&#34;&gt;Step 3: Set up your mobile to use the HTTP(S) Test Script Recorder as a proxy&lt;/h2&gt;
&lt;p&gt;Now, the third step is to set up your mobile to use a proxy. So, back on the mobile, go back to Settings and hit Connections. And then click on Wifi. Now verify that the wifi network that you&amp;rsquo;re connected to on your mobile is the same one as the wifi network that you&amp;rsquo;re connected to on your laptop. If it&amp;rsquo;s the same, click the gear icon. And then hit Advanced all the way at the bottom. Now the Proxy settings are on the second option here so hit the down menu here and then hit Manual. Now, for the Proxy host name we&amp;rsquo;ll have to go back to the computer to see what our local IP address is.&lt;/p&gt;
&lt;p&gt;So, in order to do that, you just have to go to System Preferences. I&amp;rsquo;m doing it from the Apple menu here and from System Preferences, click on Network. And once you&amp;rsquo;ve selected the wifi network, hit Advanced, and then TCP/IP. So what you&amp;rsquo;re looking for will be this IPv4 Address. Now you&amp;rsquo;re going to type that into the Host name field on your mobile. So let me just type that in.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll note that this is actually a local IP address. It&amp;rsquo;s not your public IP address. Now for our proxy port, we&amp;rsquo;ll go and look at the laptop to see the Test Script Recorder Settings and it was 8888, so that&amp;rsquo;s what we&amp;rsquo;re going to put in here. All right. And then click on Save.&lt;/p&gt;
&lt;h2 id=&#34;step-4-start-recording&#34;&gt;Step 4: Start recording&lt;/h2&gt;
&lt;p&gt;Step 4 is recording the traffic. Now, go back to your laptop on JMeter and click on the Test Script Recorder. Now we&amp;rsquo;re going to click on Start. It&amp;rsquo;ll come up with this popup box here and you can just click OK since we already trust the source. You&amp;rsquo;ll see this little popup here to confirm that we are recording traffic. Now let&amp;rsquo;s see if we&amp;rsquo;ve actually configured it correctly.&lt;/p&gt;
&lt;p&gt;On our mobiles, let&amp;rsquo;s go back and open the app that you want to use. So I&amp;rsquo;m going to be using the IowaReporterApp. I just did an article on this on The New Stack (link in the description below) about how I would load test the Iowa Caucus Reporter App. So that&amp;rsquo;s what I&amp;rsquo;m going to be using for this tutorial as well. So I&amp;rsquo;m going to open that (&amp;ldquo;getting ready to caucus&amp;rdquo;) and I don&amp;rsquo;t have a valid precinct ID so I&amp;rsquo;m just going to put flood.io and I&amp;rsquo;m going to click Login. So it&amp;rsquo;s telling me that the connection isn&amp;rsquo;t private. I don&amp;rsquo;t actually expect this to work, because the app has been taken down and I don&amp;rsquo;t have valid login credentials, but I&amp;rsquo;m still just going to go forward. So, Proceed. You might have to do this as well if your certificates haven&amp;rsquo;t been set up correctly.&lt;/p&gt;
&lt;p&gt;Okay, so now we&amp;rsquo;ve gotten this error here and it says, &amp;ldquo;Oops, something went wrong&amp;rdquo;. So it&amp;rsquo;s handy to know what it looks like on your mobile so that you can go into JMeter and see if that&amp;rsquo;s what you see as well.&lt;/p&gt;
&lt;p&gt;So on JMeter let&amp;rsquo;s go to the View Results Tree and it looks like Google Play tried to do a few things beforehand but what we&amp;rsquo;re really looking for is this IDP caucus thing. So, these are the requests that my phone made and these are the responses. So this is where we got the certificate error because it says &amp;ldquo;certificate unknown&amp;rdquo;. Now this is the actual request we sent for login. You can see the request here - the full request - and also the full response. Now, just to check we&amp;rsquo;ll make sure we got the same response in the body here on JMeter that we saw on our mobile phones.&lt;/p&gt;
&lt;p&gt;And here it is; it says &amp;ldquo;Oops!, something went wrong&amp;rdquo;. You can of course just search for this. So we&amp;rsquo;ll stop the recording now because we&amp;rsquo;ve confirmed that we&amp;rsquo;ve gotten what we wanted. So in the recording controller, we can see the requests that were recorded from our mobile app and the first one looks like it was one to Google so that&amp;rsquo;s not one we want. If we were doing this again, we could actually go into the Test Script Recorder, go into this Requests Filtering tab, and we could just filter out or exclude the domains that we don&amp;rsquo;t want to test, like Google. But this looks like the request that we were actually looking for. You&amp;rsquo;ll see the full request here with all the parameters and the values.&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;And that&amp;rsquo;s how you record traffic from a native mobile app on JMeter. From here, you can then play around with the request. Like we saw, there were a lot of dynamic values that were recorded in the request. We would probably want to correlate those and make sure that we&amp;rsquo;re doing those correctly. But this is a really great starting point for testing a mobile app.&lt;/p&gt;
&lt;p&gt;Till the next Ask a Flooder, happy Flooding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ask a Flooder 05: How do I get started with Flood Element?</title>
      <link>https://nicolevanderhoeven.github.io/blog/20200317-aaf05/</link>
      <pubDate>Tue, 17 Mar 2020 20:58:12 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20200317-aaf05/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://www.flood.io/blog/ask-a-flooder-05-how-do-i-get-started-with-flood-element-video&#34;&gt;

&lt;p&gt;&lt;em&gt;Originally posted &lt;a href=&#34;https://www.flood.io/blog/ask-a-flooder-05-how-do-i-get-started-with-flood-element-video&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;On this Ask a Flooder, I talk about getting started with Flood Element. Element is an open-source tool that is a good Selenium alternative for browser-based load testing. It runs Puppeteer under the hood to drive real browsers at scale and can be paired with Flood for cloud load testing.&lt;/p&gt;
&lt;p&gt;‍
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/oWtnStKrh98&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;TRANSCRIPT:&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re sold on browser-based load testing and want to get started on Element, I think the easiest way to do that is by going to &lt;a href=&#34;http://element.flood.io&#34;&gt;element.flood.io&lt;/a&gt; and clicking on Install on the upper left corner. You can follow those instructions to get started, and you can also click on the links on the left side if you get stuck.&lt;/p&gt;
&lt;p&gt;Once Element is installed, open up the directory and look at the examples folder. There you&amp;rsquo;ll find a lot of sample scripts that we&amp;rsquo;ve already made up for you. The easiest way to get started is to just modify some of these slightly so that you&amp;rsquo;re testing your site. For example, you could just change the URL and step names to make it appropriate for what you&amp;rsquo;re testing.&lt;/p&gt;
&lt;p&gt;Then, you can run it locally using the command element run the name of your test script, like test.ts,  and then I also like to include the no-headless flag.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;element run test.ts --no-headless&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The no-headless flag is going to run a real browser, a Chromium browser, on your machine, so that you can see what the script is actually doing. This is a great way to debug and troubleshoot.&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;re ready to run your load test on the cloud, you can simply drag and drop your Element script into the Flood stream editor and then start your load test as usual.&lt;/p&gt;
&lt;p&gt;Check out the links in the description below for more information about Element, how to get started, and how to run an Element script on Flood.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://element.flood.io/&#34;&gt;More about Element&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://guides.flood.io/scripting-and-tools/flood-element/getting-started-with-element&#34;&gt;Getting started with Element&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ask a Flooder 04: Why would your load testing tool report higher response times than you expect?</title>
      <link>https://nicolevanderhoeven.github.io/blog/20200311-aaf04/</link>
      <pubDate>Wed, 11 Mar 2020 21:02:48 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20200311-aaf04/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://www.flood.io/blog/why-would-your-load-testing-tool-report-higher-response-times-than-you-expect-video&#34;&gt;

&lt;p&gt;&lt;em&gt;Originally posted &lt;a href=&#34;https://www.flood.io/blog/why-would-your-load-testing-tool-report-higher-response-times-than-you-expect-video&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this Ask a Flooder, I tackle a question we get all the time from users regarding results, particularly for cloud load testing. Sometimes you might notice that response times that are reported in by your load testing tool do not match up with the response time you see from your own browser. What causes this, and how can we fix it?&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/goKK2aACZZY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Transcript:&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s always confusing when your load testing tool reports higher average response times than what you can see while you&amp;rsquo;re manually accessing your application on your browser. There are many things that might cause this, but one of the most common causes for it is that you&amp;rsquo;re overloading your node generators.&lt;/p&gt;
&lt;p&gt;As a general rule of thumb, you&amp;rsquo;ll want to keep your CPU utilization at 80% or less throughout the duration of the test. It is normal for it to spike in the beginning, but it should ideally come to a more stable spot below 80%. If your node&amp;rsquo;s CPU utilization is going over 80% for most of the test, then what that means is that your node is struggling to get those requests out, which may lead to some inaccurate results.&lt;/p&gt;
&lt;p&gt;You can confirm whether or not this is the cause of your high response times by checking the logs and checking the resource utilization on your nodes.If you&amp;rsquo;re running on Flood, you can do this while the flood is running by going over to Grids, selecting the grid, and then scrolling down on the panel on the right to see the CPU and memory as well as the network throughput.&lt;/p&gt;
&lt;p&gt;There are a couple of things you can do to fix this. The first one is to increase any sort of delays or think times in your script — and, if you don&amp;rsquo;t already have any, you should add some. Think times make the script a lot more realistic and a lot closer to what real users would do. If these values are too low, then your load testing tool is just going to run the script as fast as possible, consuming more resources than necessary.&lt;/p&gt;
&lt;p&gt;The second thing you can do is reduce the number of users you&amp;rsquo;re running per node. This will free up more resources per node and make it a lot easier to scale up your load tests more effectively.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Check out &lt;a href=&#34;https://guides.flood.io/results-analysis/troubleshooting-results-analysis/reported-response-times-higher-than-observed&#34;&gt;this article&lt;/a&gt; for more detailed information on resource over-utilization and other possible reasons for differences between response times in a test and on a browser.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TestCon Moscow 2019: Dismantling Cognitive Biases</title>
      <link>https://nicolevanderhoeven.github.io/blog/20190403-testcon-moscow-2019/</link>
      <pubDate>Wed, 03 Apr 2019 23:14:31 +0100</pubDate>
      
      <guid>https://nicolevanderhoeven.github.io/blog/20190403-testcon-moscow-2019/</guid>
      <description>

&lt;link rel=&#34;canonical&#34; href=&#34;https://www.flood.io/blog/dismantling-cognitive-biases-in-performance-testing&#34;&gt;

&lt;p&gt;&lt;em&gt;Originally posted &lt;a href=&#34;https://www.flood.io/blog/dismantling-cognitive-biases-in-performance-testing&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Developers and testers alike prefer to think of themselves as entirely rational beings, because both software development and software testing do require systematic rigor and logical reasoning. However, the reality is that the human element still comes into play when building and testing software.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://testconf.ru/2019/en/nicole-van-der-hoeven/index.html&#34;&gt;this year’s TestCon conference&lt;/a&gt;, held in Moscow, Russia, I delivered a talk on how cognitive biases affect web performance outcomes.&lt;/p&gt;
&lt;p&gt;In the talk, I discuss:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;two types of thinking: fast thinking and slow thinking (from Daniel Kahneman&amp;rsquo;s book &lt;a href=&#34;https://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374533555&#34;&gt;Thinking, Fast and Slow&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how to influence the sentence duration that judges give perpetrators&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;what cognitive biases are and how they can affect performance testing results&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a real-life production incident that occurred on Flood and how our team&amp;rsquo;s cognitive biases got in the way of its resolution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;what to do to avoid cognitive biases when testing software&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s the video of my full talk:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/GPD8F0e7eX8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Download the presentation &lt;a href=&#34;https://nicolevanderhoeven.github.io/assets/20190403-01.pdf&#34;&gt;in PDF format&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>